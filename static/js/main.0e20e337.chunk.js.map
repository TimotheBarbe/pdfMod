{"version":3,"sources":["utils/Uint8ArrayUtils.tsx","pdf/loader/PdfLoader.tsx","pdf/redux/actions.ts","pdf/loader/PdfLoaderContainer.ts","pdf/redux/selectors.ts","pdf/preview/PdfPage.tsx","pdf/preview/PdfPageContainer.ts","pdf/preview/PdfPreview.tsx","pdf/preview/PdfPreviewContainer.ts","pdf/download/PdfDownload.tsx","pdf/download/PdfDownloadContainer.ts","components/Scaffolder.tsx","utils/pdfUtils.tsx","pdf/modify/PdfInsertPage.tsx","pdf/modify/PdfInsertPageContainer.ts","components/App.tsx","serviceWorker.js","pdf/redux/reducers.ts","state/store.tsx","index.tsx","../node_modules/pdfjs-dist/build sync"],"names":["isEmpty","pdf","pageCount","PdfLoader","read","files","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","_this","toInfo","then","r","props","load","readAsArrayBuffer","existingPdfBytes","PDFDocument","doc","getPageCount","save","data","selectedPage","_this2","this","classes","react_default","a","createElement","Fragment","dist_es","onDrop","acceptedFiles","accept","multiple","_ref","getRootProps","getInputProps","className","dropzone","PureComponent","ActionTypes","component","selectPage","loadPdfAction","createAction","selectPageAction","withStyles","theme","createStyles","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","palette","secondary","main","borderStyle","backgroundColor","color","outline","withTheme","connect","state","dispatch","pdfSelector","pdfSelectedPageSelector","PdfPage","event","index","_this$props","scale","selected","onClick","entry","width","height","pageIndex","& > canvas","border","concat","primary","margin","PdfPreview","noPdf","before","Array","from","keys","slice","after","PdfLoaderContainer","Grid","container","spacing","item","xs","map","PdfPageContainer","key","PdfDownload","download","Button","variant","style","disabled","Scaffolder","react","AppBar","elevation","position","Toolbar","Typography","content","children","React","_callee","regenerator_default","wrap","_context","prev","next","sent","insertPage","abrupt","update","$set","stop","PdfInsert","insert","_x","_x2","_insertPage","apply","arguments","TextField","id","label","type","InputLabelProps","shrink","PdfInsertPage","createMuiTheme","App","ThemeProvider","CssBaseline","components_Scaffolder","PdfDownloadContainer","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","ExpansionPanelDetails","PdfInsertPageContainer","PdfPreviewContainer","Boolean","window","location","hostname","match","setPdfReducer","handleActions","_handleActions","Object","defineProperty","action","payload","Uint8Array","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","pdfjs","GlobalWorkerOptions","workerSrc","version","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","e","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.0e20e337.chunk.js","sourcesContent":["import {IPdfInfo} from \"../state/models\";\n\nexport const getEmpty = (): IPdfInfo => {\n    return {data: new Uint8Array(0), pageCount: 0, selectedPage: 0};\n}\n\nexport const isEmpty = (pdf: IPdfInfo) => {\n    return pdf.pageCount === 0;\n}","import React, {PureComponent} from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport {PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {WithStyles} from \"@material-ui/core\";\n\ninterface IPdfLoaderProps extends WithStyles {\n    load: (data: IPdfInfo) => void\n}\n\nexport default class PdfLoader extends PureComponent<IPdfLoaderProps> {\n\n    async toInfo(existingPdfBytes: string | ArrayBuffer): Promise<IPdfInfo> {\n        const doc = await PDFDocument.load(existingPdfBytes)\n        let pageCount = doc.getPageCount();\n        const data = await doc.save();\n        return {data, pageCount, selectedPage: 0}\n    }\n\n    private read = (files: File[]) => {\n        const file = files[0]\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = () => {\n            const binaryStr = reader.result\n            if (binaryStr != null) this.toInfo(binaryStr).then(r => this.props.load(r))\n        }\n        reader.readAsArrayBuffer(file)\n    };\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <Dropzone onDrop={acceptedFiles => this.read(acceptedFiles)} accept={\".pdf\"} multiple={false}>\n                    {({getRootProps, getInputProps}) => (\n                        <section>\n                            <div {...getRootProps({className: classes.dropzone})}>\n                                <input {...getInputProps()} />\n                                <p>Drag 'n' drop some files here, or click to select files</p>\n                            </div>\n                        </section>\n                    )}\n                </Dropzone>\n            </React.Fragment>\n        )\n    }\n}","import {createAction} from \"redux-actions\";\nimport {IPdfInfo} from \"../../state/models\";\n\nconst component = \"pdf/\";\n\nexport const ActionTypes = {\n    load: component + \"load\",\n    selectPage: component + \"select\"\n};\n\nexport const loadPdfAction = createAction<IPdfInfo>(ActionTypes.load);\nexport const selectPageAction = createAction<number>(ActionTypes.selectPage);","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport PdfLoader from \"./PdfLoader\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {loadPdfAction} from \"../redux/actions\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        dropzone: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            padding: \"20px\",\n            borderWidth: \"2px\",\n            borderRadius: \"2px\",\n            borderColor: theme.palette.secondary.main,\n            borderStyle: \"dashed\",\n            backgroundColor: \"#fafafa\",\n            color: theme.palette.secondary.main,\n            outline: \"none\",\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfLoader));","import {IStoreState} from \"../../state/models\";\n\nexport const pdfSelector = (state: IStoreState) => state.pdf;\nexport const pdfDataSelector = (state: IStoreState) => pdfSelector(state).data;\nexport const pdfPageCountSelector = (state: IStoreState) => pdfSelector(state).pageCount;\nexport const pdfSelectedPageSelector = (state: IStoreState) => pdfSelector(state).selectedPage;\n","import React, {PureComponent} from \"react\";\nimport {Page} from \"react-pdf\";\nimport {WithStyles} from \"@material-ui/core\";\n\ninterface IPdfPageProps extends WithStyles {\n    selectPage: (index: number) => void;\n\n    index: number;\n    selected: boolean;\n    scale: number;\n}\n\n\nexport default class PdfPage extends PureComponent<IPdfPageProps> {\n    private selectPage = (event: React.MouseEvent<any>) => this.props.selectPage(this.props.index)\n\n    public render() {\n        const {index, classes, scale, selected} = this.props;\n\n        return (\n            <div onClick={this.selectPage}>\n                <Page className={selected ? classes.selected : \"\"} width={420} height={594} scale={scale}\n                      pageIndex={index}/>\n                {index}\n            </div>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport {pdfSelectedPageSelector, pdfSelector} from \"../redux/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport PdfPage from \"./PdfPage\"\nimport {selectPageAction} from \"../redux/actions\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        selected: {\n            \"& > canvas\": {\n                border: `1px solid ${theme.palette.primary.main}`,\n            },\n            margin: 5\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    selectedPage: pdfSelectedPageSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPage));","import React, {PureComponent} from \"react\";\nimport {Document} from \"react-pdf\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport PdfLoaderContainer from \"../loader/PdfLoaderContainer\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {Grid, WithStyles} from \"@material-ui/core\";\nimport PdfPageContainer from \"./PdfPageContainer\";\n\ninterface IPdfPreviewProps extends WithStyles {\n    pdf: IPdfInfo;\n    selectedPage: number;\n}\n\n\nexport default class PdfPreview extends PureComponent<IPdfPreviewProps> {\n\n    public render() {\n        const {pdf, selectedPage} = this.props;\n        const noPdf = isEmpty(pdf);\n\n        const before = Array.from(Array(pdf.selectedPage).keys()).slice(-2)\n        const after = Array.from(Array(pdf.pageCount).keys()).slice(selectedPage, selectedPage + 3)\n\n        return (\n            <React.Fragment>\n                {noPdf && <PdfLoaderContainer/>}\n                {!noPdf && <Document file={{data: pdf.data}}>\n                    <Grid container={true} spacing={3}>\n                        <Grid item={true} xs={3}>\n                            {before.map((index) => (\n                                    index !== selectedPage &&\n                                    <PdfPageContainer key={index} selected={false} index={index} scale={0.5}/>\n                                )\n                            )}\n                        </Grid>\n                        <Grid item={true} xs={6}>\n                            <PdfPageContainer selected={true} index={selectedPage} scale={1}/>\n                        </Grid>\n                        <Grid item={true} xs={3}>\n                            {after.map((index) => (\n                                    index !== selectedPage &&\n                                    <PdfPageContainer key={index} selected={false} index={index} scale={0.5}/>\n                                )\n                            )}\n                        </Grid>\n                    </Grid>\n                </Document>}\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfPreview from \"./PdfPreview\";\nimport {pdfSelectedPageSelector, pdfSelector} from \"../redux/selectors\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    selectedPage: pdfSelectedPageSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({});\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(PdfPreview));","import React, {PureComponent} from \"react\";\nimport download from \"downloadjs\";\nimport {Button} from \"@material-ui/core\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo} from \"../../state/models\";\n\ninterface IPdfPreviewProps {\n    pdf: IPdfInfo;\n}\n\nexport default class PdfDownload extends PureComponent<IPdfPreviewProps> {\n\n    private download = () => {\n        download(this.props.pdf.data, \"download.pdf\", \"application/pdf\");\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.download} style={{margin: \"0 10px 10px 0\"}}\n                        disabled={isEmpty(this.props.pdf)}>\n                    Download\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfDownload from \"./PdfDownload\";\nimport {pdfSelector} from \"../redux/selectors\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDownload);","import * as React from \"react\";\nimport {AppBar, createStyles, Grid, Paper, Theme, Toolbar, Typography, withStyles, WithStyles} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            height: \"calc(100%-64px)\",\n            padding: 40,\n        }\n    })\n\nclass Scaffolder extends React.PureComponent<WithStyles> {\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <AppBar elevation={0} position={\"static\"}>\n                    <Toolbar>\n                        <Typography variant=\"h6\">\n                            pdfMod\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <main className={classes.content}>\n                    {this.props.children}\n                </main>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(Scaffolder);\n","import {PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo} from \"../state/models\";\nimport update from 'immutability-helper';\n\nexport async function insertPage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    doc.insertPage(index);\n    let data = await doc.save();\n    return update(state, {data: {$set: data}, pageCount: {$set: state.pageCount + 1}, selectedPage: {$set: index}})\n}","import React, {PureComponent} from \"react\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport {insertPage} from \"../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\n\ninterface IPdfInsertProps {\n    pdf: IPdfInfo;\n    load: (data: IPdfInfo) => void;\n    index: number;\n}\n\nexport default class PdfInsert extends PureComponent<IPdfInsertProps> {\n\n    private insert = () => {\n        insertPage(this.props.pdf, this.props.index).then(this.props.load)\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <TextField\n                    id=\"standard-number\"\n                    label=\"Number\"\n                    type=\"number\"\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                        style={{margin: \"0 10px 10px 0\"}} disabled={isEmpty(this.props.pdf)}>\n                    Insert new page\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {pdfSelector} from \"../redux/selectors\";\nimport {loadPdfAction} from \"../redux/actions\";\nimport PdfInsertPage from \"./PdfInsertPage\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertPage);","import \"./App.css\";\n\nimport * as React from \"react\";\nimport {CssBaseline, ExpansionPanel, ExpansionPanelDetails, Grid, Typography} from \"@material-ui/core\";\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core/styles\";\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport PdfPreviewContainer from \"../pdf/preview/PdfPreviewContainer\";\nimport PdfDownloadContainer from \"../pdf/download/PdfDownloadContainer\";\nimport Scaffolder from \"./Scaffolder\";\nimport PdfInsertContainer from \"../pdf/modify/PdfInsertPageContainer\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {main: \"#ee3f3f\"},\n        secondary: {main: \"#a09f9f\"},\n        // type: 'dark',\n    }\n});\n\nclass App extends React.PureComponent {\n\n    public render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline/>\n                <Scaffolder>\n                    <Grid container={true} spacing={3}>\n                        <Grid item={true} xs={4}>\n                            <PdfDownloadContainer/>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Insert page</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertContainer index={1}/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        </Grid>\n                        <Grid item={true} xs={8}>\n                            <PdfPreviewContainer/>\n                        </Grid>\n                    </Grid>\n                </Scaffolder>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {getEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo} from \"../../state/models\";\nimport update from \"immutability-helper\";\n\nexport const setPdfReducer = handleActions<any, any>(\n    {\n        [ActionTypes.load]: (state: IPdfInfo, action: Action<IPdfInfo>) => {\n            return action.payload as IPdfInfo;\n        },\n        [ActionTypes.selectPage]: (state: IPdfInfo, action: Action<number>) => {\n            return update(state, {selectedPage: {$set: action.payload}})\n        }\n    },\n    getEmpty()\n);\n","import {applyMiddleware, createStore, combineReducers} from \"redux\";\nimport {setPdfReducer} from \"../pdf/redux/reducers\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\n\nconst rootReducer = combineReducers({\n    pdf: setPdfReducer\n})\n\nexport const store = createStore(rootReducer, composeWithDevTools(\n    applyMiddleware()\n))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from \"./serviceWorker\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport { pdfjs } from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 76;"],"sourceRoot":""}