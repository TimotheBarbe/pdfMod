{"version":3,"sources":["utils/Uint8ArrayUtils.tsx","utils/stringUtils.tsx","utils/pdfUtils.tsx","pdf/loader/PdfLoader.tsx","pdf/redux/pdf/actions.ts","pdf/redux/pdf/selectors.ts","pdf/loader/PdfLoaderContainer.ts","pdf/preview/PdfPage.tsx","pdf/preview/PdfPageContainer.ts","pdf/loader/PdfCreateBlankDoc.tsx","pdf/loader/PdfCreateBlankDocContainer.ts","pdf/preview/PdfPreview.tsx","pdf/redux/display/selectors.ts","pdf/preview/PdfPreviewContainer.ts","pdf/download/PdfDownload.tsx","pdf/download/PdfDownloadContainer.ts","components/version/VersionSelector.tsx","components/version/VersionSelectorContainer.ts","components/view/ViewSelector.tsx","pdf/redux/display/actions.ts","components/view/ViewSelectorContainer.ts","components/Scaffolder.tsx","utils/formUtils.tsx","pdf/modify/insert/PdfInsertPage.tsx","pdf/redux/form/selectors.ts","pdf/redux/form/actions.ts","pdf/modify/insert/PdfInsertPageContainer.ts","pdf/modify/delete/PdfDeletePage.tsx","pdf/modify/delete/PdfDeletePageContainer.ts","pdf/modify/text/PdfInsertText.tsx","pdf/modify/text/PdfInsertTextContainer.ts","pdf/modify/rotation/PdfRotationPage.tsx","pdf/modify/rotation/PdfRotationPageContainer.ts","pdf/modify/rectangle/PdfInsertRectangle.tsx","pdf/modify/rectangle/PdfInsertRectangleContainer.ts","components/App.tsx","serviceWorker.js","pdf/redux/pdf/reducers.ts","pdf/redux/form/reducers.ts","pdf/redux/display/reducers.ts","state/store.tsx","index.tsx","../node_modules/pdfjs-dist/build sync"],"names":["isEmpty","pdf","pageCount","intervalExp","RegExp","isInterval","value","test","getInterval","exec","toRgb","hex","replace","m","r","g","b","result","getValue","v","parseInt","rgb","_callee","doc","data","regenerator_default","a","wrap","_context","prev","next","PDFDocument","create","sent","addPage","save","abrupt","selectedPage","stop","_callee2","state","index","_context2","load","insertPage","update","$set","removePage","_x3","_x4","_removePage","apply","this","arguments","_callee3","_context3","removePages","_x5","_x6","_removePages","_callee4","indexes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context4","undefined","reverse","Symbol","iterator","done","t0","return","finish","length","loadPdf","_x7","_loadPdf","_callee5","toLoad","_context5","getPageCount","mergePdf","_x8","_x9","_mergePdf","_callee6","start","end","startDoc","endDoc","contentPages","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","page","_context6","copyPages","getPageIndices","_callee7","_context7","then","_callee8","option","color","rotate","size","x","y","text","_context8","getPage","drawText","degrees","lineHeight","_callee9","width","height","_context9","drawRectangle","borderWidth","_callee10","angle","_context10","setRotation","getRotation","PdfLoader","read","files","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","_x10","_x11","_loadAndMerge","loadAndMerge","_this","props","readAsArrayBuffer","_this2","classes","react_default","createElement","Fragment","dist_es","onDrop","acceptedFiles","accept","multiple","_ref","getRootProps","getInputProps","className","dropzone","PureComponent","ActionTypes","component","selectPage","changeVersion","loadPdfAction","createAction","selectPageAction","pdfWithVersionSelector","pdfSelector","versions","position","pdfSelectorCanPrevious","pdfSelectorCanNext","pdfPageCountSelector","pdfSelectedPageSelector","withStyles","theme","createStyles","flex","display","flexDirection","alignItems","padding","borderRadius","borderColor","palette","secondary","main","borderStyle","backgroundColor","outline","withTheme","connect","dispatch","PdfPage","event","stopPropagation","_this$props","scale","selected","onClick","top","center","toLocaleString","IconButton","aria-label","right","Delete_default","fontSize","entry","pageIndex","renderAnnotationLayer","border","concat","margin","primary","& > canvas","justifyContent","textAlign","PdfCreateBlankDoc","createNew","_createBlank","createBlank","Button","variant","style","startIcon","Add_default","PdfPreview","view","noPdf","before","Array","from","keys","slice","all","after","Grid","container","spacing","item","xs","PdfCreateBlankDocContainer","PdfLoaderContainer","disabled","ArrowBack_default","map","PdfPageContainer","key","content","ArrowForward_default","displayViewSelector","displaySelector","maxWidth","maxHeight","overflow","PdfDownload","download","VersionSelector","change","canPrevious","canNext","Undo_default","Typography","Redo_default","marginLeft","marginRight","ViewSelector","handleAlignment","setView","group","ToggleButtonGroup","exclusive","onChange","ToggleButton","ViewList_default","ZoomIn_default","setDisplayViewAction","Scaffolder","react","AppBar","elevation","Toolbar","VersionSelectorContainer","ViewSelectorContainer","Divider","orientation","flexItem","href","target","GitHub_default","children","React","setString","setter","setNumber","PdfInsertPage","insert","pos","isNaN","_x","_x2","_insertPage","isDisabled","isNotValidNumber","setInsert","TextField","label","type","InputLabelProps","shrink","formSelector","form","formRemoveSelector","remove","formInsertSelector","formTextOptionSelector","textOption","formTextXSelector","formTextYSelector","formTextRotateSelector","formTextColorSelector","formTextSizeSelector","formTextSelector","formRectangleOptionSelector","rectangleOption","formRectangleXSelector","formRectangleYSelector","formRectangleRotateSelector","formRectangleHeightSelector","formRectangleWidthSelector","formRectangleColorSelector","set","setRemove","setTextColor","setTextY","setTextX","setTextSize","setTextRotate","setText","setRectangleY","setRectangleX","setRectangleRotate","setRectangleHeight","setRectangleWidth","setRectangleColor","setFormRemoveAction","setFormInsertAction","setTextColorAction","setTextYAction","setTextXAction","setTextSizeAction","setTextRotateAction","setTextAction","setRectangleYAction","setRectangleXAction","setRectangleHeightAction","setRectangleWidthAction","setRectangleRotateAction","setRectangleColorAction","PdfDeletePage","interval","toRemove","placeholder","Component","PdfInsertText","_x12","_x13","_drawText","multiline","rows","fullWidth","inputProps","min","id","name","PdfRotationPage","_x16","_x17","_rotatePage","rotatePage","RotateLeft_default","endIcon","RotateRight_default","PdfInsertRectangle","_x14","_x15","_drawRectangle","createMuiTheme","App","ThemeProvider","CssBaseline","components_Scaffolder","PdfDownloadContainer","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","ExpansionPanelDetails","PdfInsertPageContainer","PdfDeletePageContainer","PdfInsertTextContainer","PdfInsertRectangleContainer","PdfRotationPageContainer","PdfPreviewContainer","Boolean","window","location","hostname","match","setPdfReducer","handleActions","_handleActions","Object","defineProperty","action","$splice","payload","Uint8Array","setRemoveReducer","setInsertReducer","setTextOptionReducer","_handleActions3","setRectangleOptionReducer","_handleActions4","setFormReducer","combineReducers","setViewReducer","setDisplayReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","pdfjs","GlobalWorkerOptions","workerSrc","version","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","e","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.a79c9d77.chunk.js","sourcesContent":["import {IPdfInfo} from \"../state/models\";\n\nexport const getEmpty = (): IPdfInfo => {\n    return {data: new Uint8Array(0), pageCount: 0, selectedPage: 0};\n}\n\nexport const isEmpty = (pdf: IPdfInfo) => {\n    return pdf.pageCount === 0;\n}","import {rgb} from \"pdf-lib\";\n\nconst intervalExp = new RegExp('^([0-9]+)-([0-9]+)$');\n\nexport const isInterval = (value: string) => {\n    return intervalExp.test(value)\n}\n\nexport const getInterval = (value: string) => {\n    let exec = intervalExp.exec(value) as RegExpExecArray;\n    return [+exec[1], +exec[2]]\n}\n\nexport const toRgb = (hex: string) => {\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    function getValue(v: string) {\n        return parseInt(v, 16) / 255;\n    }\n\n    return result ? rgb(getValue(result[1]), getValue(result[2]), getValue(result[3])) : rgb(0, 0, 0);\n}","import {degrees, PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo, IRectangleOption, ITextOption} from \"../state/models\";\nimport update from 'immutability-helper';\nimport {isEmpty} from \"./Uint8ArrayUtils\";\nimport {toRgb} from \"./stringUtils\";\n\nexport async function createBlank(): Promise<IPdfInfo> {\n    const doc = await PDFDocument.create()\n    const page = doc.addPage()\n    const data = await doc.save();\n    return {data, pageCount: 1, selectedPage: 0} as IPdfInfo\n}\n\nexport async function insertPage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    doc.insertPage(index);\n    const data = await doc.save();\n    return update(state, {data: {$set: data}, pageCount: {$set: state.pageCount + 1}, selectedPage: {$set: index}})\n}\n\nexport async function removePage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    return removePages(state, [index]);\n}\n\n/**\n * @param indexes must be ordered !\n */\nexport async function removePages(state: IPdfInfo, indexes: number[]): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    for (const index of indexes.reverse()) {\n        doc.removePage(index);\n    }\n    const data = await doc.save();\n    return {data, pageCount: state.pageCount - indexes.length, selectedPage: state.selectedPage}\n}\n\nexport async function loadPdf(toLoad: string | ArrayBuffer): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(toLoad)\n    const pageCount = doc.getPageCount();\n    const data = await doc.save();\n    return {data, pageCount, selectedPage: 0}\n}\n\nexport async function mergePdf(start: IPdfInfo, end: IPdfInfo): Promise<IPdfInfo> {\n    if (isEmpty(start)) return end;\n    const startDoc = await PDFDocument.load(start.data);\n    const endDoc = await PDFDocument.load(end.data);\n    const contentPages = await startDoc.copyPages(endDoc, endDoc.getPageIndices());\n    for (const page of contentPages) {\n        startDoc.addPage(page);\n    }\n    const data = await startDoc.save();\n    return {data, pageCount: start.pageCount + end.pageCount, selectedPage: start.selectedPage}\n}\n\nexport async function loadAndMerge(toLoad: string | ArrayBuffer, start: IPdfInfo): Promise<IPdfInfo> {\n    return loadPdf(toLoad).then(end => mergePdf(start, end))\n}\n\nexport async function drawText(state: IPdfInfo, option: ITextOption): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(state.selectedPage);\n    const {color, rotate, size, x, y, text} = option\n    page.drawText(text, {x, y, rotate: degrees(rotate), size, color: toRgb(color), lineHeight: size})\n    const data = await doc.save();\n    return update(state, {data: {$set: data}})\n}\n\nexport async function drawRectangle(state: IPdfInfo, option: IRectangleOption): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(state.selectedPage);\n    const {rotate, x, y, width, height, color} = option\n    page.drawRectangle({x, y, rotate: degrees(rotate), color: toRgb(color), width, height, borderWidth: 0})\n    const data = await doc.save();\n    return update(state, {data: {$set: data}})\n}\n\nexport async function rotatePage(state: IPdfInfo, angle: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(state.selectedPage);\n    page.setRotation(degrees(page.getRotation().angle + angle))\n    const data = await doc.save();\n    return update(state, {data: {$set: data}})\n}","import React, {PureComponent} from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport {PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {WithStyles} from \"@material-ui/core\";\nimport {loadAndMerge, loadPdf, mergePdf} from \"../../utils/pdfUtils\";\n\ninterface IPdfLoaderProps extends WithStyles {\n    load: (data: IPdfInfo) => void;\n    pdf: IPdfInfo;\n}\n\nexport default class PdfLoader extends PureComponent<IPdfLoaderProps> {\n\n    private read = (files: File[]) => {\n        const file = files[0]\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = () => {\n            const binaryStr = reader.result\n            if (binaryStr != null) loadAndMerge(binaryStr, this.props.pdf).then(r => this.props.load(r))\n        }\n        reader.readAsArrayBuffer(file)\n    };\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <Dropzone onDrop={acceptedFiles => this.read(acceptedFiles)} accept={\".pdf\"} multiple={false}>\n                    {({getRootProps, getInputProps}) => (\n                        <section>\n                            <div {...getRootProps({className: classes.dropzone})}>\n                                <input {...getInputProps()} />\n                                <p>Drag 'n' drop some files here, or click to select files</p>\n                            </div>\n                        </section>\n                    )}\n                </Dropzone>\n            </React.Fragment>\n        )\n    }\n}","import {createAction} from \"redux-actions\";\nimport {IPdfInfo} from \"../../../state/models\";\n\nconst component = \"pdf/\";\n\nexport const ActionTypes = {\n    load: component + \"load\",\n    selectPage: component + \"select\",\n    changeVersion: component + \"previousVersion\"\n};\n\nexport const loadPdfAction = createAction<IPdfInfo>(ActionTypes.load);\nexport const selectPageAction = createAction<number>(ActionTypes.selectPage);\nexport const changeVersion = createAction<number>(ActionTypes.changeVersion);","import {IStoreState} from \"../../../state/models\";\n\nexport const pdfWithVersionSelector = (state: IStoreState) => state.pdf\nexport const pdfSelector = (state: IStoreState) => pdfWithVersionSelector(state).versions[pdfWithVersionSelector(state).position];\nexport const pdfSelectorCanPrevious = (state: IStoreState) => pdfWithVersionSelector(state).position > 0;\nexport const pdfSelectorCanNext = (state: IStoreState) => pdfWithVersionSelector(state).position < pdfWithVersionSelector(state).versions.length - 1;\nexport const pdfDataSelector = (state: IStoreState) => pdfSelector(state).data;\nexport const pdfPageCountSelector = (state: IStoreState) => pdfSelector(state).pageCount;\nexport const pdfSelectedPageSelector = (state: IStoreState) => pdfSelector(state).selectedPage;\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport PdfLoader from \"./PdfLoader\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {loadPdfAction} from \"../redux/pdf/actions\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        dropzone: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            padding: \"20px\",\n            borderWidth: \"2px\",\n            borderRadius: \"2px\",\n            borderColor: theme.palette.secondary.main,\n            borderStyle: \"dashed\",\n            backgroundColor: \"#fafafa\",\n            color: theme.palette.secondary.main,\n            outline: \"none\",\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfLoader));","import React, {PureComponent} from \"react\";\nimport {Page} from \"react-pdf\";\nimport {IconButton, WithStyles} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {IPdfInfo} from \"../../state/models\";\nimport {removePage} from \"../../utils/pdfUtils\";\n\ninterface IPdfPageProps extends WithStyles {\n    selectPage: (index: number) => void;\n    load: (data: IPdfInfo) => void;\n\n    pageCount: number;\n    pdf: IPdfInfo;\n\n    index: number;\n    selected: boolean;\n    scale: number;\n}\n\n\nexport default class PdfPage extends PureComponent<IPdfPageProps> {\n    private selectPage = (event: React.MouseEvent<any>) => this.props.selectPage(this.props.index)\n    private removePage = (event: React.MouseEvent<any>) => {\n        event.stopPropagation();\n        removePage(this.props.pdf, this.props.index).then(this.props.load);\n    }\n\n    public render() {\n        const {index, classes, scale, selected, pageCount} = this.props;\n\n        return (\n            <div onClick={this.selectPage} className={selected ? classes.selected : classes.main}>\n                <div className={classes.top}>\n                    <div className={classes.center}>\n                        {(index + 1).toLocaleString()}/{pageCount.toLocaleString()}\n                    </div>\n                    <IconButton aria-label=\"delete\" className={classes.right} onClick={this.removePage}>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </div>\n                <Page className={classes.page} scale={scale} width={595}\n                      pageIndex={index} renderAnnotationLayer={false}/>\n            </div>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {pdfPageCountSelector, pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport PdfPage from \"./PdfPage\"\nimport {loadPdfAction, selectPageAction} from \"../redux/pdf/actions\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        main: {\n            border: `1px solid ${theme.palette.secondary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        selected: {\n            border: `1px solid ${theme.palette.primary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        page: {\n            \"& > canvas\": {\n                border: `1px solid ${theme.palette.secondary.main}`,\n            },\n            margin: 5\n        },\n        top: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n        },\n        center: {\n            flex: 1,\n            textAlign: \"center\"\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    selectedPage: pdfSelectedPageSelector(state),\n    pageCount: pdfPageCountSelector(state),\n    pdf: pdfSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPage));","import React, {PureComponent} from \"react\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {Button} from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {createBlank} from \"../../utils/pdfUtils\";\n\ninterface IPdfCreateBlankDocProps {\n    load: (data: IPdfInfo) => void;\n}\n\nexport default class PdfCreateBlankDoc extends PureComponent<IPdfCreateBlankDocProps> {\n\n    private createNew = () => {\n        createBlank().then(this.props.load)\n    }\n\n    public render() {\n        return (\n            <Button variant=\"outlined\" color=\"primary\"\n                    style={{margin: \"0 10px 10px 0\"}} onClick={this.createNew}\n                    startIcon={<AddIcon/>}>\n                Create blank PDF\n            </Button>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {loadPdfAction} from \"../redux/pdf/actions\";\nimport PdfCreateBlankDoc from \"./PdfCreateBlankDoc\";\n\n\nconst mapStateToProps = (state: IStoreState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfCreateBlankDoc);","import React, {PureComponent} from \"react\";\nimport {Document} from \"react-pdf\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport PdfLoaderContainer from \"../loader/PdfLoaderContainer\";\nimport {IPdfInfo, View} from \"../../state/models\";\nimport {Grid, IconButton, WithStyles} from \"@material-ui/core\";\nimport PdfPageContainer from \"./PdfPageContainer\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport PdfCreateBlankDocContainer from \"../loader/PdfCreateBlankDocContainer\";\n\ninterface IPdfPreviewProps extends WithStyles {\n    pdf: IPdfInfo;\n    selectedPage: number;\n    view: View;\n\n    selectPage: (index: number) => void;\n}\n\n\nexport default class PdfPreview extends PureComponent<IPdfPreviewProps> {\n    private selectPage = (index: number) => (event: React.MouseEvent<any>) => this.props.selectPage(index)\n\n    public render() {\n        const {pdf, selectedPage, view, classes} = this.props;\n        const noPdf = isEmpty(pdf);\n\n        const before = Array.from(Array(pdf.selectedPage).keys()).slice(-2)\n        const all = Array.from(Array(pdf.pageCount).keys())\n        const after = all.slice(selectedPage, selectedPage + 3)\n\n        return (\n            <React.Fragment>\n                {noPdf &&\n                <Grid container={true} spacing={3}>\n                    <Grid item={true} xs={2}>\n                        <PdfCreateBlankDocContainer/>\n                    </Grid>\n                    <Grid item={true} xs={10}>\n                        <PdfLoaderContainer/>\n                    </Grid>\n                </Grid>}\n                {!noPdf && <Document file={{data: pdf.data}}>\n                    <Grid container={true} spacing={3}>\n                        {view === \"zoom\" &&\n                        <React.Fragment>\n                            <Grid item={true} xs={2}>\n                                <IconButton aria-label=\"previous\" disabled={selectedPage <= 0}\n                                            onClick={this.selectPage(selectedPage - 1)}>\n                                    <ArrowBackIcon fontSize=\"small\"/>\n                                </IconButton>\n                                {before.map((index) => (\n                                        index !== selectedPage &&\n                                        <PdfPageContainer key={index} selected={false} index={index} scale={0.2}/>\n                                    )\n                                )}\n                            </Grid>\n                            <Grid item={true} xs={8}>\n                                <div className={classes.content}>\n                                    <PdfPageContainer selected={true} index={selectedPage} scale={1}/>\n                                </div>\n                            </Grid>\n                            <Grid item={true} xs={2}>\n                                <IconButton aria-label=\"next\" disabled={selectedPage >= pdf.pageCount - 1}\n                                            onClick={this.selectPage(selectedPage + 1)}>\n                                    <ArrowForwardIcon fontSize=\"small\"/>\n                                </IconButton>\n                                {after.map((index) => (\n                                        index !== selectedPage &&\n                                        <PdfPageContainer key={index} selected={false} index={index} scale={0.2}/>\n                                    )\n                                )}\n                            </Grid>\n                        </React.Fragment>}\n                        {view === \"global\" &&\n                        <React.Fragment>\n                            {all.map((index) => (\n                                    <Grid item={true} xs={2} key={index}>\n                                        <PdfPageContainer selected={selectedPage === index} index={index} scale={0.2}/>\n                                    </Grid>\n                                )\n                            )}\n                        </React.Fragment>\n                        }\n                    </Grid>\n                </Document>}\n            </React.Fragment>\n        )\n    }\n}","import {IStoreState} from \"../../../state/models\";\n\nexport const displaySelector = (state: IStoreState) => state.display;\nexport const displayViewSelector = (state: IStoreState) => displaySelector(state).view;\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfPreview from \"./PdfPreview\";\nimport {pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {selectPageAction} from \"../redux/pdf/actions\";\nimport {displayViewSelector} from \"../redux/display/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            maxWidth: \"100%\",\n            maxHeight: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            overflow: \"auto\",\n        }\n    })\n\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    selectedPage: pdfSelectedPageSelector(state),\n    view: displayViewSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPreview));","import React, {PureComponent} from \"react\";\nimport download from \"downloadjs\";\nimport {Button} from \"@material-ui/core\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo} from \"../../state/models\";\n\ninterface IPdfPreviewProps {\n    pdf: IPdfInfo;\n}\n\nexport default class PdfDownload extends PureComponent<IPdfPreviewProps> {\n\n    private download = () => {\n        download(this.props.pdf.data, \"download.pdf\", \"application/pdf\");\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.download} style={{margin: \"0 10px 10px 0\"}}\n                        disabled={isEmpty(this.props.pdf)}>\n                    Download\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfDownload from \"./PdfDownload\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDownload);","import React, {PureComponent} from \"react\";\nimport {Toolbar, Typography, WithStyles} from \"@material-ui/core\";\nimport UndoIcon from '@material-ui/icons/Undo';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport RedoIcon from '@material-ui/icons/Redo';\n\ninterface IVersionSelectorProps extends WithStyles {\n    canPrevious: boolean;\n    canNext: boolean;\n\n    changeVersion: (index: number) => void;\n}\n\nexport default class VersionSelector extends PureComponent<IVersionSelectorProps> {\n\n    private changeVersion = (change: number) => (event: React.MouseEvent<any>) => {\n        event.stopPropagation();\n        this.props.changeVersion(change);\n    }\n\n    public render() {\n        const {classes, canPrevious, canNext} = this.props;\n        return (\n            <div className={classes.center}>\n                <IconButton color={\"inherit\"} onClick={this.changeVersion(-1)} disabled={!canPrevious}>\n                    <UndoIcon/>\n                    <Typography variant=\"subtitle1\">\n                        Undo\n                    </Typography>\n                </IconButton>\n                <IconButton color={\"inherit\"} onClick={this.changeVersion(1)} disabled={!canNext}>\n                    <Typography variant=\"subtitle1\">\n                        Redo\n                    </Typography>\n                    <RedoIcon/>\n                </IconButton>\n            </div>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport VersionSelector from \"./VersionSelector\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {changeVersion} from \"../../pdf/redux/pdf/actions\";\nimport {pdfSelectorCanNext, pdfSelectorCanPrevious} from \"../../pdf/redux/pdf/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        center: {\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    canPrevious: pdfSelectorCanPrevious(state),\n    canNext: pdfSelectorCanNext(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    changeVersion: (index: number) => dispatch(changeVersion(index)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(VersionSelector));","import React, {PureComponent} from \"react\";\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport {View} from \"../../state/models\";\nimport {ToggleButton, ToggleButtonGroup} from \"@material-ui/lab\";\nimport {Typography, WithStyles} from \"@material-ui/core\";\n\ninterface IViewSelectorProps extends WithStyles {\n    view: View;\n\n    setView: (index: View) => void;\n}\n\nexport default class ViewSelector extends PureComponent<IViewSelectorProps> {\n\n    private handleAlignment = (event: React.MouseEvent<HTMLElement>, view: View | null) => {\n        if (view && view !== this.props.view) this.props.setView(view);\n    };\n\n    public render() {\n        const {view, classes} = this.props;\n        return (\n            <div className={classes.group}>\n                <Typography variant=\"subtitle1\" className={classes.text}>\n                    View\n                </Typography>\n                <ToggleButtonGroup\n                    value={view}\n                    exclusive={true}\n                    onChange={this.handleAlignment}\n                    aria-label=\"text alignment\"\n                >\n                    <ToggleButton value=\"global\" aria-label=\"global\" color={\"inherit\"}>\n                        <ViewListIcon/>\n                    </ToggleButton>\n                    <ToggleButton value=\"zoom\" aria-label=\"zoom\" color={\"inherit\"}>\n                        <ZoomInIcon/>\n                    </ToggleButton>\n                </ToggleButtonGroup>\n\n            </div>\n        )\n    }\n}","import {createAction} from \"redux-actions\";\nimport {View} from \"../../../state/models\";\n\nconst component = \"display/\";\n\nexport const ActionTypes = {\n    setView: component + \"setView\",\n};\n\nexport const setDisplayViewAction = createAction<View>(ActionTypes.setView);\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState, View} from \"../../state/models\";\nimport ViewSelector from \"./ViewSelector\";\nimport {setDisplayViewAction} from \"../../pdf/redux/display/actions\";\nimport {displayViewSelector} from \"../../pdf/redux/display/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        group: {\n            marginRight: 8,\n        },\n        text: {\n            display: \"inline-flex\",\n            marginRight: 5,\n        },\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    view: displayViewSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    setView: (view: View) => dispatch(setDisplayViewAction(view)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(ViewSelector));","import * as React from \"react\";\nimport {AppBar, createStyles, Theme, Toolbar, Typography, withStyles, WithStyles} from \"@material-ui/core\";\nimport VersionSelectorContainer from \"./version/VersionSelectorContainer\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport ViewSelectorContainer from \"./view/ViewSelectorContainer\";\nimport Divider from \"@material-ui/core/Divider\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            height: \"calc(100%-64px)\",\n            padding: 40,\n        }\n    })\n\nclass Scaffolder extends React.PureComponent<WithStyles> {\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <AppBar elevation={0} position={\"static\"}>\n                    <Toolbar>\n                        <Typography variant=\"h4\">\n                            pdfModer\n                        </Typography>\n                        <VersionSelectorContainer/>\n                        <ViewSelectorContainer/>\n                        <Divider orientation=\"vertical\" flexItem={true}/>\n                        <IconButton color={\"inherit\"} href={\"https://github.com/TimotheBarbe/pdfModer\"}\n                                    target={\"_blank\"}>\n                            <GitHubIcon/>\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n                <main className={classes.content}>\n                    {this.props.children}\n                </main>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(Scaffolder);\n","import {ChangeEvent} from \"react\";\n\n\nexport const setString = (setter: (data: string) => void) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setter(event.target.value)\n}\n\nexport const setNumber = (setter: (data: number) => void) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setter(+event.target.value)\n}","import React, {PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {insertPage} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport PdfLoaderContainer from \"../../loader/PdfLoaderContainer\";\nimport {setString} from \"../../../utils/formUtils\";\n\ninterface IPdfInsertProps {\n    pdf: IPdfInfo;\n    insert: string;\n\n    load: (data: IPdfInfo) => void;\n    setInsert: (data: string) => void;\n}\n\nexport default class PdfInsertPage extends PureComponent<IPdfInsertProps> {\n\n    private insert = () => {\n        const pos = this.props.insert;\n        if (!isNaN(+pos)) {\n            insertPage(this.props.pdf, +pos - 1).then(this.props.load)\n        }\n    }\n\n    private isDisabled = () => {\n        const isNotValidNumber = isNaN(+this.props.insert) || +this.props.insert < 1;\n        return isEmpty(this.props.pdf) || (isNotValidNumber)\n    }\n\n    public render() {\n        const {insert, setInsert} = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <TextField\n                        label=\"Before page\"\n                        type=\"text\"\n                        value={insert}\n                        onChange={setString(setInsert)}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            startIcon={<AddIcon/>}>\n                        new page\n                    </Button>\n                </Grid>\n                <Grid item={true} xs={12}>\n                    Insert doc\n                    <PdfLoaderContainer/>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {IStoreState} from \"../../../state/models\";\n\nexport const formSelector = (state: IStoreState) => state.form;\nexport const formRemoveSelector = (state: IStoreState) => formSelector(state).remove;\nexport const formInsertSelector = (state: IStoreState) => formSelector(state).insert;\n\nexport const formTextOptionSelector = (state: IStoreState) => formSelector(state).textOption;\nexport const formTextXSelector = (state: IStoreState) => formTextOptionSelector(state).x;\nexport const formTextYSelector = (state: IStoreState) => formTextOptionSelector(state).y;\nexport const formTextRotateSelector = (state: IStoreState) => formTextOptionSelector(state).rotate;\nexport const formTextColorSelector = (state: IStoreState) => formTextOptionSelector(state).color;\nexport const formTextSizeSelector = (state: IStoreState) => formTextOptionSelector(state).size;\nexport const formTextSelector = (state: IStoreState) => formTextOptionSelector(state).text;\n\nexport const formRectangleOptionSelector = (state: IStoreState) => formSelector(state).rectangleOption;\nexport const formRectangleXSelector = (state: IStoreState) => formRectangleOptionSelector(state).x;\nexport const formRectangleYSelector = (state: IStoreState) => formRectangleOptionSelector(state).y;\nexport const formRectangleRotateSelector = (state: IStoreState) => formRectangleOptionSelector(state).rotate;\nexport const formRectangleHeightSelector = (state: IStoreState) => formRectangleOptionSelector(state).height;\nexport const formRectangleWidthSelector = (state: IStoreState) => formRectangleOptionSelector(state).width;\nexport const formRectangleColorSelector = (state: IStoreState) => formRectangleOptionSelector(state).color;","import {createAction} from \"redux-actions\";\nimport {IForm} from \"../../../state/models\";\n\nconst component = \"form/\";\n\nexport const ActionTypes = {\n    set: component + \"set\",\n    setRemove: component + \"setRemove\",\n    setInsert: component + \"setInsert\",\n\n    setTextColor: component + \"text/setTextColor\",\n    setTextY: component + \"text/setTextY\",\n    setTextX: component + \"text/setTextX\",\n    setTextSize: component + \"text/setTextSize\",\n    setTextRotate: component + \"text/setTextRotate\",\n    setText: component + \"text/setText\",\n\n    setRectangleY: component + \"Rectangle/setRectangleY\",\n    setRectangleX: component + \"Rectangle/setRectangleX\",\n    setRectangleRotate: component + \"Rectangle/setRectangleRotate\",\n    setRectangleHeight: component + \"Rectangle/setRectangleHeight\",\n    setRectangleWidth: component + \"Rectangle/setRectangleWidth\",\n    setRectangleColor: component + \"Rectangle/setRectangleColor\",\n\n};\n\nexport const setFormAction = createAction<IForm>(ActionTypes.set);\n\nexport const setFormRemoveAction = createAction<string>(ActionTypes.setRemove);\nexport const setFormInsertAction = createAction<string>(ActionTypes.setInsert);\n\nexport const setTextColorAction = createAction<string>(ActionTypes.setTextColor);\nexport const setTextYAction = createAction<number>(ActionTypes.setTextY);\nexport const setTextXAction = createAction<number>(ActionTypes.setTextX);\nexport const setTextSizeAction = createAction<number>(ActionTypes.setTextSize);\nexport const setTextRotateAction = createAction<number>(ActionTypes.setTextRotate);\nexport const setTextAction = createAction<string>(ActionTypes.setText);\n\nexport const setRectangleYAction = createAction<number>(ActionTypes.setRectangleY);\nexport const setRectangleXAction = createAction<number>(ActionTypes.setRectangleX);\nexport const setRectangleHeightAction = createAction<number>(ActionTypes.setRectangleHeight);\nexport const setRectangleWidthAction = createAction<number>(ActionTypes.setRectangleWidth);\nexport const setRectangleRotateAction = createAction<number>(ActionTypes.setRectangleRotate);\nexport const setRectangleColorAction = createAction<string>(ActionTypes.setRectangleColor);\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertPage from \"./PdfInsertPage\";\nimport {formInsertSelector} from \"../../redux/form/selectors\";\nimport {setFormInsertAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    insert: formInsertSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setInsert: (data: string) => dispatch(setFormInsertAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertPage);","import React, {ChangeEvent, Component} from \"react\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport {removePage, removePages} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {getInterval, isInterval} from \"../../../utils/stringUtils\";\nimport {setString} from \"../../../utils/formUtils\";\n\n\ninterface IPdfDeleteProps {\n    pdf: IPdfInfo;\n    remove: string;\n\n    load: (data: IPdfInfo) => void;\n    setRemove: (data: string) => void;\n}\n\nexport default class PdfDeletePage extends Component<IPdfDeleteProps> {\n\n    private remove = () => {\n        const pos = this.props.remove;\n        if (!isNaN(+pos)) {\n            const position = +pos - 1\n            removePage(this.props.pdf, position).then(this.props.load)\n        } else if (isInterval(pos)) {\n            const interval = getInterval(pos);\n            const toRemove = Array.from(Array(interval[1]).keys()).slice(interval[0] - 1);\n            removePages(this.props.pdf, toRemove).then(this.props.load)\n        }\n    }\n\n    private isDisabled = () => {\n        const isNotValidNumber = isNaN(+this.props.remove) || +this.props.remove < 1;\n        return isEmpty(this.props.pdf) || (isNotValidNumber && !isInterval(this.props.remove))\n    }\n\n    public render() {\n        const {pdf, remove, setRemove} = this.props;\n        return (\n            <React.Fragment>\n                <TextField\n                    label={\"Pages to delete\"}\n                    type={\"text\"}\n                    value={remove}\n                    onChange={setString(setRemove)}\n                    placeholder={\"ex: 5-8 or 8\"}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.remove}\n                        style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                        startIcon={<DeleteIcon/>}>\n                    Delete\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfDeletePage from \"./PdfDeletePage\";\nimport {formRemoveSelector} from \"../../redux/form/selectors\";\nimport {setFormRemoveAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    remove: formRemoveSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setRemove: (data: string) => dispatch(setFormRemoveAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDeletePage);","import React, {PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {drawText} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo, ITextOption} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {setNumber, setString} from \"../../../utils/formUtils\";\n\ninterface IPdfInsertTextProps extends ITextOption {\n    pdf: IPdfInfo;\n\n    load: (data: IPdfInfo) => void;\n    setTextColor: (data: string) => void;\n    setTextY: (data: number) => void;\n    setTextX: (data: number) => void;\n    setTextSize: (data: number) => void;\n    setTextRotate: (data: number) => void;\n    setText: (data: string) => void;\n}\n\nexport default class PdfInsertText extends PureComponent<IPdfInsertTextProps> {\n\n    private insert = () => {\n        drawText(this.props.pdf, this.props).then(this.props.load)\n    }\n\n    public render() {\n        const {\n            color, setTextColor, y, setTextY, x, setTextX, size, setTextSize, rotate, setTextRotate,\n            text, setText\n        } = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <TextField\n                        label=\"Text\"\n                        type=\"text\"\n                        placeholder={\"ex: draw some text\"}\n                        value={text}\n                        onChange={setString(setText)}\n                        InputLabelProps={{shrink: true}}\n                        multiline={true}\n                        rows={4}\n                        variant={\"outlined\"}\n                        fullWidth={true}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Y\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={y}\n                        onChange={setNumber(setTextY)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"X\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={x}\n                        onChange={setNumber(setTextX)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Size\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={size}\n                        onChange={setNumber(setTextSize)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Rotate\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={rotate}\n                        onChange={setNumber(setTextRotate)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <input type=\"color\" id=\"head\" name=\"head\" value={color} onChange={setString(setTextColor)}/>\n                </Grid>\n\n                <Grid item={true} xs={6}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={isEmpty(this.props.pdf)}\n                            startIcon={<AddIcon/>}>\n                        Draw text\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertText from \"./PdfInsertText\";\nimport {\n    formTextColorSelector,\n    formTextRotateSelector,\n    formTextSelector,\n    formTextSizeSelector,\n    formTextXSelector,\n    formTextYSelector\n} from \"../../redux/form/selectors\";\nimport {\n    setTextAction,\n    setTextColorAction,\n    setTextRotateAction,\n    setTextSizeAction,\n    setTextXAction,\n    setTextYAction\n} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    x: formTextXSelector(state),\n    y: formTextYSelector(state),\n    rotate: formTextRotateSelector(state),\n    color: formTextColorSelector(state),\n    size: formTextSizeSelector(state),\n    text: formTextSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setTextColor: (data: string) => dispatch(setTextColorAction(data)),\n    setTextY: (data: number) => dispatch(setTextYAction(data)),\n    setTextX: (data: number) => dispatch(setTextXAction(data)),\n    setTextSize: (data: number) => dispatch(setTextSizeAction(data)),\n    setTextRotate: (data: number) => dispatch(setTextRotateAction(data)),\n    setText: (data: string) => dispatch(setTextAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertText);","import React, {PureComponent} from \"react\";\nimport {Button, Grid} from \"@material-ui/core\";\nimport {rotatePage} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport RotateRightIcon from '@material-ui/icons/RotateRight';\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\n\ninterface IPdfRotationProps {\n    pdf: IPdfInfo;\n\n    load: (data: IPdfInfo) => void;\n}\n\nexport default class PdfRotationPage extends PureComponent<IPdfRotationProps> {\n\n    private rotate = (angle: number) => () => {\n        rotatePage(this.props.pdf, angle).then(this.props.load)\n    }\n\n    private isDisabled = () => {\n        return isEmpty(this.props.pdf);\n    }\n\n    public render() {\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.rotate(-90)}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            startIcon={<RotateLeftIcon/>}>\n                        rotate left\n                    </Button>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.rotate(90)}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            endIcon={<RotateRightIcon/>}>\n                        rotate right\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport PdfRotationPage from \"./PdfRotationPage\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfRotationPage);","import React, {PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {IPdfInfo, IRectangleOption} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {setNumber, setString} from \"../../../utils/formUtils\";\nimport {drawRectangle} from \"../../../utils/pdfUtils\";\n\ninterface IPdfInsertRectangleProps extends IRectangleOption {\n    pdf: IPdfInfo;\n    load: (data: IPdfInfo) => void;\n    setRectangleRotate: (data: number) => void;\n    setRectangleY: (data: number) => void;\n    setRectangleX: (data: number) => void;\n    setRectangleWidth: (data: number) => void;\n    setRectangleHeight: (data: number) => void;\n    setRectangleColor: (data: string) => void;\n}\n\nexport default class PdfInsertRectangle extends PureComponent<IPdfInsertRectangleProps> {\n\n    private insert = () => {\n        drawRectangle(this.props.pdf, this.props).then(this.props.load)\n    }\n\n    public render() {\n        const {\n            y, setRectangleY, x, setRectangleX, width, setRectangleWidth, rotate, setRectangleRotate,\n            height, setRectangleHeight, color, setRectangleColor\n        } = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Y\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={y}\n                        onChange={setNumber(setRectangleY)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"X\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={x}\n                        onChange={setNumber(setRectangleX)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Width\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={width}\n                        onChange={setNumber(setRectangleWidth)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Height\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={height}\n                        onChange={setNumber(setRectangleHeight)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Rotate\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={rotate}\n                        onChange={setNumber(setRectangleRotate)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <input type=\"color\" id=\"head\" name=\"head\" value={color} onChange={setString(setRectangleColor)}/>\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={isEmpty(this.props.pdf)}\n                            startIcon={<AddIcon/>}>\n                        Draw Rectangle\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertRectangle from \"./PdfInsertRectangle\";\nimport {\n    formRectangleColorSelector,\n    formRectangleHeightSelector,\n    formRectangleRotateSelector,\n    formRectangleWidthSelector,\n    formRectangleXSelector,\n    formRectangleYSelector\n} from \"../../redux/form/selectors\";\nimport {\n    setRectangleColorAction,\n    setRectangleHeightAction,\n    setRectangleRotateAction,\n    setRectangleWidthAction,\n    setRectangleXAction,\n    setRectangleYAction\n} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    x: formRectangleXSelector(state),\n    y: formRectangleYSelector(state),\n    rotate: formRectangleRotateSelector(state),\n    width: formRectangleWidthSelector(state),\n    height: formRectangleHeightSelector(state),\n    color: formRectangleColorSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setRectangleY: (data: number) => dispatch(setRectangleYAction(data)),\n    setRectangleX: (data: number) => dispatch(setRectangleXAction(data)),\n    setRectangleRotate: (data: number) => dispatch(setRectangleRotateAction(data)),\n    setRectangleWidth: (data: number) => dispatch(setRectangleWidthAction(data)),\n    setRectangleHeight: (data: number) => dispatch(setRectangleHeightAction(data)),\n    setRectangleColor: (data: string) => dispatch(setRectangleColorAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertRectangle);","import \"./App.css\";\n\nimport * as React from \"react\";\nimport {CssBaseline, ExpansionPanel, ExpansionPanelDetails, Grid, Typography} from \"@material-ui/core\";\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core/styles\";\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport PdfPreviewContainer from \"../pdf/preview/PdfPreviewContainer\";\nimport PdfDownloadContainer from \"../pdf/download/PdfDownloadContainer\";\nimport Scaffolder from \"./Scaffolder\";\nimport PdfInsertPageContainer from \"../pdf/modify/insert/PdfInsertPageContainer\";\nimport PdfDeletePageContainer from \"../pdf/modify/delete/PdfDeletePageContainer\";\nimport PdfInsertTextContainer from \"../pdf/modify/text/PdfInsertTextContainer\";\nimport PdfRotationPageContainer from \"../pdf/modify/rotation/PdfRotationPageContainer\";\nimport PdfInsertRectangleContainer from \"../pdf/modify/rectangle/PdfInsertRectangleContainer\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {main: \"#ee3f3f\"},\n        secondary: {main: \"#a09f9f\"},\n        // type: 'dark',\n    }\n});\n\nclass App extends React.PureComponent {\n\n    public render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline/>\n                <Scaffolder>\n                    <Grid container={true} spacing={3}>\n                        <Grid item={true} xs={3}>\n                            <PdfDownloadContainer/>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Insert page</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertPageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Delete</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfDeletePageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Add text</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertTextContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Add rectangle</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertRectangleContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Rotate</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfRotationPageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        </Grid>\n                        <Grid item={true} xs={9}>\n                            <PdfPreviewContainer/>\n                        </Grid>\n                    </Grid>\n                </Scaffolder>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {getEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo, IPdfWithVersion} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\nexport const setPdfReducer = handleActions<any, any>(\n    {\n        [ActionTypes.load]: (state: IPdfWithVersion, action: Action<IPdfInfo>) => {\n            return update(state, {\n                versions: {$splice: [[state.position + 1, state.versions.length, action.payload as IPdfInfo]]},\n                position: {$set: state.position + 1}\n            })\n        },\n        [ActionTypes.selectPage]: (state: IPdfWithVersion, action: Action<number>) => {\n            const position = state.position\n            return update(state, {versions: {[position]: {selectedPage: {$set: action.payload}}}})\n        },\n        [ActionTypes.changeVersion]: (state: IPdfWithVersion, action: Action<number>) => {\n            const position = state.position\n            return update(state, {position: {$set: position + action.payload}})\n        },\n    },\n    {versions: [getEmpty()], position: 0} as IPdfWithVersion\n);\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {combineReducers} from \"redux\";\nimport {IRectangleOption, ITextOption} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\n\nexport const setRemoveReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setRemove]: (state: string, action: Action<string>) => {\n            return action.payload\n        },\n    },\n    \"\"\n);\n\nexport const setInsertReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setInsert]: (state: string, action: Action<string>) => {\n            return action.payload\n        },\n    },\n    \"\"\n);\n\nexport const setTextOptionReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setTextColor]: (state: ITextOption, action: Action<string>) => {\n            return update(state, {color: {$set: action.payload}})\n        },\n        [ActionTypes.setTextRotate]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {rotate: {$set: action.payload}})\n        },\n        [ActionTypes.setTextSize]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {size: {$set: action.payload}})\n        },\n        [ActionTypes.setTextX]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {x: {$set: action.payload}})\n        },\n        [ActionTypes.setTextY]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {y: {$set: action.payload}})\n        },\n        [ActionTypes.setText]: (state: ITextOption, action: Action<string>) => {\n            return update(state, {text: {$set: action.payload}})\n        },\n    },\n    {color: \"\", rotate: 0, size: 12, x: 0, y: 0, text: \"\"} as ITextOption\n);\n\nexport const setRectangleOptionReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setRectangleRotate]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {rotate: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleX]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {x: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleY]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {y: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleWidth]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {width: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleHeight]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {height: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleColor]: (state: IRectangleOption, action: Action<string>) => {\n            return update(state, {color: {$set: action.payload}})\n        },\n    },\n    {rotate: 0, x: 0, y: 0, width: 10, height: 10, color: \"\"} as IRectangleOption\n);\n\nexport const setFormReducer = combineReducers({\n    remove: setRemoveReducer,\n    insert: setInsertReducer,\n    textOption: setTextOptionReducer,\n    rectangleOption: setRectangleOptionReducer\n})\n\n\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {combineReducers} from \"redux\";\nimport {View} from \"../../../state/models\";\n\n\nexport const setViewReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setView]: (state: View, action: Action<View>) => {\n            return action.payload as View\n        },\n    },\n    \"zoom\" as View\n);\n\nexport const setDisplayReducer = combineReducers({\n    view: setViewReducer,\n})\n\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {setPdfReducer} from \"../pdf/redux/pdf/reducers\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {setFormReducer} from \"../pdf/redux/form/reducers\";\nimport {setDisplayReducer} from \"../pdf/redux/display/reducers\";\n\nconst rootReducer = combineReducers({\n    pdf: setPdfReducer,\n    form: setFormReducer,\n    display: setDisplayReducer\n})\n\nexport const store = createStore(rootReducer, composeWithDevTools(\n    applyMiddleware()\n))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {pdfjs} from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 84;"],"sourceRoot":""}