{"version":3,"sources":["utils/Uint8ArrayUtils.tsx","utils/stringUtils.tsx","utils/pdfUtils.tsx","pdf/loader/PdfLoader.tsx","pdf/redux/pdf/actions.ts","pdf/redux/pdf/selectors.ts","pdf/loader/PdfLoaderContainer.ts","pdf/preview/PdfPage.tsx","pdf/preview/PdfPageContainer.ts","pdf/preview/PdfPreview.tsx","pdf/preview/PdfPreviewContainer.ts","pdf/download/PdfDownload.tsx","pdf/download/PdfDownloadContainer.ts","components/Scaffolder.tsx","utils/formUtils.tsx","pdf/modify/insert/PdfInsertPage.tsx","pdf/redux/form/selectors.ts","pdf/redux/form/actions.ts","pdf/modify/insert/PdfInsertPageContainer.ts","pdf/modify/delete/PdfDeletePage.tsx","pdf/modify/delete/PdfDeletePageContainer.ts","pdf/modify/text/PdfInsertText.tsx","pdf/modify/text/PdfInsertTextContainer.ts","components/App.tsx","serviceWorker.js","pdf/redux/pdf/reducers.ts","pdf/redux/form/reducers.ts","state/store.tsx","index.tsx","../node_modules/pdfjs-dist/build sync"],"names":["isEmpty","pdf","pageCount","intervalExp","RegExp","isInterval","value","test","getInterval","exec","toRgb","hex","replace","m","r","g","b","result","getValue","v","parseInt","rgb","_callee","state","index","doc","data","regenerator_default","a","wrap","_context","prev","next","PDFDocument","load","sent","insertPage","save","abrupt","update","$set","selectedPage","stop","removePage","_x3","_x4","_removePage","apply","this","arguments","_callee2","_context2","removePages","_x5","_x6","_removePages","_callee3","indexes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context3","undefined","reverse","Symbol","iterator","done","t0","return","finish","length","loadPdf","_x7","_loadPdf","_callee4","toLoad","_context4","getPageCount","mergePdf","_x8","_x9","_mergePdf","_callee5","start","end","startDoc","endDoc","contentPages","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","page","_context5","copyPages","getPageIndices","addPage","_callee6","_context6","then","_callee7","option","color","rotate","size","x","y","text","_context7","getPage","drawText","degrees","lineHeight","PdfLoader","read","files","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","_x10","_x11","_loadAndMerge","loadAndMerge","_this","props","readAsArrayBuffer","_this2","classes","react_default","createElement","Fragment","dist_es","onDrop","acceptedFiles","accept","multiple","_ref","getRootProps","getInputProps","className","dropzone","PureComponent","ActionTypes","component","selectPage","loadPdfAction","createAction","selectPageAction","pdfSelector","pdfPageCountSelector","pdfSelectedPageSelector","withStyles","theme","createStyles","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","palette","secondary","main","borderStyle","backgroundColor","outline","withTheme","connect","dispatch","PdfPage","event","stopPropagation","_this$props","scale","selected","onClick","top","center","toLocaleString","IconButton","aria-label","right","Delete_default","fontSize","entry","width","pageIndex","renderAnnotationLayer","border","concat","margin","primary","& > canvas","justifyContent","textAlign","PdfPreview","noPdf","before","Array","from","keys","slice","after","PdfLoaderContainer","Grid","container","spacing","item","xs","disabled","ArrowBack_default","map","PdfPageContainer","key","content","ArrowForward_default","maxWidth","maxHeight","overflow","PdfDownload","download","Button","variant","style","Scaffolder","react","AppBar","elevation","position","Toolbar","Typography","children","React","height","setString","setter","target","setNumber","PdfInsertPage","insert","pos","isNaN","_x","_x2","_insertPage","isDisabled","isNotValidNumber","setInsert","TextField","label","type","onChange","InputLabelProps","shrink","startIcon","Add_default","formSelector","form","formRemoveSelector","remove","formInsertSelector","formTextOptionSelector","textOption","formTextXSelector","formTextYSelector","formTextRotateSelector","formTextColorSelector","formTextSizeSelector","formTextSelector","set","setRemove","setTextColor","setTextY","setTextX","setTextSize","setTextRotate","setText","setFormRemoveAction","setFormInsertAction","setTextColorAction","setTextYAction","setTextXAction","setTextSizeAction","setTextRotateAction","setTextAction","PdfDeletePage","interval","toRemove","placeholder","Component","PdfInsertText","_x12","_x13","_drawText","multiline","rows","fullWidth","inputProps","min","createMuiTheme","App","ThemeProvider","CssBaseline","components_Scaffolder","PdfDownloadContainer","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","ExpansionPanelDetails","PdfInsertPageContainer","PdfDeletePageContainer","PdfInsertTextContainer","PdfPreviewContainer","Boolean","window","location","hostname","match","setPdfReducer","handleActions","_handleActions","Object","defineProperty","action","payload","Uint8Array","setRemoveReducer","setInsertReducer","setTextOptionReducer","_handleActions3","setFormReducer","combineReducers","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","pdfjs","GlobalWorkerOptions","workerSrc","version","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","e","Error","code","resolve","module","exports","id"],"mappings":"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","file":"static/js/main.b3a35c8d.chunk.js","sourcesContent":["import {IPdfInfo} from \"../state/models\";\n\nexport const getEmpty = (): IPdfInfo => {\n    return {data: new Uint8Array(0), pageCount: 0, selectedPage: 0};\n}\n\nexport const isEmpty = (pdf: IPdfInfo) => {\n    return pdf.pageCount === 0;\n}","import {rgb} from \"pdf-lib\";\n\nconst intervalExp = new RegExp('^([0-9]+)-([0-9]+)$');\n\nexport const isInterval = (value: string) => {\n    return intervalExp.test(value)\n}\n\nexport const getInterval = (value: string) => {\n    let exec = intervalExp.exec(value) as RegExpExecArray;\n    return [+exec[1], +exec[2]]\n}\n\nexport const toRgb = (hex: string) => {\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    function getValue(v: string) {\n        return parseInt(v, 16) / 255;\n    }\n\n    return result ? rgb(getValue(result[1]), getValue(result[2]), getValue(result[3])) : rgb(0, 0, 0);\n}","import {degrees, PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo, ITextOption} from \"../state/models\";\nimport update from 'immutability-helper';\nimport {isEmpty} from \"./Uint8ArrayUtils\";\nimport {toRgb} from \"./stringUtils\";\n\nexport async function insertPage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    doc.insertPage(index);\n    const data = await doc.save();\n    return update(state, {data: {$set: data}, pageCount: {$set: state.pageCount + 1}, selectedPage: {$set: index}})\n}\n\nexport async function removePage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    return removePages(state, [index]);\n}\n\n/**\n * @param indexes must be ordered !\n */\nexport async function removePages(state: IPdfInfo, indexes: number[]): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    for (const index of indexes.reverse()) {\n        doc.removePage(index);\n    }\n    const data = await doc.save();\n    return {data, pageCount: state.pageCount - indexes.length, selectedPage: state.selectedPage}\n}\n\nexport async function loadPdf(toLoad: string | ArrayBuffer): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(toLoad)\n    const pageCount = doc.getPageCount();\n    const data = await doc.save();\n    return {data, pageCount, selectedPage: 0}\n}\n\nexport async function mergePdf(start: IPdfInfo, end: IPdfInfo): Promise<IPdfInfo> {\n    if (isEmpty(start)) return end;\n    const startDoc = await PDFDocument.load(start.data);\n    const endDoc = await PDFDocument.load(end.data);\n    const contentPages = await startDoc.copyPages(endDoc, endDoc.getPageIndices());\n    for (const page of contentPages) {\n        startDoc.addPage(page);\n    }\n    const data = await startDoc.save();\n    return {data, pageCount: start.pageCount + end.pageCount, selectedPage: start.selectedPage}\n}\n\nexport async function loadAndMerge(toLoad: string | ArrayBuffer, start: IPdfInfo): Promise<IPdfInfo> {\n    return loadPdf(toLoad).then(end => mergePdf(start, end))\n}\n\nexport async function drawText(state: IPdfInfo, option: ITextOption): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(state.selectedPage);\n    const {color, rotate, size, x, y, text} = option\n    page.drawText(text, {x, y, rotate: degrees(rotate), size, color: toRgb(color), lineHeight: size})\n    const data = await doc.save();\n    return update(state, {data: {$set: data}})\n}\n","import React, {PureComponent} from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport {PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {WithStyles} from \"@material-ui/core\";\nimport {loadAndMerge, loadPdf, mergePdf} from \"../../utils/pdfUtils\";\n\ninterface IPdfLoaderProps extends WithStyles {\n    load: (data: IPdfInfo) => void;\n    pdf: IPdfInfo;\n}\n\nexport default class PdfLoader extends PureComponent<IPdfLoaderProps> {\n\n    private read = (files: File[]) => {\n        const file = files[0]\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = () => {\n            const binaryStr = reader.result\n            if (binaryStr != null) loadAndMerge(binaryStr, this.props.pdf).then(r => this.props.load(r))\n        }\n        reader.readAsArrayBuffer(file)\n    };\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <Dropzone onDrop={acceptedFiles => this.read(acceptedFiles)} accept={\".pdf\"} multiple={false}>\n                    {({getRootProps, getInputProps}) => (\n                        <section>\n                            <div {...getRootProps({className: classes.dropzone})}>\n                                <input {...getInputProps()} />\n                                <p>Drag 'n' drop some files here, or click to select files</p>\n                            </div>\n                        </section>\n                    )}\n                </Dropzone>\n            </React.Fragment>\n        )\n    }\n}","import {createAction} from \"redux-actions\";\nimport {IPdfInfo} from \"../../../state/models\";\n\nconst component = \"pdf/\";\n\nexport const ActionTypes = {\n    load: component + \"load\",\n    selectPage: component + \"select\",\n};\n\nexport const loadPdfAction = createAction<IPdfInfo>(ActionTypes.load);\nexport const selectPageAction = createAction<number>(ActionTypes.selectPage);","import {IStoreState} from \"../../../state/models\";\n\nexport const pdfSelector = (state: IStoreState) => state.pdf;\nexport const pdfDataSelector = (state: IStoreState) => pdfSelector(state).data;\nexport const pdfPageCountSelector = (state: IStoreState) => pdfSelector(state).pageCount;\nexport const pdfSelectedPageSelector = (state: IStoreState) => pdfSelector(state).selectedPage;\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport PdfLoader from \"./PdfLoader\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {loadPdfAction} from \"../redux/pdf/actions\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        dropzone: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            padding: \"20px\",\n            borderWidth: \"2px\",\n            borderRadius: \"2px\",\n            borderColor: theme.palette.secondary.main,\n            borderStyle: \"dashed\",\n            backgroundColor: \"#fafafa\",\n            color: theme.palette.secondary.main,\n            outline: \"none\",\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfLoader));","import React, {PureComponent} from \"react\";\nimport {Page} from \"react-pdf\";\nimport {IconButton, WithStyles} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {IPdfInfo} from \"../../state/models\";\nimport {removePage} from \"../../utils/pdfUtils\";\n\ninterface IPdfPageProps extends WithStyles {\n    selectPage: (index: number) => void;\n    load: (data: IPdfInfo) => void;\n\n    pageCount: number;\n    pdf: IPdfInfo;\n\n    index: number;\n    selected: boolean;\n    scale: number;\n}\n\n\nexport default class PdfPage extends PureComponent<IPdfPageProps> {\n    private selectPage = (event: React.MouseEvent<any>) => this.props.selectPage(this.props.index)\n    private removePage = (event: React.MouseEvent<any>) => {\n        event.stopPropagation();\n        removePage(this.props.pdf, this.props.index).then(this.props.load);\n    }\n\n    public render() {\n        const {index, classes, scale, selected, pageCount} = this.props;\n\n        return (\n            <div onClick={this.selectPage} className={selected ? classes.selected : classes.main}>\n                <div className={classes.top}>\n                    <div className={classes.center}>\n                        {(index + 1).toLocaleString()}/{pageCount.toLocaleString()}\n                    </div>\n                    <IconButton aria-label=\"delete\" className={classes.right} onClick={this.removePage}>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </div>\n                <Page className={classes.page} scale={scale} width={595}\n                      pageIndex={index} renderAnnotationLayer={false}/>\n            </div>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {pdfPageCountSelector, pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport PdfPage from \"./PdfPage\"\nimport {loadPdfAction, selectPageAction} from \"../redux/pdf/actions\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        main: {\n            border: `1px solid ${theme.palette.secondary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        selected: {\n            border: `1px solid ${theme.palette.primary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        page: {\n            \"& > canvas\": {\n                border: `1px solid ${theme.palette.secondary.main}`,\n            },\n            margin: 5\n        },\n        top: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n        },\n        center: {\n            flex: 1,\n            textAlign: \"center\"\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    selectedPage: pdfSelectedPageSelector(state),\n    pageCount: pdfPageCountSelector(state),\n    pdf: pdfSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPage));","import React, {PureComponent} from \"react\";\nimport {Document} from \"react-pdf\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport PdfLoaderContainer from \"../loader/PdfLoaderContainer\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {Grid, IconButton, WithStyles} from \"@material-ui/core\";\nimport PdfPageContainer from \"./PdfPageContainer\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\ninterface IPdfPreviewProps extends WithStyles {\n    pdf: IPdfInfo;\n    selectedPage: number;\n\n    selectPage: (index: number) => void;\n}\n\n\nexport default class PdfPreview extends PureComponent<IPdfPreviewProps> {\n    private selectPage = (index: number) => (event: React.MouseEvent<any>) => this.props.selectPage(index)\n\n    public render() {\n        const {pdf, selectedPage, classes} = this.props;\n        const noPdf = isEmpty(pdf);\n\n        const before = Array.from(Array(pdf.selectedPage).keys()).slice(-2)\n        const after = Array.from(Array(pdf.pageCount).keys()).slice(selectedPage, selectedPage + 3)\n\n        return (\n            <React.Fragment>\n                {noPdf && <PdfLoaderContainer/>}\n                {!noPdf && <Document file={{data: pdf.data}}>\n                    <Grid container={true} spacing={3}>\n                        <Grid item={true} xs={2}>\n                            <IconButton aria-label=\"previous\" disabled={selectedPage <= 0}\n                                        onClick={this.selectPage(selectedPage - 1)}>\n                                <ArrowBackIcon fontSize=\"small\"/>\n                            </IconButton>\n                            {before.map((index) => (\n                                    index !== selectedPage &&\n                                    <PdfPageContainer key={index} selected={false} index={index} scale={0.2}/>\n                                )\n                            )}\n                        </Grid>\n                        <Grid item={true} xs={8}>\n                            <div className={classes.content}>\n                                <PdfPageContainer selected={true} index={selectedPage} scale={1}/>\n                            </div>\n                        </Grid>\n                        <Grid item={true} xs={2}>\n                            <IconButton aria-label=\"next\" disabled={selectedPage >= pdf.pageCount - 1}\n                                        onClick={this.selectPage(selectedPage + 1)}>\n                                <ArrowForwardIcon fontSize=\"small\"/>\n                            </IconButton>\n                            {after.map((index) => (\n                                    index !== selectedPage &&\n                                    <PdfPageContainer key={index} selected={false} index={index} scale={0.2}/>\n                                )\n                            )}\n                        </Grid>\n                    </Grid>\n                </Document>}\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfPreview from \"./PdfPreview\";\nimport {pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {selectPageAction} from \"../redux/pdf/actions\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            maxWidth: \"100%\",\n            maxHeight: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            overflow: \"auto\",\n        }\n    })\n\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    selectedPage: pdfSelectedPageSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPreview));","import React, {PureComponent} from \"react\";\nimport download from \"downloadjs\";\nimport {Button} from \"@material-ui/core\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo} from \"../../state/models\";\n\ninterface IPdfPreviewProps {\n    pdf: IPdfInfo;\n}\n\nexport default class PdfDownload extends PureComponent<IPdfPreviewProps> {\n\n    private download = () => {\n        download(this.props.pdf.data, \"download.pdf\", \"application/pdf\");\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.download} style={{margin: \"0 10px 10px 0\"}}\n                        disabled={isEmpty(this.props.pdf)}>\n                    Download\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfDownload from \"./PdfDownload\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDownload);","import * as React from \"react\";\nimport {AppBar, createStyles, Grid, Paper, Theme, Toolbar, Typography, withStyles, WithStyles} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            height: \"calc(100%-64px)\",\n            padding: 40,\n        }\n    })\n\nclass Scaffolder extends React.PureComponent<WithStyles> {\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <AppBar elevation={0} position={\"static\"}>\n                    <Toolbar>\n                        <Typography variant=\"h6\">\n                            pdfModer\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <main className={classes.content}>\n                    {this.props.children}\n                </main>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(Scaffolder);\n","import {ChangeEvent} from \"react\";\n\n\nexport const setString = (setter: (data: string) => void) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setter(event.target.value)\n}\n\nexport const setNumber = (setter: (data: number) => void) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setter(+event.target.value)\n}","import React, {ChangeEvent, PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {insertPage} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport PdfLoaderContainer from \"../../loader/PdfLoaderContainer\";\nimport Scaffolder from \"../../../components/Scaffolder\";\nimport {isInterval} from \"../../../utils/stringUtils\";\nimport {setString} from \"../../../utils/formUtils\";\n\ninterface IPdfInsertProps {\n    pdf: IPdfInfo;\n    insert: string;\n\n    load: (data: IPdfInfo) => void;\n    setInsert: (data: string) => void;\n}\n\nexport default class PdfInsertPage extends PureComponent<IPdfInsertProps> {\n\n    private insert = () => {\n        const pos = this.props.insert;\n        if (!isNaN(+pos)) {\n            insertPage(this.props.pdf, +pos - 1).then(this.props.load)\n        }\n    }\n\n    private isDisabled = () => {\n        const isNotValidNumber = isNaN(+this.props.insert) || +this.props.insert < 1;\n        return isEmpty(this.props.pdf) || (isNotValidNumber)\n    }\n\n    public render() {\n        const {insert, setInsert} = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <TextField\n                        label=\"Before page\"\n                        type=\"text\"\n                        value={insert}\n                        onChange={setString(setInsert)}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            startIcon={<AddIcon/>}>\n                        new page\n                    </Button>\n                </Grid>\n                <Grid item={true} xs={12}>\n                    Insert doc\n                    <PdfLoaderContainer/>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {IStoreState} from \"../../../state/models\";\n\nexport const formSelector = (state: IStoreState) => state.form;\nexport const formRemoveSelector = (state: IStoreState) => formSelector(state).remove;\nexport const formInsertSelector = (state: IStoreState) => formSelector(state).insert;\n\nexport const formTextOptionSelector = (state: IStoreState) => formSelector(state).textOption;\nexport const formTextXSelector = (state: IStoreState) => formTextOptionSelector(state).x;\nexport const formTextYSelector = (state: IStoreState) => formTextOptionSelector(state).y;\nexport const formTextRotateSelector = (state: IStoreState) => formTextOptionSelector(state).rotate;\nexport const formTextColorSelector = (state: IStoreState) => formTextOptionSelector(state).color;\nexport const formTextSizeSelector = (state: IStoreState) => formTextOptionSelector(state).size;\nexport const formTextSelector = (state: IStoreState) => formTextOptionSelector(state).text;\n","import {createAction} from \"redux-actions\";\nimport {IForm} from \"../../../state/models\";\n\nconst component = \"form/\";\n\nexport const ActionTypes = {\n    set: component + \"set\",\n    setRemove: component + \"setRemove\",\n    setInsert: component + \"setInsert\",\n    setTextColor: component + \"text/setTextColor\",\n    setTextY: component + \"text/setTextY\",\n    setTextX: component + \"text/setTextX\",\n    setTextSize: component + \"text/setTextSize\",\n    setTextRotate: component + \"text/setTextRotate\",\n    setText: component + \"text/setText\",\n\n};\n\nexport const setFormAction = createAction<IForm>(ActionTypes.set);\n\nexport const setFormRemoveAction = createAction<string>(ActionTypes.setRemove);\nexport const setFormInsertAction = createAction<string>(ActionTypes.setInsert);\n\nexport const setTextColorAction = createAction<string>(ActionTypes.setTextColor);\nexport const setTextYAction = createAction<number>(ActionTypes.setTextY);\nexport const setTextXAction = createAction<number>(ActionTypes.setTextX);\nexport const setTextSizeAction = createAction<number>(ActionTypes.setTextSize);\nexport const setTextRotateAction = createAction<number>(ActionTypes.setTextRotate);\nexport const setTextAction = createAction<string>(ActionTypes.setText);\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertPage from \"./PdfInsertPage\";\nimport {formInsertSelector} from \"../../redux/form/selectors\";\nimport {setFormInsertAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    insert: formInsertSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setInsert: (data: string) => dispatch(setFormInsertAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertPage);","import React, {ChangeEvent, Component} from \"react\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport {removePage, removePages} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {getInterval, isInterval} from \"../../../utils/stringUtils\";\nimport {setString} from \"../../../utils/formUtils\";\n\n\ninterface IPdfDeleteProps {\n    pdf: IPdfInfo;\n    remove: string;\n\n    load: (data: IPdfInfo) => void;\n    setRemove: (data: string) => void;\n}\n\nexport default class PdfDeletePage extends Component<IPdfDeleteProps> {\n\n    private remove = () => {\n        const pos = this.props.remove;\n        if (!isNaN(+pos)) {\n            const position = +pos - 1\n            removePage(this.props.pdf, position).then(this.props.load)\n        } else if (isInterval(pos)) {\n            const interval = getInterval(pos);\n            const toRemove = Array.from(Array(interval[1]).keys()).slice(interval[0] - 1);\n            removePages(this.props.pdf, toRemove).then(this.props.load)\n        }\n    }\n\n    private isDisabled = () => {\n        const isNotValidNumber = isNaN(+this.props.remove) || +this.props.remove < 1;\n        return isEmpty(this.props.pdf) || (isNotValidNumber && !isInterval(this.props.remove))\n    }\n\n    public render() {\n        const {pdf, remove, setRemove} = this.props;\n        return (\n            <React.Fragment>\n                <TextField\n                    label={\"Pages to delete\"}\n                    type={\"text\"}\n                    value={remove}\n                    onChange={setString(setRemove)}\n                    placeholder={\"ex: 5-8 or 8\"}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.remove}\n                        style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                        startIcon={<DeleteIcon/>}>\n                    Delete\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfDeletePage from \"./PdfDeletePage\";\nimport {formRemoveSelector} from \"../../redux/form/selectors\";\nimport {setFormRemoveAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    remove: formRemoveSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setRemove: (data: string) => dispatch(setFormRemoveAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDeletePage);","import React, {PureComponent} from \"react\";\nimport {Button, Grid, InputAdornment, TextField} from \"@material-ui/core\";\nimport {drawText} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo, ITextOption} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {setNumber, setString} from \"../../../utils/formUtils\";\n\ninterface IPdfInsertTextProps extends ITextOption {\n    pdf: IPdfInfo;\n\n    load: (data: IPdfInfo) => void;\n    setTextColor: (data: string) => void;\n    setTextY: (data: number) => void;\n    setTextX: (data: number) => void;\n    setTextSize: (data: number) => void;\n    setTextRotate: (data: number) => void;\n    setText: (data: string) => void;\n}\n\nexport default class PdfInsertText extends PureComponent<IPdfInsertTextProps> {\n\n    private insert = () => {\n        drawText(this.props.pdf, this.props).then(this.props.load)\n    }\n\n    public render() {\n        const {\n            color, setTextColor, y, setTextY, x, setTextX, size, setTextSize, rotate, setTextRotate,\n            text, setText\n        } = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <TextField\n                        label=\"Text\"\n                        type=\"text\"\n                        placeholder={\"ex: draw some text\"}\n                        value={text}\n                        onChange={setString(setText)}\n                        InputLabelProps={{shrink: true}}\n                        multiline={true}\n                        rows={4}\n                        variant={\"outlined\"}\n                        fullWidth={true}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Y\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={y}\n                        onChange={setNumber(setTextY)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"X\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={x}\n                        onChange={setNumber(setTextX)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Size\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={size}\n                        onChange={setNumber(setTextSize)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Rotate\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={rotate}\n                        onChange={setNumber(setTextRotate)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Color\"\n                        type=\"text\"\n                        placeholder={\"ex: #000000\"}\n                        value={color}\n                        onChange={setString(setTextColor)}\n                        InputLabelProps={{shrink: true}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={isEmpty(this.props.pdf)}\n                            startIcon={<AddIcon/>}>\n                        Draw text\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertText from \"./PdfInsertText\";\nimport {\n    formTextColorSelector,\n    formTextRotateSelector,\n    formTextSelector,\n    formTextSizeSelector,\n    formTextXSelector,\n    formTextYSelector\n} from \"../../redux/form/selectors\";\nimport {\n    setTextAction,\n    setTextColorAction,\n    setTextRotateAction,\n    setTextSizeAction,\n    setTextXAction,\n    setTextYAction\n} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    x: formTextXSelector(state),\n    y: formTextYSelector(state),\n    rotate: formTextRotateSelector(state),\n    color: formTextColorSelector(state),\n    size: formTextSizeSelector(state),\n    text: formTextSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setTextColor: (data: string) => dispatch(setTextColorAction(data)),\n    setTextY: (data: number) => dispatch(setTextYAction(data)),\n    setTextX: (data: number) => dispatch(setTextXAction(data)),\n    setTextSize: (data: number) => dispatch(setTextSizeAction(data)),\n    setTextRotate: (data: number) => dispatch(setTextRotateAction(data)),\n    setText: (data: string) => dispatch(setTextAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertText);","import \"./App.css\";\n\nimport * as React from \"react\";\nimport {CssBaseline, ExpansionPanel, ExpansionPanelDetails, Grid, Typography} from \"@material-ui/core\";\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core/styles\";\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport PdfPreviewContainer from \"../pdf/preview/PdfPreviewContainer\";\nimport PdfDownloadContainer from \"../pdf/download/PdfDownloadContainer\";\nimport Scaffolder from \"./Scaffolder\";\nimport PdfInsertPageContainer from \"../pdf/modify/insert/PdfInsertPageContainer\";\nimport PdfDeletePageContainer from \"../pdf/modify/delete/PdfDeletePageContainer\";\nimport PdfInsertTextContainer from \"../pdf/modify/text/PdfInsertTextContainer\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {main: \"#ee3f3f\"},\n        secondary: {main: \"#a09f9f\"},\n        // type: 'dark',\n    }\n});\n\nclass App extends React.PureComponent {\n\n    public render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline/>\n                <Scaffolder>\n                    <Grid container={true} spacing={3}>\n                        <Grid item={true} xs={3}>\n                            <PdfDownloadContainer/>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Insert page</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertPageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Delete</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfDeletePageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Add text</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertTextContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        </Grid>\n                        <Grid item={true} xs={9}>\n                            <PdfPreviewContainer/>\n                        </Grid>\n                    </Grid>\n                </Scaffolder>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {getEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport {IForm, IPdfInfo} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\nexport const setPdfReducer = handleActions<any, any>(\n    {\n        [ActionTypes.load]: (state: IPdfInfo, action: Action<IPdfInfo>) => {\n            return action.payload as IPdfInfo;\n        },\n        [ActionTypes.selectPage]: (state: IPdfInfo, action: Action<number>) => {\n            return update(state, {selectedPage: {$set: action.payload}})\n        },\n    },\n    getEmpty()\n);\n\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {combineReducers} from \"redux\";\nimport {ITextOption} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\n\nexport const setRemoveReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setRemove]: (state: string, action: Action<string>) => {\n            return action.payload\n        },\n    },\n    \"\"\n);\n\nexport const setInsertReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setInsert]: (state: string, action: Action<string>) => {\n            return action.payload\n        },\n    },\n    \"\"\n);\n\nexport const setTextOptionReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setTextColor]: (state: ITextOption, action: Action<string>) => {\n            return update(state, {color: {$set: action.payload}})\n        },\n        [ActionTypes.setTextRotate]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {rotate: {$set: action.payload}})\n        },\n        [ActionTypes.setTextSize]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {size: {$set: action.payload}})\n        },\n        [ActionTypes.setTextX]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {x: {$set: action.payload}})\n        },\n        [ActionTypes.setTextY]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {y: {$set: action.payload}})\n        },\n        [ActionTypes.setText]: (state: ITextOption, action: Action<string>) => {\n            return update(state, {text: {$set: action.payload}})\n        },\n    },\n    {color: \"\", rotate: 0, size: 12, x: 0, y: 0, text: \"\"} as ITextOption\n);\n\nexport const setFormReducer = combineReducers({\n    remove: setRemoveReducer,\n    insert: setInsertReducer,\n    textOption: setTextOptionReducer\n})\n\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {setPdfReducer} from \"../pdf/redux/pdf/reducers\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {setFormReducer} from \"../pdf/redux/form/reducers\";\n\nconst rootReducer = combineReducers({\n    pdf: setPdfReducer,\n    form: setFormReducer\n})\n\nexport const store = createStore(rootReducer, composeWithDevTools(\n    applyMiddleware()\n))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {pdfjs} from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 81;"],"sourceRoot":""}