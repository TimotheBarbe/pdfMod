{"version":3,"sources":["utils/Uint8ArrayUtils.tsx","utils/stringUtils.tsx","utils/pdfUtils.tsx","pdf/loader/PdfLoader.tsx","pdf/redux/pdf/actions.ts","pdf/redux/pdf/selectors.ts","pdf/loader/PdfLoaderContainer.ts","pdf/preview/PdfPage.tsx","pdf/preview/PdfPageContainer.ts","pdf/loader/PdfCreateBlankDoc.tsx","pdf/loader/PdfCreateBlankDocContainer.ts","pdf/preview/PdfPreview.tsx","pdf/redux/display/selectors.ts","pdf/preview/PdfPreviewContainer.ts","pdf/download/PdfDownload.tsx","pdf/download/PdfDownloadContainer.ts","components/version/VersionSelector.tsx","components/version/VersionSelectorContainer.ts","components/view/ViewSelector.tsx","pdf/redux/display/actions.ts","components/view/ViewSelectorContainer.ts","components/Scaffolder.tsx","utils/formUtils.tsx","pdf/modify/insert/PdfInsertPage.tsx","pdf/redux/form/selectors.ts","pdf/redux/form/actions.ts","pdf/modify/insert/PdfInsertPageContainer.ts","pdf/modify/delete/PdfDeletePage.tsx","pdf/modify/delete/PdfDeletePageContainer.ts","pdf/modify/text/PdfInsertText.tsx","pdf/modify/text/PdfInsertTextContainer.ts","pdf/modify/rotation/PdfRotationPage.tsx","pdf/modify/rotation/PdfRotationPageContainer.ts","pdf/modify/rectangle/PdfInsertRectangle.tsx","pdf/modify/rectangle/PdfInsertRectangleContainer.ts","components/App.tsx","serviceWorker.js","pdf/redux/pdf/reducers.ts","pdf/redux/form/reducers.ts","pdf/redux/display/reducers.ts","state/store.tsx","index.tsx","../node_modules/pdfjs-dist/build sync"],"names":["isEmpty","pdf","pageCount","intervalExp","RegExp","isInterval","value","test","getInterval","exec","toRgb","hex","replace","m","r","g","b","result","getValue","v","parseInt","rgb","_callee","doc","data","regenerator_default","a","wrap","_context","prev","next","PDFDocument","create","sent","addPage","save","abrupt","selectedPage","stop","_callee2","state","index","_context2","load","insertPage","update","$set","removePage","_x3","_x4","_removePage","apply","this","arguments","_callee3","_context3","removePages","_x5","_x6","_removePages","_callee4","indexes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context4","undefined","reverse","Symbol","iterator","done","t0","return","finish","length","loadPdf","_x7","_loadPdf","_callee5","toLoad","_context5","getPageCount","mergePdf","_x8","_x9","_mergePdf","_callee6","start","end","startDoc","endDoc","contentPages","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","page","_context6","copyPages","getPageIndices","_callee7","_context7","then","_callee8","option","color","rotate","size","x","y","text","_context8","getPage","drawText","degrees","lineHeight","_callee9","width","height","opacity","_context9","drawRectangle","borderWidth","_callee10","angle","_context10","setRotation","getRotation","PdfLoader","read","files","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","_x10","_x11","_loadAndMerge","loadAndMerge","_this","props","readAsArrayBuffer","_this2","classes","react_default","createElement","Fragment","dist_es","onDrop","acceptedFiles","accept","multiple","_ref","getRootProps","getInputProps","className","dropzone","PureComponent","ActionTypes","component","selectPage","changeVersion","loadPdfAction","createAction","selectPageAction","pdfWithVersionSelector","pdfSelector","versions","position","pdfSelectorCanPrevious","pdfSelectorCanNext","pdfPageCountSelector","pdfSelectedPageSelector","withStyles","theme","createStyles","flex","display","flexDirection","alignItems","padding","borderRadius","borderColor","palette","secondary","main","borderStyle","backgroundColor","outline","withTheme","connect","dispatch","PdfPage","event","stopPropagation","_this$props","scale","selected","onClick","top","center","toLocaleString","IconButton","aria-label","right","Delete_default","fontSize","entry","pageIndex","renderAnnotationLayer","key","concat","border","margin","primary","& > canvas","justifyContent","textAlign","PdfCreateBlankDoc","createNew","_createBlank","createBlank","Button","variant","style","startIcon","Add_default","PdfPreview","view","noPdf","before","Array","from","keys","slice","all","after","Grid","container","spacing","item","xs","PdfCreateBlankDocContainer","PdfLoaderContainer","disabled","ArrowBack_default","map","PdfPageContainer","content","ArrowForward_default","displayViewSelector","displaySelector","maxWidth","maxHeight","overflow","PdfDownload","download","VersionSelector","change","canPrevious","canNext","Undo_default","Typography","Redo_default","marginLeft","marginRight","ViewSelector","handleAlignment","setView","group","ToggleButtonGroup","exclusive","onChange","ToggleButton","ViewList_default","ZoomIn_default","setDisplayViewAction","Scaffolder","react","AppBar","elevation","Toolbar","VersionSelectorContainer","ViewSelectorContainer","Divider","orientation","flexItem","href","target","GitHub_default","children","React","setString","setter","setNumber","PdfInsertPage","insert","pos","isNaN","_x","_x2","_insertPage","isDisabled","isNotValidNumber","setInsert","TextField","label","type","InputLabelProps","shrink","formSelector","form","formRemoveSelector","remove","formInsertSelector","formTextOptionSelector","textOption","formTextXSelector","formTextYSelector","formTextRotateSelector","formTextColorSelector","formTextSizeSelector","formTextSelector","formRectangleOptionSelector","rectangleOption","formRectangleXSelector","formRectangleYSelector","formRectangleRotateSelector","formRectangleHeightSelector","formRectangleWidthSelector","formRectangleColorSelector","formRectangleOpacitySelector","set","setRemove","setTextColor","setTextY","setTextX","setTextSize","setTextRotate","setText","setRectangleY","setRectangleX","setRectangleRotate","setRectangleHeight","setRectangleWidth","setRectangleColor","setRectangleOpacity","setFormRemoveAction","setFormInsertAction","setTextColorAction","setTextYAction","setTextXAction","setTextSizeAction","setTextRotateAction","setTextAction","setRectangleYAction","setRectangleXAction","setRectangleHeightAction","setRectangleWidthAction","setRectangleRotateAction","setRectangleColorAction","setRectangleOpacityAction","PdfDeletePage","interval","toRemove","placeholder","Component","PdfInsertText","_x12","_x13","_drawText","multiline","rows","fullWidth","inputProps","min","id","name","PdfRotationPage","_x16","_x17","_rotatePage","rotatePage","RotateLeft_default","endIcon","RotateRight_default","PdfInsertRectangle","_x14","_x15","_drawRectangle","step","max","createMuiTheme","App","ThemeProvider","CssBaseline","components_Scaffolder","PdfDownloadContainer","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","ExpansionPanelDetails","PdfInsertPageContainer","PdfDeletePageContainer","PdfInsertTextContainer","PdfInsertRectangleContainer","PdfRotationPageContainer","PdfPreviewContainer","Boolean","window","location","hostname","match","setPdfReducer","handleActions","_handleActions","Object","defineProperty","action","$splice","payload","Uint8Array","setRemoveReducer","setInsertReducer","setTextOptionReducer","_handleActions3","setRectangleOptionReducer","_handleActions4","setFormReducer","combineReducers","setViewReducer","setDisplayReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","pdfjs","GlobalWorkerOptions","workerSrc","version","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","e","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.53805b78.chunk.js","sourcesContent":["import {IPdfInfo} from \"../state/models\";\n\nexport const getEmpty = (): IPdfInfo => {\n    return {data: new Uint8Array(0), pageCount: 0, selectedPage: 0};\n}\n\nexport const isEmpty = (pdf: IPdfInfo) => {\n    return pdf.pageCount === 0;\n}","import {rgb} from \"pdf-lib\";\n\nconst intervalExp = new RegExp('^([0-9]+)-([0-9]+)$');\n\nexport const isInterval = (value: string) => {\n    return intervalExp.test(value)\n}\n\nexport const getInterval = (value: string) => {\n    let exec = intervalExp.exec(value) as RegExpExecArray;\n    return [+exec[1], +exec[2]]\n}\n\nexport const toRgb = (hex: string) => {\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    function getValue(v: string) {\n        return parseInt(v, 16) / 255;\n    }\n\n    return result ? rgb(getValue(result[1]), getValue(result[2]), getValue(result[3])) : rgb(0, 0, 0);\n}","import {degrees, PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo, IRectangleOption, ITextOption} from \"../state/models\";\nimport update from 'immutability-helper';\nimport {isEmpty} from \"./Uint8ArrayUtils\";\nimport {toRgb} from \"./stringUtils\";\n\nexport async function createBlank(): Promise<IPdfInfo> {\n    const doc = await PDFDocument.create()\n    const page = doc.addPage()\n    const data = await doc.save();\n    return {data, pageCount: 1, selectedPage: 0} as IPdfInfo\n}\n\nexport async function insertPage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    doc.insertPage(index);\n    const data = await doc.save();\n    return update(state, {data: {$set: data}, pageCount: {$set: state.pageCount + 1}, selectedPage: {$set: index}})\n}\n\nexport async function removePage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    return removePages(state, [index]);\n}\n\n/**\n * @param indexes must be ordered !\n */\nexport async function removePages(state: IPdfInfo, indexes: number[]): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    for (const index of indexes.reverse()) {\n        doc.removePage(index);\n    }\n    const data = await doc.save();\n    return {data, pageCount: state.pageCount - indexes.length, selectedPage: state.selectedPage}\n}\n\nexport async function loadPdf(toLoad: string | ArrayBuffer): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(toLoad)\n    const pageCount = doc.getPageCount();\n    const data = await doc.save();\n    return {data, pageCount, selectedPage: 0}\n}\n\nexport async function mergePdf(start: IPdfInfo, end: IPdfInfo): Promise<IPdfInfo> {\n    if (isEmpty(start)) return end;\n    const startDoc = await PDFDocument.load(start.data);\n    const endDoc = await PDFDocument.load(end.data);\n    const contentPages = await startDoc.copyPages(endDoc, endDoc.getPageIndices());\n    for (const page of contentPages) {\n        startDoc.addPage(page);\n    }\n    const data = await startDoc.save();\n    return {data, pageCount: start.pageCount + end.pageCount, selectedPage: start.selectedPage}\n}\n\nexport async function loadAndMerge(toLoad: string | ArrayBuffer, start: IPdfInfo): Promise<IPdfInfo> {\n    return loadPdf(toLoad).then(end => mergePdf(start, end))\n}\n\nexport async function drawText(state: IPdfInfo, option: ITextOption): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(state.selectedPage);\n    const {color, rotate, size, x, y, text} = option\n    page.drawText(text, {x, y, rotate: degrees(rotate), size, color: toRgb(color), lineHeight: size})\n    const data = await doc.save();\n    return update(state, {data: {$set: data}})\n}\n\nexport async function drawRectangle(state: IPdfInfo, option: IRectangleOption): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(state.selectedPage);\n    const {rotate, x, y, width, height, color, opacity} = option\n    page.drawRectangle({x, y, rotate: degrees(rotate), color: toRgb(color), width, height, borderWidth: 0, opacity})\n    const data = await doc.save();\n    return update(state, {data: {$set: data}})\n}\n\nexport async function rotatePage(state: IPdfInfo, angle: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(state.selectedPage);\n    page.setRotation(degrees(page.getRotation().angle + angle))\n    const data = await doc.save();\n    return update(state, {data: {$set: data}})\n}","import React, {PureComponent} from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport {PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {WithStyles} from \"@material-ui/core\";\nimport {loadAndMerge, loadPdf, mergePdf} from \"../../utils/pdfUtils\";\n\ninterface IPdfLoaderProps extends WithStyles {\n    load: (data: IPdfInfo) => void;\n    pdf: IPdfInfo;\n}\n\nexport default class PdfLoader extends PureComponent<IPdfLoaderProps> {\n\n    private read = (files: File[]) => {\n        const file = files[0]\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = () => {\n            const binaryStr = reader.result\n            if (binaryStr != null) loadAndMerge(binaryStr, this.props.pdf).then(r => this.props.load(r))\n        }\n        reader.readAsArrayBuffer(file)\n    };\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <Dropzone onDrop={acceptedFiles => this.read(acceptedFiles)} accept={\".pdf\"} multiple={false}>\n                    {({getRootProps, getInputProps}) => (\n                        <section>\n                            <div {...getRootProps({className: classes.dropzone})}>\n                                <input {...getInputProps()} />\n                                <p>Drag 'n' drop some files here, or click to select files</p>\n                            </div>\n                        </section>\n                    )}\n                </Dropzone>\n            </React.Fragment>\n        )\n    }\n}","import {createAction} from \"redux-actions\";\nimport {IPdfInfo} from \"../../../state/models\";\n\nconst component = \"pdf/\";\n\nexport const ActionTypes = {\n    load: component + \"load\",\n    selectPage: component + \"select\",\n    changeVersion: component + \"previousVersion\"\n};\n\nexport const loadPdfAction = createAction<IPdfInfo>(ActionTypes.load);\nexport const selectPageAction = createAction<number>(ActionTypes.selectPage);\nexport const changeVersion = createAction<number>(ActionTypes.changeVersion);","import {IStoreState} from \"../../../state/models\";\n\nexport const pdfWithVersionSelector = (state: IStoreState) => state.pdf\nexport const pdfSelector = (state: IStoreState) => pdfWithVersionSelector(state).versions[pdfWithVersionSelector(state).position];\nexport const pdfSelectorCanPrevious = (state: IStoreState) => pdfWithVersionSelector(state).position > 0;\nexport const pdfSelectorCanNext = (state: IStoreState) => pdfWithVersionSelector(state).position < pdfWithVersionSelector(state).versions.length - 1;\nexport const pdfDataSelector = (state: IStoreState) => pdfSelector(state).data;\nexport const pdfPageCountSelector = (state: IStoreState) => pdfSelector(state).pageCount;\nexport const pdfSelectedPageSelector = (state: IStoreState) => pdfSelector(state).selectedPage;\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport PdfLoader from \"./PdfLoader\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {loadPdfAction} from \"../redux/pdf/actions\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        dropzone: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            padding: \"20px\",\n            borderWidth: \"2px\",\n            borderRadius: \"2px\",\n            borderColor: theme.palette.secondary.main,\n            borderStyle: \"dashed\",\n            backgroundColor: \"#fafafa\",\n            color: theme.palette.secondary.main,\n            outline: \"none\",\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfLoader));","import React, {PureComponent} from \"react\";\nimport {Page} from \"react-pdf\";\nimport {IconButton, WithStyles} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {IPdfInfo} from \"../../state/models\";\nimport {removePage} from \"../../utils/pdfUtils\";\n\ninterface IPdfPageProps extends WithStyles {\n    selectPage: (index: number) => void;\n    load: (data: IPdfInfo) => void;\n\n    pageCount: number;\n    pdf: IPdfInfo;\n\n    index: number;\n    selected: boolean;\n    scale: number;\n}\n\n\nexport default class PdfPage extends PureComponent<IPdfPageProps> {\n    private selectPage = (event: React.MouseEvent<any>) => this.props.selectPage(this.props.index)\n    private removePage = (event: React.MouseEvent<any>) => {\n        event.stopPropagation();\n        removePage(this.props.pdf, this.props.index).then(this.props.load);\n    }\n\n    public render() {\n        const {index, classes, scale, selected, pageCount} = this.props;\n\n        return (\n            <div onClick={this.selectPage} className={selected ? classes.selected : classes.main}>\n                <div className={classes.top}>\n                    <div className={classes.center}>\n                        {(index + 1).toLocaleString()}/{pageCount.toLocaleString()}\n                    </div>\n                    <IconButton aria-label=\"delete\" className={classes.right} onClick={this.removePage}>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </div>\n                <Page className={classes.page} scale={scale} width={595}\n                      pageIndex={index} renderAnnotationLayer={false} key={`page_${index + 1}`}/>\n            </div>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {pdfPageCountSelector, pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport PdfPage from \"./PdfPage\"\nimport {loadPdfAction, selectPageAction} from \"../redux/pdf/actions\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        main: {\n            border: `1px solid ${theme.palette.secondary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        selected: {\n            border: `1px solid ${theme.palette.primary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        page: {\n            \"& > canvas\": {\n                border: `1px solid ${theme.palette.secondary.main}`,\n            },\n            margin: 5\n        },\n        top: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n        },\n        center: {\n            flex: 1,\n            textAlign: \"center\"\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    selectedPage: pdfSelectedPageSelector(state),\n    pageCount: pdfPageCountSelector(state),\n    pdf: pdfSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPage));","import React, {PureComponent} from \"react\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {Button} from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {createBlank} from \"../../utils/pdfUtils\";\n\ninterface IPdfCreateBlankDocProps {\n    load: (data: IPdfInfo) => void;\n}\n\nexport default class PdfCreateBlankDoc extends PureComponent<IPdfCreateBlankDocProps> {\n\n    private createNew = () => {\n        createBlank().then(this.props.load)\n    }\n\n    public render() {\n        return (\n            <Button variant=\"outlined\" color=\"primary\"\n                    style={{margin: \"0 10px 10px 0\"}} onClick={this.createNew}\n                    startIcon={<AddIcon/>}>\n                Create blank PDF\n            </Button>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {loadPdfAction} from \"../redux/pdf/actions\";\nimport PdfCreateBlankDoc from \"./PdfCreateBlankDoc\";\n\n\nconst mapStateToProps = (state: IStoreState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfCreateBlankDoc);","import React, {PureComponent} from \"react\";\nimport {Document} from \"react-pdf\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport PdfLoaderContainer from \"../loader/PdfLoaderContainer\";\nimport {IPdfInfo, View} from \"../../state/models\";\nimport {Grid, IconButton, WithStyles} from \"@material-ui/core\";\nimport PdfPageContainer from \"./PdfPageContainer\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport PdfCreateBlankDocContainer from \"../loader/PdfCreateBlankDocContainer\";\n\ninterface IPdfPreviewProps extends WithStyles {\n    pdf: IPdfInfo;\n    selectedPage: number;\n    view: View;\n\n    selectPage: (index: number) => void;\n}\n\n\nexport default class PdfPreview extends PureComponent<IPdfPreviewProps> {\n    private selectPage = (index: number) => (event: React.MouseEvent<any>) => this.props.selectPage(index)\n\n    public render() {\n        const {pdf, selectedPage, view, classes} = this.props;\n        const noPdf = isEmpty(pdf);\n\n        const before = Array.from(Array(pdf.selectedPage).keys()).slice(-2)\n        const all = Array.from(Array(pdf.pageCount).keys())\n        const after = all.slice(selectedPage, selectedPage + 3)\n\n        return (\n            <React.Fragment>\n                {noPdf &&\n                <Grid container={true} spacing={3}>\n                    <Grid item={true} xs={2}>\n                        <PdfCreateBlankDocContainer/>\n                    </Grid>\n                    <Grid item={true} xs={10}>\n                        <PdfLoaderContainer/>\n                    </Grid>\n                </Grid>}\n                {!noPdf && <Document file={{data: pdf.data}}>\n                    <Grid container={true} spacing={3}>\n                        {view === \"zoom\" &&\n                        <React.Fragment>\n                            <Grid item={true} xs={2}>\n                                <IconButton aria-label=\"previous\" disabled={selectedPage <= 0}\n                                            onClick={this.selectPage(selectedPage - 1)}>\n                                    <ArrowBackIcon fontSize=\"small\"/>\n                                </IconButton>\n                                {before.map((index) => (\n                                        index !== selectedPage &&\n                                        <PdfPageContainer key={index} selected={false} index={index} scale={0.2}/>\n                                    )\n                                )}\n                            </Grid>\n                            <Grid item={true} xs={8}>\n                                <div className={classes.content}>\n                                    <PdfPageContainer selected={true} index={selectedPage} scale={1}/>\n                                </div>\n                            </Grid>\n                            <Grid item={true} xs={2}>\n                                <IconButton aria-label=\"next\" disabled={selectedPage >= pdf.pageCount - 1}\n                                            onClick={this.selectPage(selectedPage + 1)}>\n                                    <ArrowForwardIcon fontSize=\"small\"/>\n                                </IconButton>\n                                {after.map((index) => (\n                                        index !== selectedPage &&\n                                        <PdfPageContainer key={`p_${index + 1}`} selected={false} index={index} scale={0.2}/>\n                                    )\n                                )}\n                            </Grid>\n                        </React.Fragment>}\n                        {view === \"global\" &&\n                        <React.Fragment>\n                            {all.map((index) => (\n                                    <Grid item={true} xs={2} key={index}>\n                                        <PdfPageContainer selected={selectedPage === index} index={index} scale={0.2}/>\n                                    </Grid>\n                                )\n                            )}\n                        </React.Fragment>\n                        }\n                    </Grid>\n                </Document>}\n            </React.Fragment>\n        )\n    }\n}","import {IStoreState} from \"../../../state/models\";\n\nexport const displaySelector = (state: IStoreState) => state.display;\nexport const displayViewSelector = (state: IStoreState) => displaySelector(state).view;\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfPreview from \"./PdfPreview\";\nimport {pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {selectPageAction} from \"../redux/pdf/actions\";\nimport {displayViewSelector} from \"../redux/display/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            maxWidth: \"100%\",\n            maxHeight: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            overflow: \"auto\",\n        }\n    })\n\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    selectedPage: pdfSelectedPageSelector(state),\n    view: displayViewSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPreview));","import React, {PureComponent} from \"react\";\nimport download from \"downloadjs\";\nimport {Button} from \"@material-ui/core\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo} from \"../../state/models\";\n\ninterface IPdfPreviewProps {\n    pdf: IPdfInfo;\n}\n\nexport default class PdfDownload extends PureComponent<IPdfPreviewProps> {\n\n    private download = () => {\n        download(this.props.pdf.data, \"download.pdf\", \"application/pdf\");\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.download} style={{margin: \"0 10px 10px 0\"}}\n                        disabled={isEmpty(this.props.pdf)}>\n                    Download\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfDownload from \"./PdfDownload\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDownload);","import React, {PureComponent} from \"react\";\nimport {Toolbar, Typography, WithStyles} from \"@material-ui/core\";\nimport UndoIcon from '@material-ui/icons/Undo';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport RedoIcon from '@material-ui/icons/Redo';\n\ninterface IVersionSelectorProps extends WithStyles {\n    canPrevious: boolean;\n    canNext: boolean;\n\n    changeVersion: (index: number) => void;\n}\n\nexport default class VersionSelector extends PureComponent<IVersionSelectorProps> {\n\n    private changeVersion = (change: number) => (event: React.MouseEvent<any>) => {\n        event.stopPropagation();\n        this.props.changeVersion(change);\n    }\n\n    public render() {\n        const {classes, canPrevious, canNext} = this.props;\n        return (\n            <div className={classes.center}>\n                <IconButton color={\"inherit\"} onClick={this.changeVersion(-1)} disabled={!canPrevious}>\n                    <UndoIcon/>\n                    <Typography variant=\"subtitle1\">\n                        Undo\n                    </Typography>\n                </IconButton>\n                <IconButton color={\"inherit\"} onClick={this.changeVersion(1)} disabled={!canNext}>\n                    <Typography variant=\"subtitle1\">\n                        Redo\n                    </Typography>\n                    <RedoIcon/>\n                </IconButton>\n            </div>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport VersionSelector from \"./VersionSelector\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {changeVersion} from \"../../pdf/redux/pdf/actions\";\nimport {pdfSelectorCanNext, pdfSelectorCanPrevious} from \"../../pdf/redux/pdf/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        center: {\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    canPrevious: pdfSelectorCanPrevious(state),\n    canNext: pdfSelectorCanNext(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    changeVersion: (index: number) => dispatch(changeVersion(index)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(VersionSelector));","import React, {PureComponent} from \"react\";\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport {View} from \"../../state/models\";\nimport {ToggleButton, ToggleButtonGroup} from \"@material-ui/lab\";\nimport {Typography, WithStyles} from \"@material-ui/core\";\n\ninterface IViewSelectorProps extends WithStyles {\n    view: View;\n\n    setView: (index: View) => void;\n}\n\nexport default class ViewSelector extends PureComponent<IViewSelectorProps> {\n\n    private handleAlignment = (event: React.MouseEvent<HTMLElement>, view: View | null) => {\n        if (view && view !== this.props.view) this.props.setView(view);\n    };\n\n    public render() {\n        const {view, classes} = this.props;\n        return (\n            <div className={classes.group}>\n                <Typography variant=\"subtitle1\" className={classes.text}>\n                    View\n                </Typography>\n                <ToggleButtonGroup\n                    value={view}\n                    exclusive={true}\n                    onChange={this.handleAlignment}\n                    aria-label=\"text alignment\"\n                >\n                    <ToggleButton value=\"global\" aria-label=\"global\" color={\"inherit\"}>\n                        <ViewListIcon/>\n                    </ToggleButton>\n                    <ToggleButton value=\"zoom\" aria-label=\"zoom\" color={\"inherit\"}>\n                        <ZoomInIcon/>\n                    </ToggleButton>\n                </ToggleButtonGroup>\n\n            </div>\n        )\n    }\n}","import {createAction} from \"redux-actions\";\nimport {View} from \"../../../state/models\";\n\nconst component = \"display/\";\n\nexport const ActionTypes = {\n    setView: component + \"setView\",\n};\n\nexport const setDisplayViewAction = createAction<View>(ActionTypes.setView);\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState, View} from \"../../state/models\";\nimport ViewSelector from \"./ViewSelector\";\nimport {setDisplayViewAction} from \"../../pdf/redux/display/actions\";\nimport {displayViewSelector} from \"../../pdf/redux/display/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        group: {\n            marginRight: 8,\n        },\n        text: {\n            display: \"inline-flex\",\n            marginRight: 5,\n        },\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    view: displayViewSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    setView: (view: View) => dispatch(setDisplayViewAction(view)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(ViewSelector));","import * as React from \"react\";\nimport {AppBar, createStyles, Theme, Toolbar, Typography, withStyles, WithStyles} from \"@material-ui/core\";\nimport VersionSelectorContainer from \"./version/VersionSelectorContainer\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport ViewSelectorContainer from \"./view/ViewSelectorContainer\";\nimport Divider from \"@material-ui/core/Divider\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            height: \"calc(100%-64px)\",\n            padding: 40,\n        }\n    })\n\nclass Scaffolder extends React.PureComponent<WithStyles> {\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <AppBar elevation={0} position={\"static\"}>\n                    <Toolbar>\n                        <Typography variant=\"h4\">\n                            pdfModer\n                        </Typography>\n                        <VersionSelectorContainer/>\n                        <ViewSelectorContainer/>\n                        <Divider orientation=\"vertical\" flexItem={true}/>\n                        <IconButton color={\"inherit\"} href={\"https://github.com/TimotheBarbe/pdfModer\"}\n                                    target={\"_blank\"}>\n                            <GitHubIcon/>\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n                <main className={classes.content}>\n                    {this.props.children}\n                </main>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(Scaffolder);\n","import {ChangeEvent} from \"react\";\n\n\nexport const setString = (setter: (data: string) => void) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setter(event.target.value)\n}\n\nexport const setNumber = (setter: (data: number) => void) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setter(+event.target.value)\n}","import React, {PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {insertPage} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport PdfLoaderContainer from \"../../loader/PdfLoaderContainer\";\nimport {setString} from \"../../../utils/formUtils\";\n\ninterface IPdfInsertProps {\n    pdf: IPdfInfo;\n    insert: string;\n\n    load: (data: IPdfInfo) => void;\n    setInsert: (data: string) => void;\n}\n\nexport default class PdfInsertPage extends PureComponent<IPdfInsertProps> {\n\n    private insert = () => {\n        const pos = this.props.insert;\n        if (!isNaN(+pos)) {\n            insertPage(this.props.pdf, +pos - 1).then(this.props.load)\n        }\n    }\n\n    private isDisabled = () => {\n        const isNotValidNumber = isNaN(+this.props.insert) || +this.props.insert < 1;\n        return isEmpty(this.props.pdf) || (isNotValidNumber)\n    }\n\n    public render() {\n        const {insert, setInsert} = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <TextField\n                        label=\"Before page\"\n                        type=\"text\"\n                        value={insert}\n                        onChange={setString(setInsert)}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            startIcon={<AddIcon/>}>\n                        new page\n                    </Button>\n                </Grid>\n                <Grid item={true} xs={12}>\n                    Insert doc\n                    <PdfLoaderContainer/>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {IStoreState} from \"../../../state/models\";\n\nexport const formSelector = (state: IStoreState) => state.form;\nexport const formRemoveSelector = (state: IStoreState) => formSelector(state).remove;\nexport const formInsertSelector = (state: IStoreState) => formSelector(state).insert;\n\nexport const formTextOptionSelector = (state: IStoreState) => formSelector(state).textOption;\nexport const formTextXSelector = (state: IStoreState) => formTextOptionSelector(state).x;\nexport const formTextYSelector = (state: IStoreState) => formTextOptionSelector(state).y;\nexport const formTextRotateSelector = (state: IStoreState) => formTextOptionSelector(state).rotate;\nexport const formTextColorSelector = (state: IStoreState) => formTextOptionSelector(state).color;\nexport const formTextSizeSelector = (state: IStoreState) => formTextOptionSelector(state).size;\nexport const formTextSelector = (state: IStoreState) => formTextOptionSelector(state).text;\n\nexport const formRectangleOptionSelector = (state: IStoreState) => formSelector(state).rectangleOption;\nexport const formRectangleXSelector = (state: IStoreState) => formRectangleOptionSelector(state).x;\nexport const formRectangleYSelector = (state: IStoreState) => formRectangleOptionSelector(state).y;\nexport const formRectangleRotateSelector = (state: IStoreState) => formRectangleOptionSelector(state).rotate;\nexport const formRectangleHeightSelector = (state: IStoreState) => formRectangleOptionSelector(state).height;\nexport const formRectangleWidthSelector = (state: IStoreState) => formRectangleOptionSelector(state).width;\nexport const formRectangleColorSelector = (state: IStoreState) => formRectangleOptionSelector(state).color;\nexport const formRectangleOpacitySelector = (state: IStoreState) => formRectangleOptionSelector(state).opacity;","import {createAction} from \"redux-actions\";\nimport {IForm} from \"../../../state/models\";\n\nconst component = \"form/\";\n\nexport const ActionTypes = {\n    set: component + \"set\",\n    setRemove: component + \"setRemove\",\n    setInsert: component + \"setInsert\",\n\n    setTextColor: component + \"text/setTextColor\",\n    setTextY: component + \"text/setTextY\",\n    setTextX: component + \"text/setTextX\",\n    setTextSize: component + \"text/setTextSize\",\n    setTextRotate: component + \"text/setTextRotate\",\n    setText: component + \"text/setText\",\n\n    setRectangleY: component + \"rectangle/setRectangleY\",\n    setRectangleX: component + \"rectangle/setRectangleX\",\n    setRectangleRotate: component + \"rectangle/setRectangleRotate\",\n    setRectangleHeight: component + \"rectangle/setRectangleHeight\",\n    setRectangleWidth: component + \"rectangle/setRectangleWidth\",\n    setRectangleColor: component + \"rectangle/setRectangleColor\",\n    setRectangleOpacity: component + \"rectangle/setRectangleOpacity\",\n\n};\n\nexport const setFormAction = createAction<IForm>(ActionTypes.set);\n\nexport const setFormRemoveAction = createAction<string>(ActionTypes.setRemove);\nexport const setFormInsertAction = createAction<string>(ActionTypes.setInsert);\n\nexport const setTextColorAction = createAction<string>(ActionTypes.setTextColor);\nexport const setTextYAction = createAction<number>(ActionTypes.setTextY);\nexport const setTextXAction = createAction<number>(ActionTypes.setTextX);\nexport const setTextSizeAction = createAction<number>(ActionTypes.setTextSize);\nexport const setTextRotateAction = createAction<number>(ActionTypes.setTextRotate);\nexport const setTextAction = createAction<string>(ActionTypes.setText);\n\nexport const setRectangleYAction = createAction<number>(ActionTypes.setRectangleY);\nexport const setRectangleXAction = createAction<number>(ActionTypes.setRectangleX);\nexport const setRectangleHeightAction = createAction<number>(ActionTypes.setRectangleHeight);\nexport const setRectangleWidthAction = createAction<number>(ActionTypes.setRectangleWidth);\nexport const setRectangleRotateAction = createAction<number>(ActionTypes.setRectangleRotate);\nexport const setRectangleColorAction = createAction<string>(ActionTypes.setRectangleColor);\nexport const setRectangleOpacityAction = createAction<number>(ActionTypes.setRectangleOpacity);\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertPage from \"./PdfInsertPage\";\nimport {formInsertSelector} from \"../../redux/form/selectors\";\nimport {setFormInsertAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    insert: formInsertSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setInsert: (data: string) => dispatch(setFormInsertAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertPage);","import React, {ChangeEvent, Component} from \"react\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport {removePage, removePages} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {getInterval, isInterval} from \"../../../utils/stringUtils\";\nimport {setString} from \"../../../utils/formUtils\";\n\n\ninterface IPdfDeleteProps {\n    pdf: IPdfInfo;\n    remove: string;\n\n    load: (data: IPdfInfo) => void;\n    setRemove: (data: string) => void;\n}\n\nexport default class PdfDeletePage extends Component<IPdfDeleteProps> {\n\n    private remove = () => {\n        const pos = this.props.remove;\n        if (!isNaN(+pos)) {\n            const position = +pos - 1\n            removePage(this.props.pdf, position).then(this.props.load)\n        } else if (isInterval(pos)) {\n            const interval = getInterval(pos);\n            const toRemove = Array.from(Array(interval[1]).keys()).slice(interval[0] - 1);\n            removePages(this.props.pdf, toRemove).then(this.props.load)\n        }\n    }\n\n    private isDisabled = () => {\n        const isNotValidNumber = isNaN(+this.props.remove) || +this.props.remove < 1;\n        return isEmpty(this.props.pdf) || (isNotValidNumber && !isInterval(this.props.remove))\n    }\n\n    public render() {\n        const {pdf, remove, setRemove} = this.props;\n        return (\n            <React.Fragment>\n                <TextField\n                    label={\"Pages to delete\"}\n                    type={\"text\"}\n                    value={remove}\n                    onChange={setString(setRemove)}\n                    placeholder={\"ex: 5-8 or 8\"}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.remove}\n                        style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                        startIcon={<DeleteIcon/>}>\n                    Delete\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfDeletePage from \"./PdfDeletePage\";\nimport {formRemoveSelector} from \"../../redux/form/selectors\";\nimport {setFormRemoveAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    remove: formRemoveSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setRemove: (data: string) => dispatch(setFormRemoveAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDeletePage);","import React, {PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {drawText} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo, ITextOption} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {setNumber, setString} from \"../../../utils/formUtils\";\n\ninterface IPdfInsertTextProps extends ITextOption {\n    pdf: IPdfInfo;\n\n    load: (data: IPdfInfo) => void;\n    setTextColor: (data: string) => void;\n    setTextY: (data: number) => void;\n    setTextX: (data: number) => void;\n    setTextSize: (data: number) => void;\n    setTextRotate: (data: number) => void;\n    setText: (data: string) => void;\n}\n\nexport default class PdfInsertText extends PureComponent<IPdfInsertTextProps> {\n\n    private insert = () => {\n        drawText(this.props.pdf, this.props).then(this.props.load)\n    }\n\n    public render() {\n        const {\n            color, setTextColor, y, setTextY, x, setTextX, size, setTextSize, rotate, setTextRotate,\n            text, setText\n        } = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <TextField\n                        label=\"Text\"\n                        type=\"text\"\n                        placeholder={\"ex: draw some text\"}\n                        value={text}\n                        onChange={setString(setText)}\n                        InputLabelProps={{shrink: true}}\n                        multiline={true}\n                        rows={4}\n                        variant={\"outlined\"}\n                        fullWidth={true}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Y\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={y}\n                        onChange={setNumber(setTextY)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"X\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={x}\n                        onChange={setNumber(setTextX)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Size\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={size}\n                        onChange={setNumber(setTextSize)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Rotate\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={rotate}\n                        onChange={setNumber(setTextRotate)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <input type=\"color\" id=\"head\" name=\"head\" value={color} onChange={setString(setTextColor)}/>\n                </Grid>\n\n                <Grid item={true} xs={6}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={isEmpty(this.props.pdf)}\n                            startIcon={<AddIcon/>}>\n                        Draw text\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertText from \"./PdfInsertText\";\nimport {\n    formTextColorSelector,\n    formTextRotateSelector,\n    formTextSelector,\n    formTextSizeSelector,\n    formTextXSelector,\n    formTextYSelector\n} from \"../../redux/form/selectors\";\nimport {\n    setTextAction,\n    setTextColorAction,\n    setTextRotateAction,\n    setTextSizeAction,\n    setTextXAction,\n    setTextYAction\n} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    x: formTextXSelector(state),\n    y: formTextYSelector(state),\n    rotate: formTextRotateSelector(state),\n    color: formTextColorSelector(state),\n    size: formTextSizeSelector(state),\n    text: formTextSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setTextColor: (data: string) => dispatch(setTextColorAction(data)),\n    setTextY: (data: number) => dispatch(setTextYAction(data)),\n    setTextX: (data: number) => dispatch(setTextXAction(data)),\n    setTextSize: (data: number) => dispatch(setTextSizeAction(data)),\n    setTextRotate: (data: number) => dispatch(setTextRotateAction(data)),\n    setText: (data: string) => dispatch(setTextAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertText);","import React, {PureComponent} from \"react\";\nimport {Button, Grid} from \"@material-ui/core\";\nimport {rotatePage} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport RotateRightIcon from '@material-ui/icons/RotateRight';\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\n\ninterface IPdfRotationProps {\n    pdf: IPdfInfo;\n\n    load: (data: IPdfInfo) => void;\n}\n\nexport default class PdfRotationPage extends PureComponent<IPdfRotationProps> {\n\n    private rotate = (angle: number) => () => {\n        rotatePage(this.props.pdf, angle).then(this.props.load)\n    }\n\n    private isDisabled = () => {\n        return isEmpty(this.props.pdf);\n    }\n\n    public render() {\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.rotate(-90)}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            startIcon={<RotateLeftIcon/>}>\n                        rotate left\n                    </Button>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.rotate(90)}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            endIcon={<RotateRightIcon/>}>\n                        rotate right\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport PdfRotationPage from \"./PdfRotationPage\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfRotationPage);","import React, {PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {IPdfInfo, IRectangleOption} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {setNumber, setString} from \"../../../utils/formUtils\";\nimport {drawRectangle} from \"../../../utils/pdfUtils\";\n\ninterface IPdfInsertRectangleProps extends IRectangleOption {\n    pdf: IPdfInfo;\n    load: (data: IPdfInfo) => void;\n    setRectangleRotate: (data: number) => void;\n    setRectangleY: (data: number) => void;\n    setRectangleX: (data: number) => void;\n    setRectangleWidth: (data: number) => void;\n    setRectangleHeight: (data: number) => void;\n    setRectangleColor: (data: string) => void;\n    setRectangleOpacity: (data: number) => void;\n}\n\nexport default class PdfInsertRectangle extends PureComponent<IPdfInsertRectangleProps> {\n\n    private insert = () => {\n        drawRectangle(this.props.pdf, this.props).then(this.props.load)\n    }\n\n    public render() {\n        const {\n            y, setRectangleY, x, setRectangleX, width, setRectangleWidth, rotate, setRectangleRotate,\n            height, setRectangleHeight, color, setRectangleColor, opacity, setRectangleOpacity\n        } = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Y\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={y}\n                        onChange={setNumber(setRectangleY)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"X\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={x}\n                        onChange={setNumber(setRectangleX)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Width\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={width}\n                        onChange={setNumber(setRectangleWidth)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Height\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={height}\n                        onChange={setNumber(setRectangleHeight)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={4}>\n                    <TextField\n                        label=\"Rotate\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={rotate}\n                        onChange={setNumber(setRectangleRotate)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={4}>\n                    <TextField\n                        label=\"Opacity\"\n                        type=\"number\"\n                        placeholder={\"ex: 0.5\"}\n                        value={opacity}\n                        onChange={setNumber(setRectangleOpacity)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: 0, step: 0.1, max: 1}}\n                    />\n                </Grid>\n                <Grid item={true} xs={4}>\n                    <input type=\"color\" id=\"head\" name=\"head\" value={color} onChange={setString(setRectangleColor)}/>\n                </Grid>\n                <Grid item={true} xs={4}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={isEmpty(this.props.pdf)}\n                            startIcon={<AddIcon/>}>\n                        Draw Rectangle\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertRectangle from \"./PdfInsertRectangle\";\nimport {\n    formRectangleColorSelector,\n    formRectangleHeightSelector, formRectangleOpacitySelector,\n    formRectangleRotateSelector,\n    formRectangleWidthSelector,\n    formRectangleXSelector,\n    formRectangleYSelector\n} from \"../../redux/form/selectors\";\nimport {\n    setRectangleColorAction,\n    setRectangleHeightAction, setRectangleOpacityAction,\n    setRectangleRotateAction,\n    setRectangleWidthAction,\n    setRectangleXAction,\n    setRectangleYAction\n} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    x: formRectangleXSelector(state),\n    y: formRectangleYSelector(state),\n    rotate: formRectangleRotateSelector(state),\n    width: formRectangleWidthSelector(state),\n    height: formRectangleHeightSelector(state),\n    color: formRectangleColorSelector(state),\n    opacity: formRectangleOpacitySelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setRectangleY: (data: number) => dispatch(setRectangleYAction(data)),\n    setRectangleX: (data: number) => dispatch(setRectangleXAction(data)),\n    setRectangleRotate: (data: number) => dispatch(setRectangleRotateAction(data)),\n    setRectangleWidth: (data: number) => dispatch(setRectangleWidthAction(data)),\n    setRectangleHeight: (data: number) => dispatch(setRectangleHeightAction(data)),\n    setRectangleColor: (data: string) => dispatch(setRectangleColorAction(data)),\n    setRectangleOpacity: (data: number) => dispatch(setRectangleOpacityAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertRectangle);","import \"./App.css\";\n\nimport * as React from \"react\";\nimport {CssBaseline, ExpansionPanel, ExpansionPanelDetails, Grid, Typography} from \"@material-ui/core\";\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core/styles\";\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport PdfPreviewContainer from \"../pdf/preview/PdfPreviewContainer\";\nimport PdfDownloadContainer from \"../pdf/download/PdfDownloadContainer\";\nimport Scaffolder from \"./Scaffolder\";\nimport PdfInsertPageContainer from \"../pdf/modify/insert/PdfInsertPageContainer\";\nimport PdfDeletePageContainer from \"../pdf/modify/delete/PdfDeletePageContainer\";\nimport PdfInsertTextContainer from \"../pdf/modify/text/PdfInsertTextContainer\";\nimport PdfRotationPageContainer from \"../pdf/modify/rotation/PdfRotationPageContainer\";\nimport PdfInsertRectangleContainer from \"../pdf/modify/rectangle/PdfInsertRectangleContainer\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {main: \"#ee3f3f\"},\n        secondary: {main: \"#a09f9f\"},\n        // type: 'dark',\n    }\n});\n\nclass App extends React.PureComponent {\n\n    public render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline/>\n                <Scaffolder>\n                    <Grid container={true} spacing={3}>\n                        <Grid item={true} xs={3}>\n                            <PdfDownloadContainer/>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Insert page</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertPageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Delete</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfDeletePageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Add text</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertTextContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Add rectangle</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertRectangleContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Rotate</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfRotationPageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        </Grid>\n                        <Grid item={true} xs={9}>\n                            <PdfPreviewContainer/>\n                        </Grid>\n                    </Grid>\n                </Scaffolder>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {getEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo, IPdfWithVersion} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\nexport const setPdfReducer = handleActions<any, any>(\n    {\n        [ActionTypes.load]: (state: IPdfWithVersion, action: Action<IPdfInfo>) => {\n            return update(state, {\n                versions: {$splice: [[state.position + 1, state.versions.length, action.payload as IPdfInfo]]},\n                position: {$set: state.position + 1}\n            })\n        },\n        [ActionTypes.selectPage]: (state: IPdfWithVersion, action: Action<number>) => {\n            const position = state.position\n            return update(state, {versions: {[position]: {selectedPage: {$set: action.payload}}}})\n        },\n        [ActionTypes.changeVersion]: (state: IPdfWithVersion, action: Action<number>) => {\n            const position = state.position\n            return update(state, {position: {$set: position + action.payload}})\n        },\n    },\n    {versions: [getEmpty()], position: 0} as IPdfWithVersion\n);\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {combineReducers} from \"redux\";\nimport {IRectangleOption, ITextOption} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\n\nexport const setRemoveReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setRemove]: (state: string, action: Action<string>) => {\n            return action.payload\n        },\n    },\n    \"\"\n);\n\nexport const setInsertReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setInsert]: (state: string, action: Action<string>) => {\n            return action.payload\n        },\n    },\n    \"\"\n);\n\nexport const setTextOptionReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setTextColor]: (state: ITextOption, action: Action<string>) => {\n            return update(state, {color: {$set: action.payload}})\n        },\n        [ActionTypes.setTextRotate]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {rotate: {$set: action.payload}})\n        },\n        [ActionTypes.setTextSize]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {size: {$set: action.payload}})\n        },\n        [ActionTypes.setTextX]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {x: {$set: action.payload}})\n        },\n        [ActionTypes.setTextY]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {y: {$set: action.payload}})\n        },\n        [ActionTypes.setText]: (state: ITextOption, action: Action<string>) => {\n            return update(state, {text: {$set: action.payload}})\n        },\n    },\n    {color: \"\", rotate: 0, size: 12, x: 0, y: 0, text: \"\"} as ITextOption\n);\n\nexport const setRectangleOptionReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setRectangleRotate]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {rotate: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleX]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {x: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleY]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {y: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleWidth]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {width: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleHeight]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {height: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleColor]: (state: IRectangleOption, action: Action<string>) => {\n            return update(state, {color: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleOpacity]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {opacity: {$set: action.payload}})\n        },\n    },\n    {rotate: 0, x: 0, y: 0, width: 10, height: 10, color: \"\", opacity: 1} as IRectangleOption\n);\n\nexport const setFormReducer = combineReducers({\n    remove: setRemoveReducer,\n    insert: setInsertReducer,\n    textOption: setTextOptionReducer,\n    rectangleOption: setRectangleOptionReducer\n})\n\n\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {combineReducers} from \"redux\";\nimport {View} from \"../../../state/models\";\n\n\nexport const setViewReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setView]: (state: View, action: Action<View>) => {\n            return action.payload as View\n        },\n    },\n    \"zoom\" as View\n);\n\nexport const setDisplayReducer = combineReducers({\n    view: setViewReducer,\n})\n\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {setPdfReducer} from \"../pdf/redux/pdf/reducers\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {setFormReducer} from \"../pdf/redux/form/reducers\";\nimport {setDisplayReducer} from \"../pdf/redux/display/reducers\";\n\nconst rootReducer = combineReducers({\n    pdf: setPdfReducer,\n    form: setFormReducer,\n    display: setDisplayReducer\n})\n\nexport const store = createStore(rootReducer, composeWithDevTools(\n    applyMiddleware()\n))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {pdfjs} from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 79;"],"sourceRoot":""}