{"version":3,"sources":["utils/Uint8ArrayUtils.tsx","pdf/loader/PdfLoader.tsx","pdf/redux/pdf/actions.ts","pdf/loader/PdfLoaderContainer.ts","pdf/redux/pdf/selectors.ts","utils/pdfUtils.tsx","pdf/preview/PdfPage.tsx","pdf/preview/PdfPageContainer.ts","pdf/preview/PdfPreview.tsx","pdf/preview/PdfPreviewContainer.ts","pdf/download/PdfDownload.tsx","pdf/download/PdfDownloadContainer.ts","components/Scaffolder.tsx","pdf/modify/insert/PdfInsertPage.tsx","pdf/redux/form/selectors.ts","pdf/redux/form/actions.ts","pdf/modify/insert/PdfInsertPageContainer.ts","utils/stringUtils.tsx","pdf/modify/delete/PdfDeletePage.tsx","pdf/modify/delete/PdfDeletePageContainer.ts","components/App.tsx","serviceWorker.js","pdf/redux/pdf/reducers.ts","pdf/redux/form/reducers.ts","state/store.tsx","index.tsx","../node_modules/pdfjs-dist/build sync"],"names":["isEmpty","pdf","pageCount","PdfLoader","read","files","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","_this","toInfo","then","r","props","load","readAsArrayBuffer","existingPdfBytes","PDFDocument","doc","getPageCount","save","data","selectedPage","_this2","this","classes","react_default","a","createElement","Fragment","dist_es","onDrop","acceptedFiles","accept","multiple","_ref","getRootProps","getInputProps","className","dropzone","PureComponent","ActionTypes","component","selectPage","loadPdfAction","createAction","selectPageAction","withStyles","theme","createStyles","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","palette","secondary","main","borderStyle","backgroundColor","color","outline","withTheme","connect","state","dispatch","pdfSelector","pdfPageCountSelector","pdfSelectedPageSelector","_callee","index","regenerator_default","wrap","_context","prev","next","sent","insertPage","abrupt","update","$set","stop","removePage","_x3","_x4","_removePage","apply","arguments","_callee2","_context2","removePages","_x5","_x6","_removePages","_callee3","indexes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context3","undefined","reverse","Symbol","iterator","done","value","t0","return","finish","length","PdfPage","event","_this$props","scale","selected","onClick","top","center","toLocaleString","IconButton","aria-label","right","Delete_default","fontSize","entry","page","width","height","pageIndex","border","concat","margin","primary","& > canvas","justifyContent","textAlign","PdfPreview","noPdf","before","Array","from","keys","slice","after","PdfLoaderContainer","Grid","container","spacing","item","xs","map","PdfPageContainer","key","PdfDownload","download","Button","variant","style","disabled","Scaffolder","react","AppBar","elevation","position","Toolbar","Typography","content","children","React","PdfInsertPage","insert","pos","isNaN","_x","_x2","_insertPage","setInsert","target","TextField","label","type","onChange","InputLabelProps","shrink","startIcon","Add_default","formSelector","form","formRemoveSelector","remove","formInsertSelector","set","setRemove","setFormRemoveAction","setFormInsertAction","intervalExp","RegExp","isInterval","test","getInterval","exec","PdfDeletePage","interval","toRemove","isDisabled","placeholder","Component","createMuiTheme","App","ThemeProvider","CssBaseline","components_Scaffolder","PdfDownloadContainer","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","ExpansionPanelDetails","PdfInsertPageContainer","PdfDeletePageContainer","PdfPreviewContainer","Boolean","window","location","hostname","match","setPdfReducer","handleActions","_handleActions","Object","defineProperty","action","payload","Uint8Array","setFormReducer","reducers_handleActions","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","pdfjs","GlobalWorkerOptions","workerSrc","version","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","e","Error","code","resolve","module","exports","id"],"mappings":"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","file":"static/js/main.586cb83e.chunk.js","sourcesContent":["import {IPdfInfo} from \"../state/models\";\n\nexport const getEmpty = (): IPdfInfo => {\n    return {data: new Uint8Array(0), pageCount: 0, selectedPage: 0};\n}\n\nexport const isEmpty = (pdf: IPdfInfo) => {\n    return pdf.pageCount === 0;\n}","import React, {PureComponent} from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport {PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {WithStyles} from \"@material-ui/core\";\n\ninterface IPdfLoaderProps extends WithStyles {\n    load: (data: IPdfInfo) => void\n}\n\nexport default class PdfLoader extends PureComponent<IPdfLoaderProps> {\n\n    async toInfo(existingPdfBytes: string | ArrayBuffer): Promise<IPdfInfo> {\n        const doc = await PDFDocument.load(existingPdfBytes)\n        let pageCount = doc.getPageCount();\n        const data = await doc.save();\n        return {data, pageCount, selectedPage: 0}\n    }\n\n    private read = (files: File[]) => {\n        const file = files[0]\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = () => {\n            const binaryStr = reader.result\n            if (binaryStr != null) this.toInfo(binaryStr).then(r => this.props.load(r))\n        }\n        reader.readAsArrayBuffer(file)\n    };\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <Dropzone onDrop={acceptedFiles => this.read(acceptedFiles)} accept={\".pdf\"} multiple={false}>\n                    {({getRootProps, getInputProps}) => (\n                        <section>\n                            <div {...getRootProps({className: classes.dropzone})}>\n                                <input {...getInputProps()} />\n                                <p>Drag 'n' drop some files here, or click to select files</p>\n                            </div>\n                        </section>\n                    )}\n                </Dropzone>\n            </React.Fragment>\n        )\n    }\n}","import {createAction} from \"redux-actions\";\nimport {IPdfInfo} from \"../../../state/models\";\n\nconst component = \"pdf/\";\n\nexport const ActionTypes = {\n    load: component + \"load\",\n    selectPage: component + \"select\",\n};\n\nexport const loadPdfAction = createAction<IPdfInfo>(ActionTypes.load);\nexport const selectPageAction = createAction<number>(ActionTypes.selectPage);","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport PdfLoader from \"./PdfLoader\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {loadPdfAction} from \"../redux/pdf/actions\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        dropzone: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            padding: \"20px\",\n            borderWidth: \"2px\",\n            borderRadius: \"2px\",\n            borderColor: theme.palette.secondary.main,\n            borderStyle: \"dashed\",\n            backgroundColor: \"#fafafa\",\n            color: theme.palette.secondary.main,\n            outline: \"none\",\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfLoader));","import {IStoreState} from \"../../../state/models\";\n\nexport const pdfSelector = (state: IStoreState) => state.pdf;\nexport const pdfDataSelector = (state: IStoreState) => pdfSelector(state).data;\nexport const pdfPageCountSelector = (state: IStoreState) => pdfSelector(state).pageCount;\nexport const pdfSelectedPageSelector = (state: IStoreState) => pdfSelector(state).selectedPage;\n","import {PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo} from \"../state/models\";\nimport update from 'immutability-helper';\n\nexport async function insertPage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    doc.insertPage(index);\n    let data = await doc.save();\n    return update(state, {data: {$set: data}, pageCount: {$set: state.pageCount + 1}, selectedPage: {$set: index}})\n}\n\nexport async function removePage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    return removePages(state, [index]);\n}\n\n/**\n * @param indexes must be ordered !\n */\nexport async function removePages(state: IPdfInfo, indexes: number[]): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    for (let index of indexes.reverse()) {\n        doc.removePage(index);\n    }\n    let data = await doc.save();\n    return update(state, {data: {$set: data}, pageCount: {$set: state.pageCount - (indexes.length)}})\n}\n","import React, {PureComponent} from \"react\";\nimport {Page} from \"react-pdf\";\nimport {IconButton, WithStyles} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {IPdfInfo} from \"../../state/models\";\nimport {removePage} from \"../../utils/pdfUtils\";\n\ninterface IPdfPageProps extends WithStyles {\n    selectPage: (index: number) => void;\n    load: (data: IPdfInfo) => void;\n\n    pageCount: number;\n    pdf: IPdfInfo;\n\n    index: number;\n    selected: boolean;\n    scale: number;\n}\n\n\nexport default class PdfPage extends PureComponent<IPdfPageProps> {\n    private selectPage = (event: React.MouseEvent<any>) => this.props.selectPage(this.props.index)\n    private removePage = (event: React.MouseEvent<any>) => removePage(this.props.pdf, this.props.index)\n        .then(this.props.load)\n\n    public render() {\n        const {index, classes, scale, selected, pageCount} = this.props;\n\n        return (\n            <div onClick={this.selectPage} className={selected ? classes.selected : classes.main}>\n                <div className={classes.top}>\n                    <div className={classes.center}>\n                        {(index + 1).toLocaleString()}/{pageCount.toLocaleString()}\n                    </div>\n                    <IconButton aria-label=\"delete\" className={classes.right} onClick={this.removePage}>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </div>\n                <Page className={classes.page} width={420} height={594} scale={scale}\n                      pageIndex={index}/>\n            </div>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {pdfPageCountSelector, pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport PdfPage from \"./PdfPage\"\nimport {loadPdfAction, selectPageAction} from \"../redux/pdf/actions\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        main: {\n            border: `1px solid ${theme.palette.secondary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        selected: {\n            border: `1px solid ${theme.palette.primary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        page: {\n            \"& > canvas\": {\n                border: `1px solid ${theme.palette.secondary.main}`,\n            },\n            margin: 5\n        },\n        top: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n        },\n        center: {\n            flex: 1,\n            textAlign: \"center\"\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    selectedPage: pdfSelectedPageSelector(state),\n    pageCount: pdfPageCountSelector(state),\n    pdf: pdfSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPage));","import React, {PureComponent} from \"react\";\nimport {Document} from \"react-pdf\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport PdfLoaderContainer from \"../loader/PdfLoaderContainer\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {Grid, WithStyles} from \"@material-ui/core\";\nimport PdfPageContainer from \"./PdfPageContainer\";\n\ninterface IPdfPreviewProps extends WithStyles {\n    pdf: IPdfInfo;\n    selectedPage: number;\n}\n\n\nexport default class PdfPreview extends PureComponent<IPdfPreviewProps> {\n\n    public render() {\n        const {pdf, selectedPage} = this.props;\n        const noPdf = isEmpty(pdf);\n\n        const before = Array.from(Array(pdf.selectedPage).keys()).slice(-2)\n        const after = Array.from(Array(pdf.pageCount).keys()).slice(selectedPage, selectedPage + 3)\n\n        return (\n            <React.Fragment>\n                {noPdf && <PdfLoaderContainer/>}\n                {!noPdf && <Document file={{data: pdf.data}}>\n                    <Grid container={true} spacing={3}>\n                        <Grid item={true} xs={3}>\n                            {before.map((index) => (\n                                    index !== selectedPage &&\n                                    <PdfPageContainer key={index} selected={false} index={index} scale={0.5}/>\n                                )\n                            )}\n                        </Grid>\n                        <Grid item={true} xs={6}>\n                            <PdfPageContainer selected={true} index={selectedPage} scale={1}/>\n                        </Grid>\n                        <Grid item={true} xs={3}>\n                            {after.map((index) => (\n                                    index !== selectedPage &&\n                                    <PdfPageContainer key={index} selected={false} index={index} scale={0.5}/>\n                                )\n                            )}\n                        </Grid>\n                    </Grid>\n                </Document>}\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfPreview from \"./PdfPreview\";\nimport {pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    selectedPage: pdfSelectedPageSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({});\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(PdfPreview));","import React, {PureComponent} from \"react\";\nimport download from \"downloadjs\";\nimport {Button} from \"@material-ui/core\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo} from \"../../state/models\";\n\ninterface IPdfPreviewProps {\n    pdf: IPdfInfo;\n}\n\nexport default class PdfDownload extends PureComponent<IPdfPreviewProps> {\n\n    private download = () => {\n        download(this.props.pdf.data, \"download.pdf\", \"application/pdf\");\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.download} style={{margin: \"0 10px 10px 0\"}}\n                        disabled={isEmpty(this.props.pdf)}>\n                    Download\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfDownload from \"./PdfDownload\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDownload);","import * as React from \"react\";\nimport {AppBar, createStyles, Grid, Paper, Theme, Toolbar, Typography, withStyles, WithStyles} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            height: \"calc(100%-64px)\",\n            padding: 40,\n        }\n    })\n\nclass Scaffolder extends React.PureComponent<WithStyles> {\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <AppBar elevation={0} position={\"static\"}>\n                    <Toolbar>\n                        <Typography variant=\"h6\">\n                            pdfModer\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <main className={classes.content}>\n                    {this.props.children}\n                </main>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(Scaffolder);\n","import React, {ChangeEvent, PureComponent} from \"react\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport {insertPage} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport PlusIcon from '@material-ui/icons/';\nimport AddIcon from '@material-ui/icons/Add';\n\ninterface IPdfInsertProps {\n    pdf: IPdfInfo;\n    insert: string;\n\n    load: (data: IPdfInfo) => void;\n    setInsert: (data: string) => void;\n}\n\nexport default class PdfInsertPage extends PureComponent<IPdfInsertProps> {\n\n    private insert = () => {\n        const pos = this.props.insert;\n        if (!isNaN(+pos)) {\n            insertPage(this.props.pdf, +pos - 1).then(this.props.load)\n        }\n    }\n\n    private setInsert = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        this.props.setInsert(event.target.value)\n    }\n\n    public render() {\n        const {insert} = this.props;\n        return (\n            <React.Fragment>\n                <TextField\n                    label=\"Before page\"\n                    type=\"text\"\n                    value={insert}\n                    onChange={this.setInsert}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                        style={{margin: \"0 10px 10px 0\"}} disabled={isEmpty(this.props.pdf) || isNaN(+insert)}\n                        startIcon={<AddIcon/>}>\n                    Insert new page\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {IStoreState} from \"../../../state/models\";\n\nexport const formSelector = (state: IStoreState) => state.form;\nexport const formRemoveSelector = (state: IStoreState) => formSelector(state).remove;\nexport const formInsertSelector = (state: IStoreState) => formSelector(state).insert;\n","import {createAction} from \"redux-actions\";\nimport {IForm} from \"../../../state/models\";\n\nconst component = \"form/\";\n\nexport const ActionTypes = {\n    set: component + \"set\",\n    setRemove: component + \"setRemove\",\n    setInsert: component + \"setInsert\",\n};\n\nexport const setFormAction = createAction<IForm>(ActionTypes.set);\nexport const setFormRemoveAction = createAction<string>(ActionTypes.setRemove);\nexport const setFormInsertAction = createAction<string>(ActionTypes.setInsert);\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertPage from \"./PdfInsertPage\";\nimport {formInsertSelector} from \"../../redux/form/selectors\";\nimport {setFormInsertAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    insert: formInsertSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setInsert: (data: string) => dispatch(setFormInsertAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertPage);","import {IPdfInfo} from \"../state/models\";\n\nconst intervalExp = new RegExp('^([0-9]+)-([0-9]+)$');\n\nexport const isInterval = (value: string) => {\n    return intervalExp.test(value)\n}\n\nexport const getInterval = (value: string) => {\n    let exec = intervalExp.exec(value) as RegExpExecArray;\n    return [+exec[1], +exec[2]]\n}","import React, {ChangeEvent, Component} from \"react\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport {removePage, removePages} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {getInterval, isInterval} from \"../../../utils/stringUtils\";\n\n\ninterface IPdfDeleteProps {\n    pdf: IPdfInfo;\n    remove: string;\n\n    load: (data: IPdfInfo) => void;\n    setRemove: (data: string) => void;\n}\n\nexport default class PdfDeletePage extends Component<IPdfDeleteProps> {\n\n    private remove = () => {\n        const pos = this.props.remove;\n        if (!isNaN(+pos)) {\n            const position = +pos - 1\n            removePage(this.props.pdf, position).then(this.props.load)\n        } else if (isInterval(pos)) {\n            const interval = getInterval(pos);\n            const toRemove = Array.from(Array(interval[1]).keys()).slice(interval[0] - 1);\n            removePages(this.props.pdf, toRemove).then(this.props.load)\n        }\n    }\n\n    private setRemove = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) =>\n        this.props.setRemove(event.target.value)\n\n    private isDisabled = () => isEmpty(this.props.pdf) || (isNaN(+this.props.remove) && !isInterval(this.props.remove))\n\n    public render() {\n        const {pdf, remove} = this.props;\n        return (\n            <React.Fragment>\n                <TextField\n                    label={\"Pages to delete\"}\n                    type={\"text\"}\n                    value={remove}\n                    onChange={this.setRemove}\n                    placeholder={\"ex: 5-8 or 8\"}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.remove}\n                        style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                        startIcon={<DeleteIcon/>}>\n                    Delete\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfDeletePage from \"./PdfDeletePage\";\nimport {formRemoveSelector} from \"../../redux/form/selectors\";\nimport {setFormRemoveAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    remove: formRemoveSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setRemove: (data: string) => dispatch(setFormRemoveAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDeletePage);","import \"./App.css\";\n\nimport * as React from \"react\";\nimport {CssBaseline, ExpansionPanel, ExpansionPanelDetails, Grid, Typography} from \"@material-ui/core\";\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core/styles\";\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport PdfPreviewContainer from \"../pdf/preview/PdfPreviewContainer\";\nimport PdfDownloadContainer from \"../pdf/download/PdfDownloadContainer\";\nimport Scaffolder from \"./Scaffolder\";\nimport PdfInsertPageContainer from \"../pdf/modify/insert/PdfInsertPageContainer\";\nimport PdfDeletePageContainer from \"../pdf/modify/delete/PdfDeletePageContainer\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {main: \"#ee3f3f\"},\n        secondary: {main: \"#a09f9f\"},\n        // type: 'dark',\n    }\n});\n\nclass App extends React.PureComponent {\n\n    public render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline/>\n                <Scaffolder>\n                    <Grid container={true} spacing={3}>\n                        <Grid item={true} xs={4}>\n                            <PdfDownloadContainer/>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Insert</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertPageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Delete</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfDeletePageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        </Grid>\n                        <Grid item={true} xs={8}>\n                            <PdfPreviewContainer/>\n                        </Grid>\n                    </Grid>\n                </Scaffolder>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {getEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport {IForm, IPdfInfo} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\nexport const setPdfReducer = handleActions<any, any>(\n    {\n        [ActionTypes.load]: (state: IPdfInfo, action: Action<IPdfInfo>) => {\n            return action.payload as IPdfInfo;\n        },\n        [ActionTypes.selectPage]: (state: IPdfInfo, action: Action<number>) => {\n            return update(state, {selectedPage: {$set: action.payload}})\n        },\n    },\n    getEmpty()\n);\n\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {IForm} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\nexport const setFormReducer = handleActions<any, any>(\n    {\n        [ActionTypes.set]: (state: IForm, action: Action<IForm>) => {\n            return action.payload as IForm;\n        },\n        [ActionTypes.setRemove]: (state: IForm, action: Action<string>) => {\n            return update(state, {remove: {$set: action.payload}}) as IForm\n        },\n        [ActionTypes.setInsert]: (state: IForm, action: Action<string>) => {\n            return update(state, {insert: {$set: action.payload}}) as IForm\n        }\n    },\n    {remove: \"\", insert: \"1\"} as IForm\n);\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {setPdfReducer} from \"../pdf/redux/pdf/reducers\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {setFormReducer} from \"../pdf/redux/form/reducers\";\n\nconst rootReducer = combineReducers({\n    pdf: setPdfReducer,\n    form: setFormReducer\n})\n\nexport const store = createStore(rootReducer, composeWithDevTools(\n    applyMiddleware()\n))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from \"./serviceWorker\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport { pdfjs } from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 80;"],"sourceRoot":""}