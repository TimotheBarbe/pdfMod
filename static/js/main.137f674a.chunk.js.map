{"version":3,"sources":["utils/Uint8ArrayUtils.tsx","utils/stringUtils.tsx","utils/pdfUtils.tsx","pdf/loader/PdfLoader.tsx","pdf/redux/pdf/actions.ts","pdf/redux/pdf/selectors.ts","pdf/loader/PdfLoaderContainer.ts","pdf/preview/PdfPage.tsx","pdf/preview/PdfPageContainer.ts","pdf/loader/PdfCreateBlankDoc.tsx","pdf/loader/PdfCreateBlankDocContainer.ts","pdf/preview/PdfPreview.tsx","pdf/redux/display/selectors.ts","pdf/preview/PdfPreviewContainer.ts","pdf/download/PdfDownload.tsx","pdf/download/PdfDownloadContainer.ts","components/version/VersionSelector.tsx","components/version/VersionSelectorContainer.ts","components/view/ViewSelector.tsx","pdf/redux/display/actions.ts","components/view/ViewSelectorContainer.ts","components/Scaffolder.tsx","utils/formUtils.tsx","pdf/modify/insert/PdfInsertPage.tsx","pdf/redux/form/selectors.ts","pdf/redux/form/actions.ts","pdf/modify/insert/PdfInsertPageContainer.ts","pdf/modify/delete/PdfDeletePage.tsx","pdf/modify/delete/PdfDeletePageContainer.ts","pdf/modify/text/PdfInsertText.tsx","pdf/modify/text/PdfInsertTextContainer.ts","pdf/modify/rotation/PdfRotationPage.tsx","pdf/modify/rotation/PdfRotationPageContainer.ts","pdf/modify/rectangle/PdfInsertRectangle.tsx","pdf/modify/rectangle/PdfInsertRectangleContainer.ts","pdf/modify/move/PdfMovePage.tsx","pdf/modify/move/PdfMovePageContainer.ts","components/App.tsx","serviceWorker.js","pdf/redux/pdf/reducers.ts","pdf/redux/form/reducers.ts","pdf/redux/display/reducers.ts","state/store.tsx","index.tsx","../node_modules/pdfjs-dist/build sync"],"names":["isEmpty","pdf","pageCount","intervalExp","RegExp","isInterval","value","test","getInterval","exec","toRgb","hex","replace","m","r","g","b","result","getValue","v","parseInt","rgb","_callee","doc","data","regenerator_default","a","wrap","_context","prev","next","PDFDocument","create","sent","addPage","save","abrupt","selectedPage","stop","_callee2","state","index","_context2","load","insertPage","update","$set","removePage","_x3","_x4","_removePage","apply","this","arguments","_callee3","_context3","removePages","_x5","_x6","_removePages","_callee4","indexes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context4","undefined","reverse","Symbol","iterator","done","t0","return","finish","length","_callee5","from","to","page","_context5","getPage","loadPdf","_x10","_loadPdf","_callee6","toLoad","_context6","getPageCount","mergePdf","_x11","_x12","_mergePdf","_callee7","start","end","startDoc","endDoc","contentPages","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context7","copyPages","getPageIndices","_callee8","_context8","then","_callee9","option","color","rotate","size","x","y","text","_context9","drawText","degrees","lineHeight","_callee10","width","height","opacity","_context10","drawRectangle","borderWidth","_callee11","angle","_context11","setRotation","getRotation","PdfLoader","read","files","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","_x13","_x14","_loadAndMerge","loadAndMerge","_this","props","readAsArrayBuffer","_this2","classes","react_default","createElement","Fragment","dist_es","onDrop","acceptedFiles","accept","multiple","_ref","getRootProps","getInputProps","className","dropzone","PureComponent","ActionTypes","component","selectPage","changeVersion","loadPdfAction","createAction","selectPageAction","pdfWithVersionSelector","pdfSelector","versions","position","pdfSelectorCanPrevious","pdfSelectorCanNext","pdfPageCountSelector","pdfSelectedPageSelector","withStyles","theme","createStyles","flex","display","flexDirection","alignItems","padding","borderRadius","borderColor","palette","secondary","main","borderStyle","backgroundColor","outline","withTheme","connect","dispatch","PdfPage","event","stopPropagation","_this$props","scale","selected","onClick","top","center","toLocaleString","IconButton","aria-label","right","Delete_default","fontSize","entry","pageIndex","renderAnnotationLayer","key","concat","border","margin","primary","& > canvas","justifyContent","textAlign","PdfCreateBlankDoc","createNew","_createBlank","createBlank","Button","variant","style","startIcon","Add_default","PdfPreview","view","noPdf","before","Array","keys","slice","all","after","Grid","container","spacing","item","xs","PdfCreateBlankDocContainer","PdfLoaderContainer","disabled","ArrowBack_default","map","PdfPageContainer","content","ArrowForward_default","displayViewSelector","displaySelector","maxWidth","maxHeight","overflow","PdfDownload","download","VersionSelector","change","canPrevious","canNext","Undo_default","Typography","Redo_default","marginLeft","marginRight","ViewSelector","handleAlignment","setView","group","ToggleButtonGroup","exclusive","onChange","ToggleButton","ViewList_default","ZoomIn_default","setDisplayViewAction","Scaffolder","react","AppBar","elevation","Toolbar","VersionSelectorContainer","ViewSelectorContainer","Divider","orientation","flexItem","href","target","GitHub_default","children","React","setString","setter","setNumber","PdfInsertPage","insert","pos","isNaN","_x","_x2","_insertPage","isDisabled","isNotValidNumber","setInsert","TextField","label","type","InputLabelProps","shrink","formSelector","form","formRemoveSelector","remove","formMoveSelector","move","formInsertSelector","formTextOptionSelector","textOption","formTextXSelector","formTextYSelector","formTextRotateSelector","formTextColorSelector","formTextSizeSelector","formTextSelector","formRectangleOptionSelector","rectangleOption","formRectangleXSelector","formRectangleYSelector","formRectangleRotateSelector","formRectangleHeightSelector","formRectangleWidthSelector","formRectangleColorSelector","formRectangleOpacitySelector","set","setRemove","setMove","setTextColor","setTextY","setTextX","setTextSize","setTextRotate","setText","setRectangleY","setRectangleX","setRectangleRotate","setRectangleHeight","setRectangleWidth","setRectangleColor","setRectangleOpacity","setFormRemoveAction","setFormMoveAction","setFormInsertAction","setTextColorAction","setTextYAction","setTextXAction","setTextSizeAction","setTextRotateAction","setTextAction","setRectangleYAction","setRectangleXAction","setRectangleHeightAction","setRectangleWidthAction","setRectangleRotateAction","setRectangleColorAction","setRectangleOpacityAction","PdfDeletePage","interval","toRemove","placeholder","Component","PdfInsertText","_x15","_x16","_drawText","multiline","rows","fullWidth","inputProps","min","id","name","PdfRotationPage","_x19","_x20","_rotatePage","rotatePage","RotateLeft_default","endIcon","RotateRight_default","PdfInsertRectangle","_x17","_x18","_drawRectangle","step","max","PdfMovePage","setMoveFrom","setMoveTo","_x7","_x8","_x9","_movePage","movePage","isValidNumber","TrendingFlat_default","createMuiTheme","App","ThemeProvider","CssBaseline","components_Scaffolder","PdfDownloadContainer","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","ExpansionPanelDetails","PdfInsertPageContainer","PdfMovePageContainer","PdfDeletePageContainer","PdfInsertTextContainer","PdfInsertRectangleContainer","PdfRotationPageContainer","PdfPreviewContainer","Boolean","window","location","hostname","match","setPdfReducer","handleActions","_handleActions","Object","defineProperty","action","$splice","payload","Uint8Array","setRemoveReducer","setMoveReducer","setInsertReducer","setTextOptionReducer","_handleActions4","setRectangleOptionReducer","_handleActions5","setFormReducer","combineReducers","setViewReducer","setDisplayReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","pdfjs","GlobalWorkerOptions","workerSrc","version","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","e","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.137f674a.chunk.js","sourcesContent":["import {IPdfInfo} from \"../state/models\";\n\nexport const getEmpty = (): IPdfInfo => {\n    return {data: new Uint8Array(0), pageCount: 0, selectedPage: 0};\n}\n\nexport const isEmpty = (pdf: IPdfInfo) => {\n    return pdf.pageCount === 0;\n}","import {rgb} from \"pdf-lib\";\n\nconst intervalExp = new RegExp('^([0-9]+)-([0-9]+)$');\n\nexport const isInterval = (value: string) => {\n    return intervalExp.test(value)\n}\n\nexport const getInterval = (value: string) => {\n    let exec = intervalExp.exec(value) as RegExpExecArray;\n    return [+exec[1], +exec[2]]\n}\n\nexport const toRgb = (hex: string) => {\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    function getValue(v: string) {\n        return parseInt(v, 16) / 255;\n    }\n\n    return result ? rgb(getValue(result[1]), getValue(result[2]), getValue(result[3])) : rgb(0, 0, 0);\n}","import {degrees, PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo, IRectangleOption, ITextOption} from \"../state/models\";\nimport update from 'immutability-helper';\nimport {isEmpty} from \"./Uint8ArrayUtils\";\nimport {toRgb} from \"./stringUtils\";\n\nexport async function createBlank(): Promise<IPdfInfo> {\n    const doc = await PDFDocument.create()\n    doc.addPage()\n    const data = await doc.save();\n    return {data, pageCount: 1, selectedPage: 0} as IPdfInfo\n}\n\nexport async function insertPage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    doc.insertPage(index);\n    const data = await doc.save();\n    return update(state, {data: {$set: data}, pageCount: {$set: state.pageCount + 1}, selectedPage: {$set: index}})\n}\n\nexport async function removePage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    return removePages(state, [index]);\n}\n\n/**\n * @param indexes must be ordered !\n */\nexport async function removePages(state: IPdfInfo, indexes: number[]): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    for (const index of indexes.reverse()) {\n        doc.removePage(index);\n    }\n    const data = await doc.save();\n    return {data, pageCount: state.pageCount - indexes.length, selectedPage: state.selectedPage}\n}\n\nexport async function movePage(state: IPdfInfo, from: number, to: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(from);\n    if (from < to) {\n        doc.removePage(from);\n        doc.insertPage(to, page);\n    } else {\n        doc.insertPage(to, page);\n        doc.removePage(from + 1);\n    }\n    const data = await doc.save();\n    return update(state, {data: {$set: data}}) as IPdfInfo\n}\n\nexport async function loadPdf(toLoad: string | ArrayBuffer): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(toLoad)\n    const pageCount = doc.getPageCount();\n    const data = await doc.save();\n    return {data, pageCount, selectedPage: 0}\n}\n\nexport async function mergePdf(start: IPdfInfo, end: IPdfInfo): Promise<IPdfInfo> {\n    if (isEmpty(start)) return end;\n    const startDoc = await PDFDocument.load(start.data);\n    const endDoc = await PDFDocument.load(end.data);\n    const contentPages = await startDoc.copyPages(endDoc, endDoc.getPageIndices());\n    for (const page of contentPages) {\n        startDoc.addPage(page);\n    }\n    const data = await startDoc.save();\n    return {data, pageCount: start.pageCount + end.pageCount, selectedPage: start.selectedPage}\n}\n\nexport async function loadAndMerge(toLoad: string | ArrayBuffer, start: IPdfInfo): Promise<IPdfInfo> {\n    return loadPdf(toLoad).then(end => mergePdf(start, end))\n}\n\nexport async function drawText(state: IPdfInfo, option: ITextOption): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(state.selectedPage);\n    const {color, rotate, size, x, y, text} = option\n    page.drawText(text, {x, y, rotate: degrees(rotate), size, color: toRgb(color), lineHeight: size})\n    const data = await doc.save();\n    return update(state, {data: {$set: data}})\n}\n\nexport async function drawRectangle(state: IPdfInfo, option: IRectangleOption): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(state.selectedPage);\n    const {rotate, x, y, width, height, color, opacity} = option\n    page.drawRectangle({x, y, rotate: degrees(rotate), color: toRgb(color), width, height, borderWidth: 0, opacity})\n    const data = await doc.save();\n    return update(state, {data: {$set: data}})\n}\n\nexport async function rotatePage(state: IPdfInfo, angle: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(state.selectedPage);\n    page.setRotation(degrees(page.getRotation().angle + angle))\n    const data = await doc.save();\n    return update(state, {data: {$set: data}})\n}","import React, {PureComponent} from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport {PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {WithStyles} from \"@material-ui/core\";\nimport {loadAndMerge, loadPdf, mergePdf} from \"../../utils/pdfUtils\";\n\ninterface IPdfLoaderProps extends WithStyles {\n    load: (data: IPdfInfo) => void;\n    pdf: IPdfInfo;\n}\n\nexport default class PdfLoader extends PureComponent<IPdfLoaderProps> {\n\n    private read = (files: File[]) => {\n        const file = files[0]\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = () => {\n            const binaryStr = reader.result\n            if (binaryStr != null) loadAndMerge(binaryStr, this.props.pdf).then(r => this.props.load(r))\n        }\n        reader.readAsArrayBuffer(file)\n    };\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <Dropzone onDrop={acceptedFiles => this.read(acceptedFiles)} accept={\".pdf\"} multiple={false}>\n                    {({getRootProps, getInputProps}) => (\n                        <section>\n                            <div {...getRootProps({className: classes.dropzone})}>\n                                <input {...getInputProps()} />\n                                <p>Drag 'n' drop some files here, or click to select files</p>\n                            </div>\n                        </section>\n                    )}\n                </Dropzone>\n            </React.Fragment>\n        )\n    }\n}","import {createAction} from \"redux-actions\";\nimport {IPdfInfo} from \"../../../state/models\";\n\nconst component = \"pdf/\";\n\nexport const ActionTypes = {\n    load: component + \"load\",\n    selectPage: component + \"select\",\n    changeVersion: component + \"previousVersion\"\n};\n\nexport const loadPdfAction = createAction<IPdfInfo>(ActionTypes.load);\nexport const selectPageAction = createAction<number>(ActionTypes.selectPage);\nexport const changeVersion = createAction<number>(ActionTypes.changeVersion);","import {IStoreState} from \"../../../state/models\";\n\nexport const pdfWithVersionSelector = (state: IStoreState) => state.pdf\nexport const pdfSelector = (state: IStoreState) => pdfWithVersionSelector(state).versions[pdfWithVersionSelector(state).position];\nexport const pdfSelectorCanPrevious = (state: IStoreState) => pdfWithVersionSelector(state).position > 0;\nexport const pdfSelectorCanNext = (state: IStoreState) => pdfWithVersionSelector(state).position < pdfWithVersionSelector(state).versions.length - 1;\nexport const pdfDataSelector = (state: IStoreState) => pdfSelector(state).data;\nexport const pdfPageCountSelector = (state: IStoreState) => pdfSelector(state).pageCount;\nexport const pdfSelectedPageSelector = (state: IStoreState) => pdfSelector(state).selectedPage;\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport PdfLoader from \"./PdfLoader\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {loadPdfAction} from \"../redux/pdf/actions\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        dropzone: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            padding: \"20px\",\n            borderWidth: \"2px\",\n            borderRadius: \"2px\",\n            borderColor: theme.palette.secondary.main,\n            borderStyle: \"dashed\",\n            backgroundColor: \"#fafafa\",\n            color: theme.palette.secondary.main,\n            outline: \"none\",\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfLoader));","import React, {PureComponent} from \"react\";\nimport {Page} from \"react-pdf\";\nimport {IconButton, WithStyles} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {IPdfInfo} from \"../../state/models\";\nimport {removePage} from \"../../utils/pdfUtils\";\n\ninterface IPdfPageProps extends WithStyles {\n    selectPage: (index: number) => void;\n    load: (data: IPdfInfo) => void;\n\n    pageCount: number;\n    pdf: IPdfInfo;\n\n    index: number;\n    selected: boolean;\n    scale: number;\n}\n\n\nexport default class PdfPage extends PureComponent<IPdfPageProps> {\n    private selectPage = (event: React.MouseEvent<any>) => this.props.selectPage(this.props.index)\n    private removePage = (event: React.MouseEvent<any>) => {\n        event.stopPropagation();\n        removePage(this.props.pdf, this.props.index).then(this.props.load);\n    }\n\n    public render() {\n        const {index, classes, scale, selected, pageCount} = this.props;\n\n        return (\n            <div onClick={this.selectPage} className={selected ? classes.selected : classes.main}>\n                <div className={classes.top}>\n                    <div className={classes.center}>\n                        {(index + 1).toLocaleString()}/{pageCount.toLocaleString()}\n                    </div>\n                    <IconButton aria-label=\"delete\" className={classes.right} onClick={this.removePage}>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </div>\n                <Page className={classes.page} scale={scale} width={595}\n                      pageIndex={index} renderAnnotationLayer={false} key={`page_${index + 1}`}/>\n            </div>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {pdfPageCountSelector, pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport PdfPage from \"./PdfPage\"\nimport {loadPdfAction, selectPageAction} from \"../redux/pdf/actions\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        main: {\n            border: `1px solid ${theme.palette.secondary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        selected: {\n            border: `1px solid ${theme.palette.primary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        page: {\n            \"& > canvas\": {\n                border: `1px solid ${theme.palette.secondary.main}`,\n            },\n            margin: 5\n        },\n        top: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n        },\n        center: {\n            flex: 1,\n            textAlign: \"center\"\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    selectedPage: pdfSelectedPageSelector(state),\n    pageCount: pdfPageCountSelector(state),\n    pdf: pdfSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPage));","import React, {PureComponent} from \"react\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {Button} from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {createBlank} from \"../../utils/pdfUtils\";\n\ninterface IPdfCreateBlankDocProps {\n    load: (data: IPdfInfo) => void;\n}\n\nexport default class PdfCreateBlankDoc extends PureComponent<IPdfCreateBlankDocProps> {\n\n    private createNew = () => {\n        createBlank().then(this.props.load)\n    }\n\n    public render() {\n        return (\n            <Button variant=\"outlined\" color=\"primary\"\n                    style={{margin: \"0 10px 10px 0\"}} onClick={this.createNew}\n                    startIcon={<AddIcon/>}>\n                Create blank PDF\n            </Button>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {loadPdfAction} from \"../redux/pdf/actions\";\nimport PdfCreateBlankDoc from \"./PdfCreateBlankDoc\";\n\n\nconst mapStateToProps = (state: IStoreState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfCreateBlankDoc);","import React, {PureComponent} from \"react\";\nimport {Document} from \"react-pdf\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport PdfLoaderContainer from \"../loader/PdfLoaderContainer\";\nimport {IPdfInfo, View} from \"../../state/models\";\nimport {Grid, IconButton, WithStyles} from \"@material-ui/core\";\nimport PdfPageContainer from \"./PdfPageContainer\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport PdfCreateBlankDocContainer from \"../loader/PdfCreateBlankDocContainer\";\n\ninterface IPdfPreviewProps extends WithStyles {\n    pdf: IPdfInfo;\n    selectedPage: number;\n    view: View;\n\n    selectPage: (index: number) => void;\n}\n\n\nexport default class PdfPreview extends PureComponent<IPdfPreviewProps> {\n    private selectPage = (index: number) => (event: React.MouseEvent<any>) => this.props.selectPage(index)\n\n    public render() {\n        const {pdf, selectedPage, view, classes} = this.props;\n        const noPdf = isEmpty(pdf);\n\n        const before = Array.from(Array(pdf.selectedPage).keys()).slice(-2)\n        const all = Array.from(Array(pdf.pageCount).keys())\n        const after = all.slice(selectedPage, selectedPage + 3)\n\n        return (\n            <React.Fragment>\n                {noPdf &&\n                <Grid container={true} spacing={3}>\n                    <Grid item={true} xs={2}>\n                        <PdfCreateBlankDocContainer/>\n                    </Grid>\n                    <Grid item={true} xs={10}>\n                        <PdfLoaderContainer/>\n                    </Grid>\n                </Grid>}\n                {!noPdf && <Document file={{data: pdf.data}}>\n                    <Grid container={true} spacing={3}>\n                        {view === \"zoom\" &&\n                        <React.Fragment>\n                            <Grid item={true} xs={2}>\n                                <IconButton aria-label=\"previous\" disabled={selectedPage <= 0}\n                                            onClick={this.selectPage(selectedPage - 1)}>\n                                    <ArrowBackIcon fontSize=\"small\"/>\n                                </IconButton>\n                                {before.map((index) => (\n                                        index !== selectedPage &&\n                                        <PdfPageContainer key={index} selected={false} index={index} scale={0.2}/>\n                                    )\n                                )}\n                            </Grid>\n                            <Grid item={true} xs={8}>\n                                <div className={classes.content}>\n                                    <PdfPageContainer selected={true} index={selectedPage} scale={1}/>\n                                </div>\n                            </Grid>\n                            <Grid item={true} xs={2}>\n                                <IconButton aria-label=\"next\" disabled={selectedPage >= pdf.pageCount - 1}\n                                            onClick={this.selectPage(selectedPage + 1)}>\n                                    <ArrowForwardIcon fontSize=\"small\"/>\n                                </IconButton>\n                                {after.map((index) => (\n                                        index !== selectedPage &&\n                                        <PdfPageContainer key={`p_${index + 1}`} selected={false} index={index} scale={0.2}/>\n                                    )\n                                )}\n                            </Grid>\n                        </React.Fragment>}\n                        {view === \"global\" &&\n                        <React.Fragment>\n                            {all.map((index) => (\n                                    <Grid item={true} xs={2} key={index}>\n                                        <PdfPageContainer selected={selectedPage === index} index={index} scale={0.2}/>\n                                    </Grid>\n                                )\n                            )}\n                        </React.Fragment>\n                        }\n                    </Grid>\n                </Document>}\n            </React.Fragment>\n        )\n    }\n}","import {IStoreState} from \"../../../state/models\";\n\nexport const displaySelector = (state: IStoreState) => state.display;\nexport const displayViewSelector = (state: IStoreState) => displaySelector(state).view;\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfPreview from \"./PdfPreview\";\nimport {pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {selectPageAction} from \"../redux/pdf/actions\";\nimport {displayViewSelector} from \"../redux/display/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            maxWidth: \"100%\",\n            maxHeight: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            overflow: \"auto\",\n        }\n    })\n\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    selectedPage: pdfSelectedPageSelector(state),\n    view: displayViewSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPreview));","import React, {PureComponent} from \"react\";\nimport download from \"downloadjs\";\nimport {Button} from \"@material-ui/core\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo} from \"../../state/models\";\n\ninterface IPdfPreviewProps {\n    pdf: IPdfInfo;\n}\n\nexport default class PdfDownload extends PureComponent<IPdfPreviewProps> {\n\n    private download = () => {\n        download(this.props.pdf.data, \"download.pdf\", \"application/pdf\");\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.download} style={{margin: \"0 10px 10px 0\"}}\n                        disabled={isEmpty(this.props.pdf)}>\n                    Download\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfDownload from \"./PdfDownload\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDownload);","import React, {PureComponent} from \"react\";\nimport {Toolbar, Typography, WithStyles} from \"@material-ui/core\";\nimport UndoIcon from '@material-ui/icons/Undo';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport RedoIcon from '@material-ui/icons/Redo';\n\ninterface IVersionSelectorProps extends WithStyles {\n    canPrevious: boolean;\n    canNext: boolean;\n\n    changeVersion: (index: number) => void;\n}\n\nexport default class VersionSelector extends PureComponent<IVersionSelectorProps> {\n\n    private changeVersion = (change: number) => (event: React.MouseEvent<any>) => {\n        event.stopPropagation();\n        this.props.changeVersion(change);\n    }\n\n    public render() {\n        const {classes, canPrevious, canNext} = this.props;\n        return (\n            <div className={classes.center}>\n                <IconButton color={\"inherit\"} onClick={this.changeVersion(-1)} disabled={!canPrevious}>\n                    <UndoIcon/>\n                    <Typography variant=\"subtitle1\">\n                        Undo\n                    </Typography>\n                </IconButton>\n                <IconButton color={\"inherit\"} onClick={this.changeVersion(1)} disabled={!canNext}>\n                    <Typography variant=\"subtitle1\">\n                        Redo\n                    </Typography>\n                    <RedoIcon/>\n                </IconButton>\n            </div>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport VersionSelector from \"./VersionSelector\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {changeVersion} from \"../../pdf/redux/pdf/actions\";\nimport {pdfSelectorCanNext, pdfSelectorCanPrevious} from \"../../pdf/redux/pdf/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        center: {\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    canPrevious: pdfSelectorCanPrevious(state),\n    canNext: pdfSelectorCanNext(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    changeVersion: (index: number) => dispatch(changeVersion(index)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(VersionSelector));","import React, {PureComponent} from \"react\";\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport {View} from \"../../state/models\";\nimport {ToggleButton, ToggleButtonGroup} from \"@material-ui/lab\";\nimport {Typography, WithStyles} from \"@material-ui/core\";\n\ninterface IViewSelectorProps extends WithStyles {\n    view: View;\n\n    setView: (index: View) => void;\n}\n\nexport default class ViewSelector extends PureComponent<IViewSelectorProps> {\n\n    private handleAlignment = (event: React.MouseEvent<HTMLElement>, view: View | null) => {\n        if (view && view !== this.props.view) this.props.setView(view);\n    };\n\n    public render() {\n        const {view, classes} = this.props;\n        return (\n            <div className={classes.group}>\n                <Typography variant=\"subtitle1\" className={classes.text}>\n                    View\n                </Typography>\n                <ToggleButtonGroup\n                    value={view}\n                    exclusive={true}\n                    onChange={this.handleAlignment}\n                    aria-label=\"text alignment\"\n                >\n                    <ToggleButton value=\"global\" aria-label=\"global\" color={\"inherit\"}>\n                        <ViewListIcon/>\n                    </ToggleButton>\n                    <ToggleButton value=\"zoom\" aria-label=\"zoom\" color={\"inherit\"}>\n                        <ZoomInIcon/>\n                    </ToggleButton>\n                </ToggleButtonGroup>\n\n            </div>\n        )\n    }\n}","import {createAction} from \"redux-actions\";\nimport {View} from \"../../../state/models\";\n\nconst component = \"display/\";\n\nexport const ActionTypes = {\n    setView: component + \"setView\",\n};\n\nexport const setDisplayViewAction = createAction<View>(ActionTypes.setView);\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState, View} from \"../../state/models\";\nimport ViewSelector from \"./ViewSelector\";\nimport {setDisplayViewAction} from \"../../pdf/redux/display/actions\";\nimport {displayViewSelector} from \"../../pdf/redux/display/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        group: {\n            marginRight: 8,\n        },\n        text: {\n            display: \"inline-flex\",\n            marginRight: 5,\n        },\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    view: displayViewSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    setView: (view: View) => dispatch(setDisplayViewAction(view)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(ViewSelector));","import * as React from \"react\";\nimport {AppBar, createStyles, Theme, Toolbar, Typography, withStyles, WithStyles} from \"@material-ui/core\";\nimport VersionSelectorContainer from \"./version/VersionSelectorContainer\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport ViewSelectorContainer from \"./view/ViewSelectorContainer\";\nimport Divider from \"@material-ui/core/Divider\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            height: \"calc(100%-64px)\",\n            padding: 40,\n        }\n    })\n\nclass Scaffolder extends React.PureComponent<WithStyles> {\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <AppBar elevation={0} position={\"static\"}>\n                    <Toolbar>\n                        <Typography variant=\"h4\">\n                            pdfModer\n                        </Typography>\n                        <VersionSelectorContainer/>\n                        <ViewSelectorContainer/>\n                        <Divider orientation=\"vertical\" flexItem={true}/>\n                        <IconButton color={\"inherit\"} href={\"https://github.com/TimotheBarbe/pdfModer\"}\n                                    target={\"_blank\"}>\n                            <GitHubIcon/>\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n                <main className={classes.content}>\n                    {this.props.children}\n                </main>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(Scaffolder);\n","import {ChangeEvent} from \"react\";\n\n\nexport const setString = (setter: (data: string) => void) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setter(event.target.value)\n}\n\nexport const setNumber = (setter: (data: number) => void) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setter(+event.target.value)\n}","import React, {PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {insertPage} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport PdfLoaderContainer from \"../../loader/PdfLoaderContainer\";\nimport {setString} from \"../../../utils/formUtils\";\n\ninterface IPdfInsertProps {\n    pdf: IPdfInfo;\n    insert: string;\n\n    load: (data: IPdfInfo) => void;\n    setInsert: (data: string) => void;\n}\n\nexport default class PdfInsertPage extends PureComponent<IPdfInsertProps> {\n\n    private insert = () => {\n        const pos = this.props.insert;\n        if (!isNaN(+pos)) {\n            insertPage(this.props.pdf, +pos - 1).then(this.props.load)\n        }\n    }\n\n    private isDisabled = () => {\n        const isNotValidNumber = isNaN(+this.props.insert) || +this.props.insert < 1;\n        return isEmpty(this.props.pdf) || (isNotValidNumber)\n    }\n\n    public render() {\n        const {insert, setInsert} = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <TextField\n                        label=\"Before page\"\n                        type=\"text\"\n                        value={insert}\n                        onChange={setString(setInsert)}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            startIcon={<AddIcon/>}>\n                        new page\n                    </Button>\n                </Grid>\n                <Grid item={true} xs={12}>\n                    Insert doc\n                    <PdfLoaderContainer/>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {IStoreState} from \"../../../state/models\";\n\nexport const formSelector = (state: IStoreState) => state.form;\nexport const formRemoveSelector = (state: IStoreState) => formSelector(state).remove;\nexport const formMoveSelector = (state: IStoreState) => formSelector(state).move;\nexport const formInsertSelector = (state: IStoreState) => formSelector(state).insert;\n\nexport const formTextOptionSelector = (state: IStoreState) => formSelector(state).textOption;\nexport const formTextXSelector = (state: IStoreState) => formTextOptionSelector(state).x;\nexport const formTextYSelector = (state: IStoreState) => formTextOptionSelector(state).y;\nexport const formTextRotateSelector = (state: IStoreState) => formTextOptionSelector(state).rotate;\nexport const formTextColorSelector = (state: IStoreState) => formTextOptionSelector(state).color;\nexport const formTextSizeSelector = (state: IStoreState) => formTextOptionSelector(state).size;\nexport const formTextSelector = (state: IStoreState) => formTextOptionSelector(state).text;\n\nexport const formRectangleOptionSelector = (state: IStoreState) => formSelector(state).rectangleOption;\nexport const formRectangleXSelector = (state: IStoreState) => formRectangleOptionSelector(state).x;\nexport const formRectangleYSelector = (state: IStoreState) => formRectangleOptionSelector(state).y;\nexport const formRectangleRotateSelector = (state: IStoreState) => formRectangleOptionSelector(state).rotate;\nexport const formRectangleHeightSelector = (state: IStoreState) => formRectangleOptionSelector(state).height;\nexport const formRectangleWidthSelector = (state: IStoreState) => formRectangleOptionSelector(state).width;\nexport const formRectangleColorSelector = (state: IStoreState) => formRectangleOptionSelector(state).color;\nexport const formRectangleOpacitySelector = (state: IStoreState) => formRectangleOptionSelector(state).opacity;","import {createAction} from \"redux-actions\";\nimport {IForm, IMoveOption} from \"../../../state/models\";\n\nconst component = \"form/\";\n\nexport const ActionTypes = {\n    set: component + \"set\",\n    setRemove: component + \"setRemove\",\n    setMove: component + \"setMove\",\n    setInsert: component + \"setInsert\",\n\n    setTextColor: component + \"text/setTextColor\",\n    setTextY: component + \"text/setTextY\",\n    setTextX: component + \"text/setTextX\",\n    setTextSize: component + \"text/setTextSize\",\n    setTextRotate: component + \"text/setTextRotate\",\n    setText: component + \"text/setText\",\n\n    setRectangleY: component + \"rectangle/setRectangleY\",\n    setRectangleX: component + \"rectangle/setRectangleX\",\n    setRectangleRotate: component + \"rectangle/setRectangleRotate\",\n    setRectangleHeight: component + \"rectangle/setRectangleHeight\",\n    setRectangleWidth: component + \"rectangle/setRectangleWidth\",\n    setRectangleColor: component + \"rectangle/setRectangleColor\",\n    setRectangleOpacity: component + \"rectangle/setRectangleOpacity\",\n\n};\n\nexport const setFormAction = createAction<IForm>(ActionTypes.set);\n\nexport const setFormRemoveAction = createAction<string>(ActionTypes.setRemove);\nexport const setFormMoveAction = createAction<IMoveOption>(ActionTypes.setMove);\nexport const setFormInsertAction = createAction<string>(ActionTypes.setInsert);\n\nexport const setTextColorAction = createAction<string>(ActionTypes.setTextColor);\nexport const setTextYAction = createAction<number>(ActionTypes.setTextY);\nexport const setTextXAction = createAction<number>(ActionTypes.setTextX);\nexport const setTextSizeAction = createAction<number>(ActionTypes.setTextSize);\nexport const setTextRotateAction = createAction<number>(ActionTypes.setTextRotate);\nexport const setTextAction = createAction<string>(ActionTypes.setText);\n\nexport const setRectangleYAction = createAction<number>(ActionTypes.setRectangleY);\nexport const setRectangleXAction = createAction<number>(ActionTypes.setRectangleX);\nexport const setRectangleHeightAction = createAction<number>(ActionTypes.setRectangleHeight);\nexport const setRectangleWidthAction = createAction<number>(ActionTypes.setRectangleWidth);\nexport const setRectangleRotateAction = createAction<number>(ActionTypes.setRectangleRotate);\nexport const setRectangleColorAction = createAction<string>(ActionTypes.setRectangleColor);\nexport const setRectangleOpacityAction = createAction<number>(ActionTypes.setRectangleOpacity);\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertPage from \"./PdfInsertPage\";\nimport {formInsertSelector} from \"../../redux/form/selectors\";\nimport {setFormInsertAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    insert: formInsertSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setInsert: (data: string) => dispatch(setFormInsertAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertPage);","import React, {ChangeEvent, Component} from \"react\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport {removePage, removePages} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {getInterval, isInterval} from \"../../../utils/stringUtils\";\nimport {setString} from \"../../../utils/formUtils\";\n\n\ninterface IPdfDeleteProps {\n    pdf: IPdfInfo;\n    remove: string;\n\n    load: (data: IPdfInfo) => void;\n    setRemove: (data: string) => void;\n}\n\nexport default class PdfDeletePage extends Component<IPdfDeleteProps> {\n\n    private remove = () => {\n        const pos = this.props.remove;\n        if (!isNaN(+pos)) {\n            const position = +pos - 1\n            removePage(this.props.pdf, position).then(this.props.load)\n        } else if (isInterval(pos)) {\n            const interval = getInterval(pos);\n            const toRemove = Array.from(Array(interval[1]).keys()).slice(interval[0] - 1);\n            removePages(this.props.pdf, toRemove).then(this.props.load)\n        }\n    }\n\n    private isDisabled = () => {\n        const isNotValidNumber = isNaN(+this.props.remove) || +this.props.remove < 1;\n        return isEmpty(this.props.pdf) || (isNotValidNumber && !isInterval(this.props.remove))\n    }\n\n    public render() {\n        const {pdf, remove, setRemove} = this.props;\n        return (\n            <React.Fragment>\n                <TextField\n                    label={\"Pages to delete\"}\n                    type={\"text\"}\n                    value={remove}\n                    onChange={setString(setRemove)}\n                    placeholder={\"ex: 5-8 or 8\"}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.remove}\n                        style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                        startIcon={<DeleteIcon/>}>\n                    Delete\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfDeletePage from \"./PdfDeletePage\";\nimport {formRemoveSelector} from \"../../redux/form/selectors\";\nimport {setFormRemoveAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    remove: formRemoveSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setRemove: (data: string) => dispatch(setFormRemoveAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDeletePage);","import React, {PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {drawText} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo, ITextOption} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {setNumber, setString} from \"../../../utils/formUtils\";\n\ninterface IPdfInsertTextProps extends ITextOption {\n    pdf: IPdfInfo;\n\n    load: (data: IPdfInfo) => void;\n    setTextColor: (data: string) => void;\n    setTextY: (data: number) => void;\n    setTextX: (data: number) => void;\n    setTextSize: (data: number) => void;\n    setTextRotate: (data: number) => void;\n    setText: (data: string) => void;\n}\n\nexport default class PdfInsertText extends PureComponent<IPdfInsertTextProps> {\n\n    private insert = () => {\n        drawText(this.props.pdf, this.props).then(this.props.load)\n    }\n\n    public render() {\n        const {\n            color, setTextColor, y, setTextY, x, setTextX, size, setTextSize, rotate, setTextRotate,\n            text, setText\n        } = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <TextField\n                        label=\"Text\"\n                        type=\"text\"\n                        placeholder={\"ex: draw some text\"}\n                        value={text}\n                        onChange={setString(setText)}\n                        InputLabelProps={{shrink: true}}\n                        multiline={true}\n                        rows={4}\n                        variant={\"outlined\"}\n                        fullWidth={true}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Y\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={y}\n                        onChange={setNumber(setTextY)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"X\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={x}\n                        onChange={setNumber(setTextX)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Size\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={size}\n                        onChange={setNumber(setTextSize)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Rotate\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={rotate}\n                        onChange={setNumber(setTextRotate)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <input type=\"color\" id=\"head\" name=\"head\" value={color} onChange={setString(setTextColor)}/>\n                </Grid>\n\n                <Grid item={true} xs={6}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={isEmpty(this.props.pdf)}\n                            startIcon={<AddIcon/>}>\n                        Draw text\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertText from \"./PdfInsertText\";\nimport {\n    formTextColorSelector,\n    formTextRotateSelector,\n    formTextSelector,\n    formTextSizeSelector,\n    formTextXSelector,\n    formTextYSelector\n} from \"../../redux/form/selectors\";\nimport {\n    setTextAction,\n    setTextColorAction,\n    setTextRotateAction,\n    setTextSizeAction,\n    setTextXAction,\n    setTextYAction\n} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    x: formTextXSelector(state),\n    y: formTextYSelector(state),\n    rotate: formTextRotateSelector(state),\n    color: formTextColorSelector(state),\n    size: formTextSizeSelector(state),\n    text: formTextSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setTextColor: (data: string) => dispatch(setTextColorAction(data)),\n    setTextY: (data: number) => dispatch(setTextYAction(data)),\n    setTextX: (data: number) => dispatch(setTextXAction(data)),\n    setTextSize: (data: number) => dispatch(setTextSizeAction(data)),\n    setTextRotate: (data: number) => dispatch(setTextRotateAction(data)),\n    setText: (data: string) => dispatch(setTextAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertText);","import React, {PureComponent} from \"react\";\nimport {Button, Grid} from \"@material-ui/core\";\nimport {rotatePage} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport RotateRightIcon from '@material-ui/icons/RotateRight';\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\n\ninterface IPdfRotationProps {\n    pdf: IPdfInfo;\n\n    load: (data: IPdfInfo) => void;\n}\n\nexport default class PdfRotationPage extends PureComponent<IPdfRotationProps> {\n\n    private rotate = (angle: number) => () => {\n        rotatePage(this.props.pdf, angle).then(this.props.load)\n    }\n\n    private isDisabled = () => {\n        return isEmpty(this.props.pdf);\n    }\n\n    public render() {\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.rotate(-90)}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            startIcon={<RotateLeftIcon/>}>\n                        rotate left\n                    </Button>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.rotate(90)}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            endIcon={<RotateRightIcon/>}>\n                        rotate right\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport PdfRotationPage from \"./PdfRotationPage\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfRotationPage);","import React, {PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {IPdfInfo, IRectangleOption} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {setNumber, setString} from \"../../../utils/formUtils\";\nimport {drawRectangle} from \"../../../utils/pdfUtils\";\n\ninterface IPdfInsertRectangleProps extends IRectangleOption {\n    pdf: IPdfInfo;\n    load: (data: IPdfInfo) => void;\n    setRectangleRotate: (data: number) => void;\n    setRectangleY: (data: number) => void;\n    setRectangleX: (data: number) => void;\n    setRectangleWidth: (data: number) => void;\n    setRectangleHeight: (data: number) => void;\n    setRectangleColor: (data: string) => void;\n    setRectangleOpacity: (data: number) => void;\n}\n\nexport default class PdfInsertRectangle extends PureComponent<IPdfInsertRectangleProps> {\n\n    private insert = () => {\n        drawRectangle(this.props.pdf, this.props).then(this.props.load)\n    }\n\n    public render() {\n        const {\n            y, setRectangleY, x, setRectangleX, width, setRectangleWidth, rotate, setRectangleRotate,\n            height, setRectangleHeight, color, setRectangleColor, opacity, setRectangleOpacity\n        } = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Y\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={y}\n                        onChange={setNumber(setRectangleY)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"X\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={x}\n                        onChange={setNumber(setRectangleX)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Width\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={width}\n                        onChange={setNumber(setRectangleWidth)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Height\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={height}\n                        onChange={setNumber(setRectangleHeight)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={4}>\n                    <TextField\n                        label=\"Rotate\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={rotate}\n                        onChange={setNumber(setRectangleRotate)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={4}>\n                    <TextField\n                        label=\"Opacity\"\n                        type=\"number\"\n                        placeholder={\"ex: 0.5\"}\n                        value={opacity}\n                        onChange={setNumber(setRectangleOpacity)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: 0, step: 0.1, max: 1}}\n                    />\n                </Grid>\n                <Grid item={true} xs={4}>\n                    <input type=\"color\" id=\"head\" name=\"head\" value={color} onChange={setString(setRectangleColor)}/>\n                </Grid>\n                <Grid item={true} xs={4}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={isEmpty(this.props.pdf)}\n                            startIcon={<AddIcon/>}>\n                        Draw Rectangle\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertRectangle from \"./PdfInsertRectangle\";\nimport {\n    formRectangleColorSelector,\n    formRectangleHeightSelector, formRectangleOpacitySelector,\n    formRectangleRotateSelector,\n    formRectangleWidthSelector,\n    formRectangleXSelector,\n    formRectangleYSelector\n} from \"../../redux/form/selectors\";\nimport {\n    setRectangleColorAction,\n    setRectangleHeightAction, setRectangleOpacityAction,\n    setRectangleRotateAction,\n    setRectangleWidthAction,\n    setRectangleXAction,\n    setRectangleYAction\n} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    x: formRectangleXSelector(state),\n    y: formRectangleYSelector(state),\n    rotate: formRectangleRotateSelector(state),\n    width: formRectangleWidthSelector(state),\n    height: formRectangleHeightSelector(state),\n    color: formRectangleColorSelector(state),\n    opacity: formRectangleOpacitySelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setRectangleY: (data: number) => dispatch(setRectangleYAction(data)),\n    setRectangleX: (data: number) => dispatch(setRectangleXAction(data)),\n    setRectangleRotate: (data: number) => dispatch(setRectangleRotateAction(data)),\n    setRectangleWidth: (data: number) => dispatch(setRectangleWidthAction(data)),\n    setRectangleHeight: (data: number) => dispatch(setRectangleHeightAction(data)),\n    setRectangleColor: (data: string) => dispatch(setRectangleColorAction(data)),\n    setRectangleOpacity: (data: number) => dispatch(setRectangleOpacityAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertRectangle);","import React, {PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {movePage} from \"../../../utils/pdfUtils\";\nimport {IMoveOption, IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport TrendingFlatIcon from '@material-ui/icons/TrendingFlat';\nimport {setString} from \"../../../utils/formUtils\";\nimport update from \"immutability-helper\";\n\n\ninterface IPdfMoveProps {\n    pdf: IPdfInfo;\n    move: IMoveOption;\n\n    load: (data: IPdfInfo) => void;\n    setMove: (data: IMoveOption) => void;\n}\n\nexport default class PdfMovePage extends PureComponent<IPdfMoveProps> {\n\n    private setMoveFrom = (data: string) => {\n        const move = update(this.props.move, {from: {$set: data}}) as IMoveOption;\n        this.props.setMove(move)\n    };\n\n    private setMoveTo = (data: string) => {\n        const move = update(this.props.move, {to: {$set: data}}) as IMoveOption;\n        this.props.setMove(move)\n    };\n\n    private move = () => {\n        movePage(this.props.pdf, +this.props.move.from - 1, +this.props.move.to - 1).then(this.props.load)\n    }\n\n    private isDisabled = () => {\n        const isNotValidNumber = this.isValidNumber(this.props.move.from) || this.isValidNumber(this.props.move.to);\n        return isEmpty(this.props.pdf) || isNotValidNumber || this.props.move.from == this.props.move.to\n    }\n\n    private isValidNumber(value: string) {\n        return isNaN(+value) || +value < 1 || +value > this.props.pdf.pageCount;\n    }\n\n    public render() {\n        const {pdf, move, setMove} = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={4}>\n                    <TextField\n                        label={\"Move page\"}\n                        type=\"number\"\n                        value={move.from}\n                        onChange={setString(this.setMoveFrom)}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                </Grid>\n                <Grid item={true} xs={4}>\n                    <TextField\n                        label={\"to position\"}\n                        type=\"number\"\n                        value={move.to}\n                        onChange={setString(this.setMoveTo)}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                </Grid>\n                <Grid item={true} xs={4}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.move}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            startIcon={<TrendingFlatIcon/>}>\n                        Move\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IMoveOption, IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfMovePage from \"./PdfMovePage\";\nimport {formMoveSelector} from \"../../redux/form/selectors\";\nimport {setFormMoveAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    move: formMoveSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setMove: (data: IMoveOption) => dispatch(setFormMoveAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfMovePage);","import \"./App.css\";\n\nimport * as React from \"react\";\nimport {CssBaseline, ExpansionPanel, ExpansionPanelDetails, Grid, Typography} from \"@material-ui/core\";\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core/styles\";\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport PdfPreviewContainer from \"../pdf/preview/PdfPreviewContainer\";\nimport PdfDownloadContainer from \"../pdf/download/PdfDownloadContainer\";\nimport Scaffolder from \"./Scaffolder\";\nimport PdfInsertPageContainer from \"../pdf/modify/insert/PdfInsertPageContainer\";\nimport PdfDeletePageContainer from \"../pdf/modify/delete/PdfDeletePageContainer\";\nimport PdfInsertTextContainer from \"../pdf/modify/text/PdfInsertTextContainer\";\nimport PdfRotationPageContainer from \"../pdf/modify/rotation/PdfRotationPageContainer\";\nimport PdfInsertRectangleContainer from \"../pdf/modify/rectangle/PdfInsertRectangleContainer\";\nimport PdfMovePageContainer from \"../pdf/modify/move/PdfMovePageContainer\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {main: \"#ee3f3f\"},\n        secondary: {main: \"#a09f9f\"},\n        // type: 'dark',\n    }\n});\n\nclass App extends React.PureComponent {\n\n    public render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline/>\n                <Scaffolder>\n                    <Grid container={true} spacing={3}>\n                        <Grid item={true} xs={3}>\n                            <PdfDownloadContainer/>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Insert page</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertPageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Move</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfMovePageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Delete</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfDeletePageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Add text</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertTextContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Add rectangle</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertRectangleContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Rotate</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfRotationPageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        </Grid>\n                        <Grid item={true} xs={9}>\n                            <PdfPreviewContainer/>\n                        </Grid>\n                    </Grid>\n                </Scaffolder>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {getEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo, IPdfWithVersion} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\nexport const setPdfReducer = handleActions<any, any>(\n    {\n        [ActionTypes.load]: (state: IPdfWithVersion, action: Action<IPdfInfo>) => {\n            return update(state, {\n                versions: {$splice: [[state.position + 1, state.versions.length, action.payload as IPdfInfo]]},\n                position: {$set: state.position + 1}\n            })\n        },\n        [ActionTypes.selectPage]: (state: IPdfWithVersion, action: Action<number>) => {\n            const position = state.position\n            return update(state, {versions: {[position]: {selectedPage: {$set: action.payload}}}})\n        },\n        [ActionTypes.changeVersion]: (state: IPdfWithVersion, action: Action<number>) => {\n            const position = state.position\n            return update(state, {position: {$set: position + action.payload}})\n        },\n    },\n    {versions: [getEmpty()], position: 0} as IPdfWithVersion\n);\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {combineReducers} from \"redux\";\nimport {IMoveOption, IRectangleOption, ITextOption} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\n\nexport const setRemoveReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setRemove]: (state: string, action: Action<string>) => {\n            return action.payload\n        },\n    },\n    \"\"\n);\n\nexport const setMoveReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setMove]: (state: string, action: Action<IMoveOption>) => {\n            return action.payload\n        },\n    },\n    {from: \"\", to: \"\"} as IMoveOption\n);\n\nexport const setInsertReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setInsert]: (state: string, action: Action<string>) => {\n            return action.payload\n        },\n    },\n    \"\"\n);\n\nexport const setTextOptionReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setTextColor]: (state: ITextOption, action: Action<string>) => {\n            return update(state, {color: {$set: action.payload}})\n        },\n        [ActionTypes.setTextRotate]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {rotate: {$set: action.payload}})\n        },\n        [ActionTypes.setTextSize]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {size: {$set: action.payload}})\n        },\n        [ActionTypes.setTextX]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {x: {$set: action.payload}})\n        },\n        [ActionTypes.setTextY]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {y: {$set: action.payload}})\n        },\n        [ActionTypes.setText]: (state: ITextOption, action: Action<string>) => {\n            return update(state, {text: {$set: action.payload}})\n        },\n    },\n    {color: \"\", rotate: 0, size: 12, x: 0, y: 0, text: \"\"} as ITextOption\n);\n\nexport const setRectangleOptionReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setRectangleRotate]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {rotate: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleX]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {x: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleY]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {y: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleWidth]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {width: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleHeight]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {height: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleColor]: (state: IRectangleOption, action: Action<string>) => {\n            return update(state, {color: {$set: action.payload}})\n        },\n        [ActionTypes.setRectangleOpacity]: (state: IRectangleOption, action: Action<number>) => {\n            return update(state, {opacity: {$set: action.payload}})\n        },\n    },\n    {rotate: 0, x: 0, y: 0, width: 10, height: 10, color: \"\", opacity: 1} as IRectangleOption\n);\n\nexport const setFormReducer = combineReducers({\n    remove: setRemoveReducer,\n    move: setMoveReducer,\n    insert: setInsertReducer,\n    textOption: setTextOptionReducer,\n    rectangleOption: setRectangleOptionReducer\n})\n\n\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {combineReducers} from \"redux\";\nimport {View} from \"../../../state/models\";\n\n\nexport const setViewReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setView]: (state: View, action: Action<View>) => {\n            return action.payload as View\n        },\n    },\n    \"zoom\" as View\n);\n\nexport const setDisplayReducer = combineReducers({\n    view: setViewReducer,\n})\n\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {setPdfReducer} from \"../pdf/redux/pdf/reducers\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {setFormReducer} from \"../pdf/redux/form/reducers\";\nimport {setDisplayReducer} from \"../pdf/redux/display/reducers\";\n\nconst rootReducer = combineReducers({\n    pdf: setPdfReducer,\n    form: setFormReducer,\n    display: setDisplayReducer\n})\n\nexport const store = createStore(rootReducer, composeWithDevTools(\n    applyMiddleware()\n))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {pdfjs} from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 79;"],"sourceRoot":""}