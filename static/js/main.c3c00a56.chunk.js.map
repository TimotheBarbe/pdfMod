{"version":3,"sources":["utils/Uint8ArrayUtils.tsx","utils/pdfUtils.tsx","pdf/loader/PdfLoader.tsx","pdf/redux/pdf/actions.ts","pdf/redux/pdf/selectors.ts","pdf/loader/PdfLoaderContainer.ts","pdf/preview/PdfPage.tsx","pdf/preview/PdfPageContainer.ts","pdf/preview/PdfPreview.tsx","pdf/preview/PdfPreviewContainer.ts","pdf/download/PdfDownload.tsx","pdf/download/PdfDownloadContainer.ts","components/Scaffolder.tsx","pdf/modify/insert/PdfInsertPage.tsx","pdf/redux/form/selectors.ts","pdf/redux/form/actions.ts","pdf/modify/insert/PdfInsertPageContainer.ts","utils/stringUtils.tsx","pdf/modify/delete/PdfDeletePage.tsx","pdf/modify/delete/PdfDeletePageContainer.ts","components/App.tsx","serviceWorker.js","pdf/redux/pdf/reducers.ts","pdf/redux/form/reducers.ts","state/store.tsx","index.tsx","../node_modules/pdfjs-dist/build sync"],"names":["isEmpty","pdf","pageCount","_callee","state","index","doc","data","regenerator_default","a","wrap","_context","prev","next","PDFDocument","load","sent","insertPage","save","abrupt","update","$set","selectedPage","stop","removePage","_x3","_x4","_removePage","apply","this","arguments","_callee2","_context2","removePages","_x5","_x6","_removePages","_callee3","indexes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context3","undefined","reverse","Symbol","iterator","done","value","t0","return","finish","length","loadPdf","_x7","_loadPdf","_callee4","toLoad","_context4","getPageCount","mergePdf","_x8","_x9","_mergePdf","_callee5","start","end","startDoc","endDoc","contentPages","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","page","_context5","copyPages","getPageIndices","console","log","getSize","addPage","_callee6","_context6","then","PdfLoader","read","files","file","reader","FileReader","onabort","onerror","onload","binaryStr","result","_x10","_x11","_loadAndMerge","loadAndMerge","_this","props","r","readAsArrayBuffer","_this2","classes","react_default","createElement","Fragment","dist_es","onDrop","acceptedFiles","accept","multiple","_ref","getRootProps","getInputProps","className","dropzone","PureComponent","ActionTypes","component","selectPage","loadPdfAction","createAction","selectPageAction","pdfSelector","pdfPageCountSelector","pdfSelectedPageSelector","withStyles","theme","createStyles","flex","display","flexDirection","alignItems","borderWidth","borderRadius","borderColor","palette","secondary","main","borderStyle","backgroundColor","color","outline","withTheme","connect","dispatch","PdfPage","event","_this$props","scale","selected","onClick","top","center","toLocaleString","IconButton","aria-label","right","Delete_default","fontSize","entry","width","height","pageIndex","renderAnnotationLayer","border","concat","padding","margin","primary","& > canvas","justifyContent","textAlign","PdfPreview","noPdf","before","Array","from","keys","slice","after","PdfLoaderContainer","Grid","container","spacing","item","xs","map","PdfPageContainer","key","content","maxWidth","maxHeight","overflow","PdfDownload","download","Button","variant","style","disabled","Scaffolder","react","AppBar","elevation","position","Toolbar","Typography","children","React","PdfInsertPage","insert","pos","isNaN","_x","_x2","_insertPage","setInsert","target","TextField","label","type","onChange","InputLabelProps","shrink","startIcon","Add_default","formSelector","form","formRemoveSelector","remove","formInsertSelector","set","setRemove","setFormRemoveAction","setFormInsertAction","intervalExp","RegExp","isInterval","test","getInterval","exec","PdfDeletePage","interval","toRemove","isDisabled","placeholder","Component","createMuiTheme","App","ThemeProvider","CssBaseline","components_Scaffolder","PdfDownloadContainer","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","ExpansionPanelDetails","PdfInsertPageContainer","PdfDeletePageContainer","PdfPreviewContainer","Boolean","window","location","hostname","match","setPdfReducer","handleActions","_handleActions","Object","defineProperty","action","payload","Uint8Array","setFormReducer","reducers_handleActions","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","pdfjs","GlobalWorkerOptions","workerSrc","version","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","e","Error","code","resolve","module","exports","id"],"mappings":"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","file":"static/js/main.c3c00a56.chunk.js","sourcesContent":["import {IPdfInfo} from \"../state/models\";\n\nexport const getEmpty = (): IPdfInfo => {\n    return {data: new Uint8Array(0), pageCount: 0, selectedPage: 0};\n}\n\nexport const isEmpty = (pdf: IPdfInfo) => {\n    return pdf.pageCount === 0;\n}","import {PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo} from \"../state/models\";\nimport update from 'immutability-helper';\nimport {isEmpty} from \"./Uint8ArrayUtils\";\n\nexport async function insertPage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    doc.insertPage(index);\n    let data = await doc.save();\n    return update(state, {data: {$set: data}, pageCount: {$set: state.pageCount + 1}, selectedPage: {$set: index}})\n}\n\nexport async function removePage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    return removePages(state, [index]);\n}\n\n/**\n * @param indexes must be ordered !\n */\nexport async function removePages(state: IPdfInfo, indexes: number[]): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    for (let index of indexes.reverse()) {\n        doc.removePage(index);\n    }\n    let data = await doc.save();\n    return {data, pageCount: state.pageCount - indexes.length, selectedPage: state.selectedPage}\n}\n\nexport async function loadPdf(toLoad: string | ArrayBuffer): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(toLoad)\n    let pageCount = doc.getPageCount();\n    const data = await doc.save();\n    return {data, pageCount, selectedPage: 0}\n}\n\nexport async function mergePdf(start: IPdfInfo, end: IPdfInfo): Promise<IPdfInfo> {\n    if (isEmpty(start)) return end;\n    const startDoc = await PDFDocument.load(start.data);\n    const endDoc = await PDFDocument.load(end.data);\n    const contentPages = await startDoc.copyPages(endDoc, endDoc.getPageIndices());\n    for (const page of contentPages) {\n        console.log(page.getSize())\n        startDoc.addPage(page);\n    }\n    const data = await startDoc.save();\n    return {data, pageCount: start.pageCount + end.pageCount, selectedPage: start.selectedPage}\n}\n\nexport async function loadAndMerge(toLoad: string | ArrayBuffer, start: IPdfInfo): Promise<IPdfInfo> {\n    return loadPdf(toLoad).then(end => mergePdf(start, end))\n}\n","import React, {PureComponent} from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport {PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {WithStyles} from \"@material-ui/core\";\nimport {loadAndMerge, loadPdf, mergePdf} from \"../../utils/pdfUtils\";\n\ninterface IPdfLoaderProps extends WithStyles {\n    load: (data: IPdfInfo) => void;\n    pdf: IPdfInfo;\n}\n\nexport default class PdfLoader extends PureComponent<IPdfLoaderProps> {\n\n    private read = (files: File[]) => {\n        const file = files[0]\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = () => {\n            const binaryStr = reader.result\n            if (binaryStr != null) loadAndMerge(binaryStr, this.props.pdf).then(r => this.props.load(r))\n        }\n        reader.readAsArrayBuffer(file)\n    };\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <Dropzone onDrop={acceptedFiles => this.read(acceptedFiles)} accept={\".pdf\"} multiple={false}>\n                    {({getRootProps, getInputProps}) => (\n                        <section>\n                            <div {...getRootProps({className: classes.dropzone})}>\n                                <input {...getInputProps()} />\n                                <p>Drag 'n' drop some files here, or click to select files</p>\n                            </div>\n                        </section>\n                    )}\n                </Dropzone>\n            </React.Fragment>\n        )\n    }\n}","import {createAction} from \"redux-actions\";\nimport {IPdfInfo} from \"../../../state/models\";\n\nconst component = \"pdf/\";\n\nexport const ActionTypes = {\n    load: component + \"load\",\n    selectPage: component + \"select\",\n};\n\nexport const loadPdfAction = createAction<IPdfInfo>(ActionTypes.load);\nexport const selectPageAction = createAction<number>(ActionTypes.selectPage);","import {IStoreState} from \"../../../state/models\";\n\nexport const pdfSelector = (state: IStoreState) => state.pdf;\nexport const pdfDataSelector = (state: IStoreState) => pdfSelector(state).data;\nexport const pdfPageCountSelector = (state: IStoreState) => pdfSelector(state).pageCount;\nexport const pdfSelectedPageSelector = (state: IStoreState) => pdfSelector(state).selectedPage;\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport PdfLoader from \"./PdfLoader\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {loadPdfAction} from \"../redux/pdf/actions\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        dropzone: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            // padding: \"20px\",\n            borderWidth: \"2px\",\n            borderRadius: \"2px\",\n            borderColor: theme.palette.secondary.main,\n            borderStyle: \"dashed\",\n            backgroundColor: \"#fafafa\",\n            color: theme.palette.secondary.main,\n            outline: \"none\",\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfLoader));","import React, {PureComponent} from \"react\";\nimport {Page} from \"react-pdf\";\nimport {IconButton, WithStyles} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {IPdfInfo} from \"../../state/models\";\nimport {removePage} from \"../../utils/pdfUtils\";\n\ninterface IPdfPageProps extends WithStyles {\n    selectPage: (index: number) => void;\n    load: (data: IPdfInfo) => void;\n\n    pageCount: number;\n    pdf: IPdfInfo;\n\n    index: number;\n    selected: boolean;\n    scale: number;\n}\n\n\nexport default class PdfPage extends PureComponent<IPdfPageProps> {\n    private selectPage = (event: React.MouseEvent<any>) => this.props.selectPage(this.props.index)\n    private removePage = (event: React.MouseEvent<any>) => removePage(this.props.pdf, this.props.index)\n        .then(this.props.load)\n\n    public render() {\n        const {index, classes, scale, selected, pageCount} = this.props;\n\n        return (\n            <div onClick={this.selectPage} className={selected ? classes.selected : classes.main}>\n                <div className={classes.top}>\n                    <div className={classes.center}>\n                        {(index + 1).toLocaleString()}/{pageCount.toLocaleString()}\n                    </div>\n                    <IconButton aria-label=\"delete\" className={classes.right} onClick={this.removePage}>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </div>\n                <Page className={classes.page} scale={scale} width={595} height={841}\n                      pageIndex={index} renderAnnotationLayer={false}/>\n            </div>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {pdfPageCountSelector, pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport PdfPage from \"./PdfPage\"\nimport {loadPdfAction, selectPageAction} from \"../redux/pdf/actions\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        main: {\n            border: `1px solid ${theme.palette.secondary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        selected: {\n            border: `1px solid ${theme.palette.primary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        page: {\n            \"& > canvas\": {\n                border: `1px solid ${theme.palette.secondary.main}`,\n            },\n            margin: 5\n        },\n        top: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n        },\n        center: {\n            flex: 1,\n            textAlign: \"center\"\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    selectedPage: pdfSelectedPageSelector(state),\n    pageCount: pdfPageCountSelector(state),\n    pdf: pdfSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPage));","import React, {PureComponent} from \"react\";\nimport {Document} from \"react-pdf\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport PdfLoaderContainer from \"../loader/PdfLoaderContainer\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {Grid, WithStyles} from \"@material-ui/core\";\nimport PdfPageContainer from \"./PdfPageContainer\";\n\ninterface IPdfPreviewProps extends WithStyles {\n    pdf: IPdfInfo;\n    selectedPage: number;\n}\n\n\nexport default class PdfPreview extends PureComponent<IPdfPreviewProps> {\n\n    public render() {\n        const {pdf, selectedPage, classes} = this.props;\n        const noPdf = isEmpty(pdf);\n\n        const before = Array.from(Array(pdf.selectedPage).keys()).slice(-2)\n        const after = Array.from(Array(pdf.pageCount).keys()).slice(selectedPage, selectedPage + 3)\n\n        return (\n            <React.Fragment>\n                {noPdf && <PdfLoaderContainer/>}\n                {!noPdf && <Document file={{data: pdf.data}}>\n                    <Grid container={true} spacing={3}>\n                        <Grid item={true} xs={2}>\n                            {before.map((index) => (\n                                    index !== selectedPage &&\n                                    <PdfPageContainer key={index} selected={false} index={index} scale={0.2}/>\n                                )\n                            )}\n                        </Grid>\n                        <Grid item={true} xs={8}>\n                            <div className={classes.content}>\n                                <PdfPageContainer selected={true} index={selectedPage} scale={1}/>\n                            </div>\n                        </Grid>\n                        <Grid item={true} xs={2}>\n                            {after.map((index) => (\n                                    index !== selectedPage &&\n                                    <PdfPageContainer key={index} selected={false} index={index} scale={0.2}/>\n                                )\n                            )}\n                        </Grid>\n                    </Grid>\n                </Document>}\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfPreview from \"./PdfPreview\";\nimport {pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            maxWidth: \"100%\",\n            maxHeight: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            overflow: \"auto\",\n        }\n    })\n\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    selectedPage: pdfSelectedPageSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPreview));","import React, {PureComponent} from \"react\";\nimport download from \"downloadjs\";\nimport {Button} from \"@material-ui/core\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo} from \"../../state/models\";\n\ninterface IPdfPreviewProps {\n    pdf: IPdfInfo;\n}\n\nexport default class PdfDownload extends PureComponent<IPdfPreviewProps> {\n\n    private download = () => {\n        download(this.props.pdf.data, \"download.pdf\", \"application/pdf\");\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.download} style={{margin: \"0 10px 10px 0\"}}\n                        disabled={isEmpty(this.props.pdf)}>\n                    Download\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfDownload from \"./PdfDownload\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDownload);","import * as React from \"react\";\nimport {AppBar, createStyles, Grid, Paper, Theme, Toolbar, Typography, withStyles, WithStyles} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            height: \"calc(100%-64px)\",\n            padding: 40,\n        }\n    })\n\nclass Scaffolder extends React.PureComponent<WithStyles> {\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <AppBar elevation={0} position={\"static\"}>\n                    <Toolbar>\n                        <Typography variant=\"h6\">\n                            pdfModer\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <main className={classes.content}>\n                    {this.props.children}\n                </main>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(Scaffolder);\n","import React, {ChangeEvent, PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {insertPage} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport PdfLoaderContainer from \"../../loader/PdfLoaderContainer\";\nimport Scaffolder from \"../../../components/Scaffolder\";\n\ninterface IPdfInsertProps {\n    pdf: IPdfInfo;\n    insert: string;\n\n    load: (data: IPdfInfo) => void;\n    setInsert: (data: string) => void;\n}\n\nexport default class PdfInsertPage extends PureComponent<IPdfInsertProps> {\n\n    private insert = () => {\n        const pos = this.props.insert;\n        if (!isNaN(+pos)) {\n            insertPage(this.props.pdf, +pos - 1).then(this.props.load)\n        }\n    }\n\n    private setInsert = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        this.props.setInsert(event.target.value)\n    }\n\n    public render() {\n        const {insert} = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <TextField\n                        label=\"Before page\"\n                        type=\"text\"\n                        value={insert}\n                        onChange={this.setInsert}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={isEmpty(this.props.pdf) || isNaN(+insert)}\n                            startIcon={<AddIcon/>}>\n                        Insert new page\n                    </Button>\n                </Grid>\n                <Grid item={true} xs={12}>\n                    Insert doc\n                    <PdfLoaderContainer/>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {IStoreState} from \"../../../state/models\";\n\nexport const formSelector = (state: IStoreState) => state.form;\nexport const formRemoveSelector = (state: IStoreState) => formSelector(state).remove;\nexport const formInsertSelector = (state: IStoreState) => formSelector(state).insert;\n","import {createAction} from \"redux-actions\";\nimport {IForm} from \"../../../state/models\";\n\nconst component = \"form/\";\n\nexport const ActionTypes = {\n    set: component + \"set\",\n    setRemove: component + \"setRemove\",\n    setInsert: component + \"setInsert\",\n};\n\nexport const setFormAction = createAction<IForm>(ActionTypes.set);\nexport const setFormRemoveAction = createAction<string>(ActionTypes.setRemove);\nexport const setFormInsertAction = createAction<string>(ActionTypes.setInsert);\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertPage from \"./PdfInsertPage\";\nimport {formInsertSelector} from \"../../redux/form/selectors\";\nimport {setFormInsertAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    insert: formInsertSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setInsert: (data: string) => dispatch(setFormInsertAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertPage);","import {IPdfInfo} from \"../state/models\";\n\nconst intervalExp = new RegExp('^([0-9]+)-([0-9]+)$');\n\nexport const isInterval = (value: string) => {\n    return intervalExp.test(value)\n}\n\nexport const getInterval = (value: string) => {\n    let exec = intervalExp.exec(value) as RegExpExecArray;\n    return [+exec[1], +exec[2]]\n}","import React, {ChangeEvent, Component} from \"react\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport {removePage, removePages} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {getInterval, isInterval} from \"../../../utils/stringUtils\";\n\n\ninterface IPdfDeleteProps {\n    pdf: IPdfInfo;\n    remove: string;\n\n    load: (data: IPdfInfo) => void;\n    setRemove: (data: string) => void;\n}\n\nexport default class PdfDeletePage extends Component<IPdfDeleteProps> {\n\n    private remove = () => {\n        const pos = this.props.remove;\n        if (!isNaN(+pos)) {\n            const position = +pos - 1\n            removePage(this.props.pdf, position).then(this.props.load)\n        } else if (isInterval(pos)) {\n            const interval = getInterval(pos);\n            const toRemove = Array.from(Array(interval[1]).keys()).slice(interval[0] - 1);\n            removePages(this.props.pdf, toRemove).then(this.props.load)\n        }\n    }\n\n    private setRemove = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) =>\n        this.props.setRemove(event.target.value)\n\n    private isDisabled = () => isEmpty(this.props.pdf) || (isNaN(+this.props.remove) && !isInterval(this.props.remove))\n\n    public render() {\n        const {pdf, remove} = this.props;\n        return (\n            <React.Fragment>\n                <TextField\n                    label={\"Pages to delete\"}\n                    type={\"text\"}\n                    value={remove}\n                    onChange={this.setRemove}\n                    placeholder={\"ex: 5-8 or 8\"}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.remove}\n                        style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                        startIcon={<DeleteIcon/>}>\n                    Delete\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfDeletePage from \"./PdfDeletePage\";\nimport {formRemoveSelector} from \"../../redux/form/selectors\";\nimport {setFormRemoveAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    remove: formRemoveSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setRemove: (data: string) => dispatch(setFormRemoveAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDeletePage);","import \"./App.css\";\n\nimport * as React from \"react\";\nimport {CssBaseline, ExpansionPanel, ExpansionPanelDetails, Grid, Typography} from \"@material-ui/core\";\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core/styles\";\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport PdfPreviewContainer from \"../pdf/preview/PdfPreviewContainer\";\nimport PdfDownloadContainer from \"../pdf/download/PdfDownloadContainer\";\nimport Scaffolder from \"./Scaffolder\";\nimport PdfInsertPageContainer from \"../pdf/modify/insert/PdfInsertPageContainer\";\nimport PdfDeletePageContainer from \"../pdf/modify/delete/PdfDeletePageContainer\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {main: \"#ee3f3f\"},\n        secondary: {main: \"#a09f9f\"},\n        // type: 'dark',\n    }\n});\n\nclass App extends React.PureComponent {\n\n    public render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline/>\n                <Scaffolder>\n                    <Grid container={true} spacing={3}>\n                        <Grid item={true} xs={3}>\n                            <PdfDownloadContainer/>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Insert page</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertPageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Delete</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfDeletePageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        </Grid>\n                        <Grid item={true} xs={9}>\n                            <PdfPreviewContainer/>\n                        </Grid>\n                    </Grid>\n                </Scaffolder>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {getEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport {IForm, IPdfInfo} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\nexport const setPdfReducer = handleActions<any, any>(\n    {\n        [ActionTypes.load]: (state: IPdfInfo, action: Action<IPdfInfo>) => {\n            return action.payload as IPdfInfo;\n        },\n        [ActionTypes.selectPage]: (state: IPdfInfo, action: Action<number>) => {\n            return update(state, {selectedPage: {$set: action.payload}})\n        },\n    },\n    getEmpty()\n);\n\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {IForm} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\nexport const setFormReducer = handleActions<any, any>(\n    {\n        [ActionTypes.set]: (state: IForm, action: Action<IForm>) => {\n            return action.payload as IForm;\n        },\n        [ActionTypes.setRemove]: (state: IForm, action: Action<string>) => {\n            return update(state, {remove: {$set: action.payload}}) as IForm\n        },\n        [ActionTypes.setInsert]: (state: IForm, action: Action<string>) => {\n            return update(state, {insert: {$set: action.payload}}) as IForm\n        }\n    },\n    {remove: \"\", insert: \"1\"} as IForm\n);\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {setPdfReducer} from \"../pdf/redux/pdf/reducers\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {setFormReducer} from \"../pdf/redux/form/reducers\";\n\nconst rootReducer = combineReducers({\n    pdf: setPdfReducer,\n    form: setFormReducer\n})\n\nexport const store = createStore(rootReducer, composeWithDevTools(\n    applyMiddleware()\n))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {pdfjs} from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 80;"],"sourceRoot":""}