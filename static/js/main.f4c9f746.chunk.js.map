{"version":3,"sources":["utils/Uint8ArrayUtils.tsx","utils/stringUtils.tsx","utils/pdfUtils.tsx","pdf/loader/PdfLoader.tsx","pdf/redux/pdf/actions.ts","pdf/redux/pdf/selectors.ts","pdf/loader/PdfLoaderContainer.ts","pdf/preview/PdfPage.tsx","pdf/preview/PdfPageContainer.ts","pdf/preview/PdfPreview.tsx","pdf/redux/display/selectors.ts","pdf/preview/PdfPreviewContainer.ts","pdf/download/PdfDownload.tsx","pdf/download/PdfDownloadContainer.ts","components/version/VersionSelector.tsx","components/version/VersionSelectorContainer.ts","components/view/ViewSelector.tsx","pdf/redux/display/actions.ts","components/view/ViewSelectorContainer.ts","components/Scaffolder.tsx","utils/formUtils.tsx","pdf/modify/insert/PdfInsertPage.tsx","pdf/redux/form/selectors.ts","pdf/redux/form/actions.ts","pdf/modify/insert/PdfInsertPageContainer.ts","pdf/modify/delete/PdfDeletePage.tsx","pdf/modify/delete/PdfDeletePageContainer.ts","pdf/modify/text/PdfInsertText.tsx","pdf/modify/text/PdfInsertTextContainer.ts","pdf/modify/rotation/PdfRotationPage.tsx","pdf/modify/rotation/PdfRotationPageContainer.ts","components/App.tsx","serviceWorker.js","pdf/redux/pdf/reducers.ts","pdf/redux/form/reducers.ts","pdf/redux/display/reducers.ts","state/store.tsx","index.tsx","../node_modules/pdfjs-dist/build sync"],"names":["isEmpty","pdf","pageCount","intervalExp","RegExp","isInterval","value","test","getInterval","exec","toRgb","hex","replace","m","r","g","b","result","getValue","v","parseInt","rgb","_callee","state","index","doc","data","regenerator_default","a","wrap","_context","prev","next","PDFDocument","load","sent","insertPage","save","abrupt","update","$set","selectedPage","stop","removePage","_x3","_x4","_removePage","apply","this","arguments","_callee2","_context2","removePages","_x5","_x6","_removePages","_callee3","indexes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context3","undefined","reverse","Symbol","iterator","done","t0","return","finish","length","loadPdf","_x7","_loadPdf","_callee4","toLoad","_context4","getPageCount","mergePdf","_x8","_x9","_mergePdf","_callee5","start","end","startDoc","endDoc","contentPages","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","page","_context5","copyPages","getPageIndices","addPage","_callee6","_context6","then","_callee7","option","color","rotate","size","x","y","text","_context7","getPage","drawText","degrees","lineHeight","_callee8","angle","_context8","setRotation","getRotation","PdfLoader","read","files","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","_x10","_x11","_loadAndMerge","loadAndMerge","_this","props","readAsArrayBuffer","_this2","classes","react_default","createElement","Fragment","dist_es","onDrop","acceptedFiles","accept","multiple","_ref","getRootProps","getInputProps","className","dropzone","PureComponent","ActionTypes","component","selectPage","changeVersion","loadPdfAction","createAction","selectPageAction","pdfWithVersionSelector","pdfSelector","versions","position","pdfPageCountSelector","pdfSelectedPageSelector","withStyles","theme","createStyles","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","palette","secondary","main","borderStyle","backgroundColor","outline","withTheme","connect","dispatch","PdfPage","event","stopPropagation","_this$props","scale","selected","onClick","top","center","toLocaleString","IconButton","aria-label","right","Delete_default","fontSize","entry","width","pageIndex","renderAnnotationLayer","border","concat","margin","primary","& > canvas","justifyContent","textAlign","PdfPreview","view","noPdf","before","Array","from","keys","slice","all","after","PdfLoaderContainer","Grid","container","spacing","item","xs","disabled","ArrowBack_default","map","PdfPageContainer","key","content","ArrowForward_default","displayViewSelector","displaySelector","maxWidth","maxHeight","overflow","PdfDownload","download","Button","variant","style","VersionSelector","change","Undo_default","Typography","Redo_default","marginLeft","marginRight","ViewSelector","handleAlignment","setView","group","ToggleButtonGroup","exclusive","onChange","ToggleButton","ViewList_default","ZoomIn_default","setDisplayViewAction","Scaffolder","react","AppBar","elevation","Toolbar","VersionSelectorContainer","ViewSelectorContainer","Divider","orientation","flexItem","href","target","GitHub_default","children","React","height","setString","setter","setNumber","PdfInsertPage","insert","pos","isNaN","_x","_x2","_insertPage","isDisabled","isNotValidNumber","setInsert","TextField","label","type","InputLabelProps","shrink","startIcon","Add_default","formSelector","form","formRemoveSelector","remove","formInsertSelector","formTextOptionSelector","textOption","formTextXSelector","formTextYSelector","formTextRotateSelector","formTextColorSelector","formTextSizeSelector","formTextSelector","set","setRemove","setTextColor","setTextY","setTextX","setTextSize","setTextRotate","setText","setFormRemoveAction","setFormInsertAction","setTextColorAction","setTextYAction","setTextXAction","setTextSizeAction","setTextRotateAction","setTextAction","PdfDeletePage","interval","toRemove","placeholder","Component","PdfInsertText","_x12","_x13","_drawText","multiline","rows","fullWidth","inputProps","min","PdfRotationPage","_x14","_x15","_rotatePage","rotatePage","RotateLeft_default","endIcon","RotateRight_default","createMuiTheme","App","ThemeProvider","CssBaseline","components_Scaffolder","PdfDownloadContainer","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","ExpansionPanelDetails","PdfInsertPageContainer","PdfDeletePageContainer","PdfInsertTextContainer","PdfRotationPageContainer","PdfPreviewContainer","Boolean","window","location","hostname","match","setPdfReducer","handleActions","_handleActions","Object","defineProperty","action","$splice","payload","Uint8Array","setRemoveReducer","setInsertReducer","setTextOptionReducer","_handleActions3","setFormReducer","combineReducers","setViewReducer","setDisplayReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","pdfjs","GlobalWorkerOptions","workerSrc","version","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","e","Error","code","resolve","module","exports","id"],"mappings":"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","file":"static/js/main.f4c9f746.chunk.js","sourcesContent":["import {IPdfInfo} from \"../state/models\";\n\nexport const getEmpty = (): IPdfInfo => {\n    return {data: new Uint8Array(0), pageCount: 0, selectedPage: 0};\n}\n\nexport const isEmpty = (pdf: IPdfInfo) => {\n    return pdf.pageCount === 0;\n}","import {rgb} from \"pdf-lib\";\n\nconst intervalExp = new RegExp('^([0-9]+)-([0-9]+)$');\n\nexport const isInterval = (value: string) => {\n    return intervalExp.test(value)\n}\n\nexport const getInterval = (value: string) => {\n    let exec = intervalExp.exec(value) as RegExpExecArray;\n    return [+exec[1], +exec[2]]\n}\n\nexport const toRgb = (hex: string) => {\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    function getValue(v: string) {\n        return parseInt(v, 16) / 255;\n    }\n\n    return result ? rgb(getValue(result[1]), getValue(result[2]), getValue(result[3])) : rgb(0, 0, 0);\n}","import {degrees, PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo, ITextOption} from \"../state/models\";\nimport update from 'immutability-helper';\nimport {isEmpty} from \"./Uint8ArrayUtils\";\nimport {toRgb} from \"./stringUtils\";\n\nexport async function insertPage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    doc.insertPage(index);\n    const data = await doc.save();\n    return update(state, {data: {$set: data}, pageCount: {$set: state.pageCount + 1}, selectedPage: {$set: index}})\n}\n\nexport async function removePage(state: IPdfInfo, index: number): Promise<IPdfInfo> {\n    return removePages(state, [index]);\n}\n\n/**\n * @param indexes must be ordered !\n */\nexport async function removePages(state: IPdfInfo, indexes: number[]): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    for (const index of indexes.reverse()) {\n        doc.removePage(index);\n    }\n    const data = await doc.save();\n    return {data, pageCount: state.pageCount - indexes.length, selectedPage: state.selectedPage}\n}\n\nexport async function loadPdf(toLoad: string | ArrayBuffer): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(toLoad)\n    const pageCount = doc.getPageCount();\n    const data = await doc.save();\n    return {data, pageCount, selectedPage: 0}\n}\n\nexport async function mergePdf(start: IPdfInfo, end: IPdfInfo): Promise<IPdfInfo> {\n    if (isEmpty(start)) return end;\n    const startDoc = await PDFDocument.load(start.data);\n    const endDoc = await PDFDocument.load(end.data);\n    const contentPages = await startDoc.copyPages(endDoc, endDoc.getPageIndices());\n    for (const page of contentPages) {\n        startDoc.addPage(page);\n    }\n    const data = await startDoc.save();\n    return {data, pageCount: start.pageCount + end.pageCount, selectedPage: start.selectedPage}\n}\n\nexport async function loadAndMerge(toLoad: string | ArrayBuffer, start: IPdfInfo): Promise<IPdfInfo> {\n    return loadPdf(toLoad).then(end => mergePdf(start, end))\n}\n\nexport async function drawText(state: IPdfInfo, option: ITextOption): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(state.selectedPage);\n    const {color, rotate, size, x, y, text} = option\n    page.drawText(text, {x, y, rotate: degrees(rotate), size, color: toRgb(color), lineHeight: size})\n    const data = await doc.save();\n    return update(state, {data: {$set: data}})\n}\n\nexport async function rotatePage(state: IPdfInfo, angle: number): Promise<IPdfInfo> {\n    const doc = await PDFDocument.load(state.data);\n    const page = doc.getPage(state.selectedPage);\n    page.setRotation(degrees(page.getRotation().angle + angle))\n    const data = await doc.save();\n    return update(state, {data: {$set: data}})\n}","import React, {PureComponent} from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport {PDFDocument} from \"pdf-lib\";\nimport {IPdfInfo} from \"../../state/models\";\nimport {WithStyles} from \"@material-ui/core\";\nimport {loadAndMerge, loadPdf, mergePdf} from \"../../utils/pdfUtils\";\n\ninterface IPdfLoaderProps extends WithStyles {\n    load: (data: IPdfInfo) => void;\n    pdf: IPdfInfo;\n}\n\nexport default class PdfLoader extends PureComponent<IPdfLoaderProps> {\n\n    private read = (files: File[]) => {\n        const file = files[0]\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = () => {\n            const binaryStr = reader.result\n            if (binaryStr != null) loadAndMerge(binaryStr, this.props.pdf).then(r => this.props.load(r))\n        }\n        reader.readAsArrayBuffer(file)\n    };\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <Dropzone onDrop={acceptedFiles => this.read(acceptedFiles)} accept={\".pdf\"} multiple={false}>\n                    {({getRootProps, getInputProps}) => (\n                        <section>\n                            <div {...getRootProps({className: classes.dropzone})}>\n                                <input {...getInputProps()} />\n                                <p>Drag 'n' drop some files here, or click to select files</p>\n                            </div>\n                        </section>\n                    )}\n                </Dropzone>\n            </React.Fragment>\n        )\n    }\n}","import {createAction} from \"redux-actions\";\nimport {IPdfInfo} from \"../../../state/models\";\n\nconst component = \"pdf/\";\n\nexport const ActionTypes = {\n    load: component + \"load\",\n    selectPage: component + \"select\",\n    changeVersion: component + \"previousVersion\"\n};\n\nexport const loadPdfAction = createAction<IPdfInfo>(ActionTypes.load);\nexport const selectPageAction = createAction<number>(ActionTypes.selectPage);\nexport const changeVersion = createAction<number>(ActionTypes.changeVersion);","import {IStoreState} from \"../../../state/models\";\n\nexport const pdfWithVersionSelector = (state: IStoreState) => state.pdf\nexport const pdfSelector = (state: IStoreState) => pdfWithVersionSelector(state).versions[pdfWithVersionSelector(state).position];\nexport const pdfDataSelector = (state: IStoreState) => pdfSelector(state).data;\nexport const pdfPageCountSelector = (state: IStoreState) => pdfSelector(state).pageCount;\nexport const pdfSelectedPageSelector = (state: IStoreState) => pdfSelector(state).selectedPage;\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport PdfLoader from \"./PdfLoader\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {loadPdfAction} from \"../redux/pdf/actions\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        dropzone: {\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            padding: \"20px\",\n            borderWidth: \"2px\",\n            borderRadius: \"2px\",\n            borderColor: theme.palette.secondary.main,\n            borderStyle: \"dashed\",\n            backgroundColor: \"#fafafa\",\n            color: theme.palette.secondary.main,\n            outline: \"none\",\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfLoader));","import React, {PureComponent} from \"react\";\nimport {Page} from \"react-pdf\";\nimport {IconButton, WithStyles} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {IPdfInfo} from \"../../state/models\";\nimport {removePage} from \"../../utils/pdfUtils\";\n\ninterface IPdfPageProps extends WithStyles {\n    selectPage: (index: number) => void;\n    load: (data: IPdfInfo) => void;\n\n    pageCount: number;\n    pdf: IPdfInfo;\n\n    index: number;\n    selected: boolean;\n    scale: number;\n}\n\n\nexport default class PdfPage extends PureComponent<IPdfPageProps> {\n    private selectPage = (event: React.MouseEvent<any>) => this.props.selectPage(this.props.index)\n    private removePage = (event: React.MouseEvent<any>) => {\n        event.stopPropagation();\n        removePage(this.props.pdf, this.props.index).then(this.props.load);\n    }\n\n    public render() {\n        const {index, classes, scale, selected, pageCount} = this.props;\n\n        return (\n            <div onClick={this.selectPage} className={selected ? classes.selected : classes.main}>\n                <div className={classes.top}>\n                    <div className={classes.center}>\n                        {(index + 1).toLocaleString()}/{pageCount.toLocaleString()}\n                    </div>\n                    <IconButton aria-label=\"delete\" className={classes.right} onClick={this.removePage}>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </div>\n                <Page className={classes.page} scale={scale} width={595}\n                      pageIndex={index} renderAnnotationLayer={false}/>\n            </div>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../state/models\";\nimport {pdfPageCountSelector, pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport PdfPage from \"./PdfPage\"\nimport {loadPdfAction, selectPageAction} from \"../redux/pdf/actions\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        main: {\n            border: `1px solid ${theme.palette.secondary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        selected: {\n            border: `1px solid ${theme.palette.primary.main}`,\n            padding: 10,\n            margin: 1,\n        },\n        page: {\n            \"& > canvas\": {\n                border: `1px solid ${theme.palette.secondary.main}`,\n            },\n            margin: 5\n        },\n        top: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n        },\n        center: {\n            flex: 1,\n            textAlign: \"center\"\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    selectedPage: pdfSelectedPageSelector(state),\n    pageCount: pdfPageCountSelector(state),\n    pdf: pdfSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPage));","import React, {PureComponent} from \"react\";\nimport {Document} from \"react-pdf\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport PdfLoaderContainer from \"../loader/PdfLoaderContainer\";\nimport {IPdfInfo, View} from \"../../state/models\";\nimport {Grid, IconButton, WithStyles} from \"@material-ui/core\";\nimport PdfPageContainer from \"./PdfPageContainer\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\ninterface IPdfPreviewProps extends WithStyles {\n    pdf: IPdfInfo;\n    selectedPage: number;\n    view: View;\n\n    selectPage: (index: number) => void;\n}\n\n\nexport default class PdfPreview extends PureComponent<IPdfPreviewProps> {\n    private selectPage = (index: number) => (event: React.MouseEvent<any>) => this.props.selectPage(index)\n\n    public render() {\n        const {pdf, selectedPage, view, classes} = this.props;\n        const noPdf = isEmpty(pdf);\n\n        const before = Array.from(Array(pdf.selectedPage).keys()).slice(-2)\n        const all = Array.from(Array(pdf.pageCount).keys())\n        const after = all.slice(selectedPage, selectedPage + 3)\n\n        return (\n            <React.Fragment>\n                {noPdf && <PdfLoaderContainer/>}\n                {!noPdf && <Document file={{data: pdf.data}}>\n                    <Grid container={true} spacing={3}>\n                        {view === \"zoom\" &&\n                        <React.Fragment>\n                            <Grid item={true} xs={2}>\n                                <IconButton aria-label=\"previous\" disabled={selectedPage <= 0}\n                                            onClick={this.selectPage(selectedPage - 1)}>\n                                    <ArrowBackIcon fontSize=\"small\"/>\n                                </IconButton>\n                                {before.map((index) => (\n                                        index !== selectedPage &&\n                                        <PdfPageContainer key={index} selected={false} index={index} scale={0.2}/>\n                                    )\n                                )}\n                            </Grid>\n                            <Grid item={true} xs={8}>\n                                <div className={classes.content}>\n                                    <PdfPageContainer selected={true} index={selectedPage} scale={1}/>\n                                </div>\n                            </Grid>\n                            <Grid item={true} xs={2}>\n                                <IconButton aria-label=\"next\" disabled={selectedPage >= pdf.pageCount - 1}\n                                            onClick={this.selectPage(selectedPage + 1)}>\n                                    <ArrowForwardIcon fontSize=\"small\"/>\n                                </IconButton>\n                                {after.map((index) => (\n                                        index !== selectedPage &&\n                                        <PdfPageContainer key={index} selected={false} index={index} scale={0.2}/>\n                                    )\n                                )}\n                            </Grid>\n                        </React.Fragment>}\n                        {view === \"global\" &&\n                        <React.Fragment>\n                            {all.map((index) => (\n                                    <Grid item={true} xs={2} key={index}>\n                                        <PdfPageContainer selected={selectedPage === index} index={index} scale={0.2}/>\n                                    </Grid>\n                                )\n                            )}\n                        </React.Fragment>\n                        }\n                    </Grid>\n                </Document>}\n            </React.Fragment>\n        )\n    }\n}","import {IStoreState} from \"../../../state/models\";\n\nexport const displaySelector = (state: IStoreState) => state.display;\nexport const displayViewSelector = (state: IStoreState) => displaySelector(state).view;\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfPreview from \"./PdfPreview\";\nimport {pdfSelectedPageSelector, pdfSelector} from \"../redux/pdf/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {selectPageAction} from \"../redux/pdf/actions\";\nimport {displayViewSelector} from \"../redux/display/selectors\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            maxWidth: \"100%\",\n            maxHeight: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            overflow: \"auto\",\n        }\n    })\n\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    selectedPage: pdfSelectedPageSelector(state),\n    view: displayViewSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    selectPage: (index: number) => dispatch(selectPageAction(index)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(PdfPreview));","import React, {PureComponent} from \"react\";\nimport download from \"downloadjs\";\nimport {Button} from \"@material-ui/core\";\nimport {isEmpty} from \"../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo} from \"../../state/models\";\n\ninterface IPdfPreviewProps {\n    pdf: IPdfInfo;\n}\n\nexport default class PdfDownload extends PureComponent<IPdfPreviewProps> {\n\n    private download = () => {\n        download(this.props.pdf.data, \"download.pdf\", \"application/pdf\");\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.download} style={{margin: \"0 10px 10px 0\"}}\n                        disabled={isEmpty(this.props.pdf)}>\n                    Download\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport PdfDownload from \"./PdfDownload\";\nimport {pdfSelector} from \"../redux/pdf/selectors\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDownload);","import React, {PureComponent} from \"react\";\nimport {Toolbar, Typography, WithStyles} from \"@material-ui/core\";\nimport UndoIcon from '@material-ui/icons/Undo';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport RedoIcon from '@material-ui/icons/Redo';\n\ninterface IVersionSelectorProps extends WithStyles {\n    changeVersion: (index: number) => void;\n}\n\nexport default class VersionSelector extends PureComponent<IVersionSelectorProps> {\n\n    private changeVersion = (change: number) => (event: React.MouseEvent<any>) => {\n        event.stopPropagation();\n        this.props.changeVersion(change);\n    }\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <div className={classes.center}>\n                <IconButton color={\"inherit\"} onClick={this.changeVersion(-1)}>\n                    <UndoIcon/>\n                    <Typography variant=\"subtitle1\">\n                        Undo\n                    </Typography>\n                </IconButton>\n                <IconButton color={\"inherit\"} onClick={this.changeVersion(1)}>\n                    <Typography variant=\"subtitle1\">\n                        Redo\n                    </Typography>\n                    <RedoIcon/>\n                </IconButton>\n            </div>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState} from \"../../state/models\";\nimport VersionSelector from \"./VersionSelector\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\nimport {changeVersion} from \"../../pdf/redux/pdf/actions\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        center: {\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n        }\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    changeVersion: (index: number) => dispatch(changeVersion(index)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(VersionSelector));","import React, {PureComponent} from \"react\";\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport {View} from \"../../state/models\";\nimport {ToggleButton, ToggleButtonGroup} from \"@material-ui/lab\";\nimport {Typography, WithStyles} from \"@material-ui/core\";\n\ninterface IViewSelectorProps extends WithStyles {\n    view: View;\n\n    setView: (index: View) => void;\n}\n\nexport default class ViewSelector extends PureComponent<IViewSelectorProps> {\n\n    private handleAlignment = (event: React.MouseEvent<HTMLElement>, view: View | null) => {\n        if (view && view !== this.props.view) this.props.setView(view);\n    };\n\n    public render() {\n        const {view, classes} = this.props;\n        return (\n            <div className={classes.group}>\n                <Typography variant=\"subtitle1\" className={classes.text}>\n                    View\n                </Typography>\n                <ToggleButtonGroup\n                    value={view}\n                    exclusive={true}\n                    onChange={this.handleAlignment}\n                    aria-label=\"text alignment\"\n                >\n                    <ToggleButton value=\"global\" aria-label=\"global\" color={\"inherit\"}>\n                        <ViewListIcon/>\n                    </ToggleButton>\n                    <ToggleButton value=\"zoom\" aria-label=\"zoom\" color={\"inherit\"}>\n                        <ZoomInIcon/>\n                    </ToggleButton>\n                </ToggleButtonGroup>\n\n            </div>\n        )\n    }\n}","import {createAction} from \"redux-actions\";\nimport {View} from \"../../../state/models\";\n\nconst component = \"display/\";\n\nexport const ActionTypes = {\n    setView: component + \"setView\",\n};\n\nexport const setDisplayViewAction = createAction<View>(ActionTypes.setView);\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IStoreState, View} from \"../../state/models\";\nimport ViewSelector from \"./ViewSelector\";\nimport {setDisplayViewAction} from \"../../pdf/redux/display/actions\";\nimport {displayViewSelector} from \"../../pdf/redux/display/selectors\";\nimport {createStyles, Theme, withStyles} from \"@material-ui/core\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        group: {\n            marginRight: 8,\n        },\n        text: {\n            display: \"inline-flex\",\n            marginRight: 5,\n        },\n    })\n\nconst mapStateToProps = (state: IStoreState) => ({\n    view: displayViewSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    setView: (view: View) => dispatch(setDisplayViewAction(view)),\n});\n\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(ViewSelector));","import * as React from \"react\";\nimport {AppBar, createStyles, Theme, Toolbar, Typography, withStyles, WithStyles} from \"@material-ui/core\";\nimport VersionSelectorContainer from \"./version/VersionSelectorContainer\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport ViewSelectorContainer from \"./view/ViewSelectorContainer\";\nimport Divider from \"@material-ui/core/Divider\";\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        content: {\n            height: \"calc(100%-64px)\",\n            padding: 40,\n        }\n    })\n\nclass Scaffolder extends React.PureComponent<WithStyles> {\n\n    public render() {\n        const {classes} = this.props;\n        return (\n            <React.Fragment>\n                <AppBar elevation={0} position={\"static\"}>\n                    <Toolbar>\n                        <Typography variant=\"h4\">\n                            pdfModer\n                        </Typography>\n                        <VersionSelectorContainer/>\n                        <ViewSelectorContainer/>\n                        <Divider orientation=\"vertical\" flexItem={true}/>\n                        <IconButton color={\"inherit\"} href={\"https://github.com/TimotheBarbe/pdfModer\"}\n                                    target={\"_blank\"}>\n                            <GitHubIcon/>\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n                <main className={classes.content}>\n                    {this.props.children}\n                </main>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(Scaffolder);\n","import {ChangeEvent} from \"react\";\n\n\nexport const setString = (setter: (data: string) => void) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setter(event.target.value)\n}\n\nexport const setNumber = (setter: (data: number) => void) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setter(+event.target.value)\n}","import React, {ChangeEvent, PureComponent} from \"react\";\nimport {Button, Grid, TextField} from \"@material-ui/core\";\nimport {insertPage} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport PdfLoaderContainer from \"../../loader/PdfLoaderContainer\";\nimport Scaffolder from \"../../../components/Scaffolder\";\nimport {isInterval} from \"../../../utils/stringUtils\";\nimport {setString} from \"../../../utils/formUtils\";\n\ninterface IPdfInsertProps {\n    pdf: IPdfInfo;\n    insert: string;\n\n    load: (data: IPdfInfo) => void;\n    setInsert: (data: string) => void;\n}\n\nexport default class PdfInsertPage extends PureComponent<IPdfInsertProps> {\n\n    private insert = () => {\n        const pos = this.props.insert;\n        if (!isNaN(+pos)) {\n            insertPage(this.props.pdf, +pos - 1).then(this.props.load)\n        }\n    }\n\n    private isDisabled = () => {\n        const isNotValidNumber = isNaN(+this.props.insert) || +this.props.insert < 1;\n        return isEmpty(this.props.pdf) || (isNotValidNumber)\n    }\n\n    public render() {\n        const {insert, setInsert} = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <TextField\n                        label=\"Before page\"\n                        type=\"text\"\n                        value={insert}\n                        onChange={setString(setInsert)}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            startIcon={<AddIcon/>}>\n                        new page\n                    </Button>\n                </Grid>\n                <Grid item={true} xs={12}>\n                    Insert doc\n                    <PdfLoaderContainer/>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {IStoreState} from \"../../../state/models\";\n\nexport const formSelector = (state: IStoreState) => state.form;\nexport const formRemoveSelector = (state: IStoreState) => formSelector(state).remove;\nexport const formInsertSelector = (state: IStoreState) => formSelector(state).insert;\n\nexport const formTextOptionSelector = (state: IStoreState) => formSelector(state).textOption;\nexport const formTextXSelector = (state: IStoreState) => formTextOptionSelector(state).x;\nexport const formTextYSelector = (state: IStoreState) => formTextOptionSelector(state).y;\nexport const formTextRotateSelector = (state: IStoreState) => formTextOptionSelector(state).rotate;\nexport const formTextColorSelector = (state: IStoreState) => formTextOptionSelector(state).color;\nexport const formTextSizeSelector = (state: IStoreState) => formTextOptionSelector(state).size;\nexport const formTextSelector = (state: IStoreState) => formTextOptionSelector(state).text;\n","import {createAction} from \"redux-actions\";\nimport {IForm} from \"../../../state/models\";\n\nconst component = \"form/\";\n\nexport const ActionTypes = {\n    set: component + \"set\",\n    setRemove: component + \"setRemove\",\n    setInsert: component + \"setInsert\",\n    setTextColor: component + \"text/setTextColor\",\n    setTextY: component + \"text/setTextY\",\n    setTextX: component + \"text/setTextX\",\n    setTextSize: component + \"text/setTextSize\",\n    setTextRotate: component + \"text/setTextRotate\",\n    setText: component + \"text/setText\",\n\n};\n\nexport const setFormAction = createAction<IForm>(ActionTypes.set);\n\nexport const setFormRemoveAction = createAction<string>(ActionTypes.setRemove);\nexport const setFormInsertAction = createAction<string>(ActionTypes.setInsert);\n\nexport const setTextColorAction = createAction<string>(ActionTypes.setTextColor);\nexport const setTextYAction = createAction<number>(ActionTypes.setTextY);\nexport const setTextXAction = createAction<number>(ActionTypes.setTextX);\nexport const setTextSizeAction = createAction<number>(ActionTypes.setTextSize);\nexport const setTextRotateAction = createAction<number>(ActionTypes.setTextRotate);\nexport const setTextAction = createAction<string>(ActionTypes.setText);\n","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertPage from \"./PdfInsertPage\";\nimport {formInsertSelector} from \"../../redux/form/selectors\";\nimport {setFormInsertAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    insert: formInsertSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setInsert: (data: string) => dispatch(setFormInsertAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertPage);","import React, {ChangeEvent, Component} from \"react\";\nimport {Button, TextField} from \"@material-ui/core\";\nimport {removePage, removePages} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {getInterval, isInterval} from \"../../../utils/stringUtils\";\nimport {setString} from \"../../../utils/formUtils\";\n\n\ninterface IPdfDeleteProps {\n    pdf: IPdfInfo;\n    remove: string;\n\n    load: (data: IPdfInfo) => void;\n    setRemove: (data: string) => void;\n}\n\nexport default class PdfDeletePage extends Component<IPdfDeleteProps> {\n\n    private remove = () => {\n        const pos = this.props.remove;\n        if (!isNaN(+pos)) {\n            const position = +pos - 1\n            removePage(this.props.pdf, position).then(this.props.load)\n        } else if (isInterval(pos)) {\n            const interval = getInterval(pos);\n            const toRemove = Array.from(Array(interval[1]).keys()).slice(interval[0] - 1);\n            removePages(this.props.pdf, toRemove).then(this.props.load)\n        }\n    }\n\n    private isDisabled = () => {\n        const isNotValidNumber = isNaN(+this.props.remove) || +this.props.remove < 1;\n        return isEmpty(this.props.pdf) || (isNotValidNumber && !isInterval(this.props.remove))\n    }\n\n    public render() {\n        const {pdf, remove, setRemove} = this.props;\n        return (\n            <React.Fragment>\n                <TextField\n                    label={\"Pages to delete\"}\n                    type={\"text\"}\n                    value={remove}\n                    onChange={setString(setRemove)}\n                    placeholder={\"ex: 5-8 or 8\"}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.remove}\n                        style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                        startIcon={<DeleteIcon/>}>\n                    Delete\n                </Button>\n            </React.Fragment>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfDeletePage from \"./PdfDeletePage\";\nimport {formRemoveSelector} from \"../../redux/form/selectors\";\nimport {setFormRemoveAction} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    remove: formRemoveSelector(state)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setRemove: (data: string) => dispatch(setFormRemoveAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfDeletePage);","import React, {PureComponent} from \"react\";\nimport {Button, Grid, InputAdornment, TextField} from \"@material-ui/core\";\nimport {drawText} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo, ITextOption} from \"../../../state/models\";\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport AddIcon from '@material-ui/icons/Add';\nimport {setNumber, setString} from \"../../../utils/formUtils\";\n\ninterface IPdfInsertTextProps extends ITextOption {\n    pdf: IPdfInfo;\n\n    load: (data: IPdfInfo) => void;\n    setTextColor: (data: string) => void;\n    setTextY: (data: number) => void;\n    setTextX: (data: number) => void;\n    setTextSize: (data: number) => void;\n    setTextRotate: (data: number) => void;\n    setText: (data: string) => void;\n}\n\nexport default class PdfInsertText extends PureComponent<IPdfInsertTextProps> {\n\n    private insert = () => {\n        drawText(this.props.pdf, this.props).then(this.props.load)\n    }\n\n    public render() {\n        const {\n            color, setTextColor, y, setTextY, x, setTextX, size, setTextSize, rotate, setTextRotate,\n            text, setText\n        } = this.props;\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <TextField\n                        label=\"Text\"\n                        type=\"text\"\n                        placeholder={\"ex: draw some text\"}\n                        value={text}\n                        onChange={setString(setText)}\n                        InputLabelProps={{shrink: true}}\n                        multiline={true}\n                        rows={4}\n                        variant={\"outlined\"}\n                        fullWidth={true}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Y\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={y}\n                        onChange={setNumber(setTextY)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"X\"\n                        type=\"number\"\n                        placeholder={\"ex: 200\"}\n                        value={x}\n                        onChange={setNumber(setTextX)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Size\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={size}\n                        onChange={setNumber(setTextSize)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Rotate\"\n                        type=\"number\"\n                        placeholder={\"ex: 14\"}\n                        value={rotate}\n                        onChange={setNumber(setTextRotate)}\n                        InputLabelProps={{shrink: true}}\n                        inputProps={{min: \"0\"}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <TextField\n                        label=\"Color\"\n                        type=\"text\"\n                        placeholder={\"ex: #000000\"}\n                        value={color}\n                        onChange={setString(setTextColor)}\n                        InputLabelProps={{shrink: true}}\n                    />\n                </Grid>\n                <Grid item={true} xs={6}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.insert}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={isEmpty(this.props.pdf)}\n                            startIcon={<AddIcon/>}>\n                        Draw text\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\nimport PdfInsertText from \"./PdfInsertText\";\nimport {\n    formTextColorSelector,\n    formTextRotateSelector,\n    formTextSelector,\n    formTextSizeSelector,\n    formTextXSelector,\n    formTextYSelector\n} from \"../../redux/form/selectors\";\nimport {\n    setTextAction,\n    setTextColorAction,\n    setTextRotateAction,\n    setTextSizeAction,\n    setTextXAction,\n    setTextYAction\n} from \"../../redux/form/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n    x: formTextXSelector(state),\n    y: formTextYSelector(state),\n    rotate: formTextRotateSelector(state),\n    color: formTextColorSelector(state),\n    size: formTextSizeSelector(state),\n    text: formTextSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n    setTextColor: (data: string) => dispatch(setTextColorAction(data)),\n    setTextY: (data: number) => dispatch(setTextYAction(data)),\n    setTextX: (data: number) => dispatch(setTextXAction(data)),\n    setTextSize: (data: number) => dispatch(setTextSizeAction(data)),\n    setTextRotate: (data: number) => dispatch(setTextRotateAction(data)),\n    setText: (data: string) => dispatch(setTextAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfInsertText);","import React, {PureComponent} from \"react\";\nimport {Button, Grid} from \"@material-ui/core\";\nimport {rotatePage} from \"../../../utils/pdfUtils\";\nimport {IPdfInfo} from \"../../../state/models\";\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport RotateRightIcon from '@material-ui/icons/RotateRight';\nimport {isEmpty} from \"../../../utils/Uint8ArrayUtils\";\n\ninterface IPdfRotationProps {\n    pdf: IPdfInfo;\n\n    load: (data: IPdfInfo) => void;\n}\n\nexport default class PdfRotationPage extends PureComponent<IPdfRotationProps> {\n\n    private rotate = (angle: number) => () => {\n        rotatePage(this.props.pdf, angle).then(this.props.load)\n    }\n\n    private isDisabled = () => {\n        return isEmpty(this.props.pdf);\n    }\n\n    public render() {\n        return (\n            <Grid container={true} spacing={3}>\n                <Grid item={true} xs={12}>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.rotate(-90)}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            startIcon={<RotateLeftIcon/>}>\n                        rotate left\n                    </Button>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={this.rotate(90)}\n                            style={{margin: \"0 10px 10px 0\"}} disabled={this.isDisabled()}\n                            endIcon={<RotateRightIcon/>}>\n                        rotate right\n                    </Button>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import {connect} from \"react-redux\";\nimport {Action, Dispatch} from \"redux\";\nimport {IPdfInfo, IStoreState} from \"../../../state/models\";\nimport PdfRotationPage from \"./PdfRotationPage\";\nimport {pdfSelector} from \"../../redux/pdf/selectors\";\nimport {loadPdfAction} from \"../../redux/pdf/actions\";\n\nconst mapStateToProps = (state: IStoreState) => ({\n    pdf: pdfSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    load: (data: IPdfInfo) => dispatch(loadPdfAction(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PdfRotationPage);","import \"./App.css\";\n\nimport * as React from \"react\";\nimport {CssBaseline, ExpansionPanel, ExpansionPanelDetails, Grid, Typography} from \"@material-ui/core\";\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core/styles\";\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport PdfPreviewContainer from \"../pdf/preview/PdfPreviewContainer\";\nimport PdfDownloadContainer from \"../pdf/download/PdfDownloadContainer\";\nimport Scaffolder from \"./Scaffolder\";\nimport PdfInsertPageContainer from \"../pdf/modify/insert/PdfInsertPageContainer\";\nimport PdfDeletePageContainer from \"../pdf/modify/delete/PdfDeletePageContainer\";\nimport PdfInsertTextContainer from \"../pdf/modify/text/PdfInsertTextContainer\";\nimport PdfRotationPageContainer from \"../pdf/modify/rotation/PdfRotationPageContainer\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {main: \"#ee3f3f\"},\n        secondary: {main: \"#a09f9f\"},\n        // type: 'dark',\n    }\n});\n\nclass App extends React.PureComponent {\n\n    public render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline/>\n                <Scaffolder>\n                    <Grid container={true} spacing={3}>\n                        <Grid item={true} xs={3}>\n                            <PdfDownloadContainer/>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Insert page</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertPageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Delete</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfDeletePageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Add text</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfInsertTextContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                            <ExpansionPanel>\n                                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon/>}>\n                                    <Typography>Rotate</Typography>\n                                </ExpansionPanelSummary>\n                                <ExpansionPanelDetails>\n                                    <PdfRotationPageContainer/>\n                                </ExpansionPanelDetails>\n                            </ExpansionPanel>\n                        </Grid>\n                        <Grid item={true} xs={9}>\n                            <PdfPreviewContainer/>\n                        </Grid>\n                    </Grid>\n                </Scaffolder>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {getEmpty} from \"../../../utils/Uint8ArrayUtils\";\nimport {IPdfInfo, IPdfWithVersion} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\nexport const setPdfReducer = handleActions<any, any>(\n    {\n        [ActionTypes.load]: (state: IPdfWithVersion, action: Action<IPdfInfo>) => {\n            return update(state, {\n                versions: {$splice: [[state.position + 1, state.versions.length, action.payload as IPdfInfo]]},\n                position: {$set: state.position + 1}\n            })\n        },\n        [ActionTypes.selectPage]: (state: IPdfWithVersion, action: Action<number>) => {\n            const position = state.position\n            return update(state, {versions: {[position]: {selectedPage: {$set: action.payload}}}})\n        },\n        [ActionTypes.changeVersion]: (state: IPdfWithVersion, action: Action<number>) => {\n            const position = state.position\n            return update(state, {position: {$set: position + action.payload}})\n        },\n    },\n    {versions: [getEmpty()], position: 0} as IPdfWithVersion\n);\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {combineReducers} from \"redux\";\nimport {ITextOption} from \"../../../state/models\";\nimport update from \"immutability-helper\";\n\n\nexport const setRemoveReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setRemove]: (state: string, action: Action<string>) => {\n            return action.payload\n        },\n    },\n    \"\"\n);\n\nexport const setInsertReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setInsert]: (state: string, action: Action<string>) => {\n            return action.payload\n        },\n    },\n    \"\"\n);\n\nexport const setTextOptionReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setTextColor]: (state: ITextOption, action: Action<string>) => {\n            return update(state, {color: {$set: action.payload}})\n        },\n        [ActionTypes.setTextRotate]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {rotate: {$set: action.payload}})\n        },\n        [ActionTypes.setTextSize]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {size: {$set: action.payload}})\n        },\n        [ActionTypes.setTextX]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {x: {$set: action.payload}})\n        },\n        [ActionTypes.setTextY]: (state: ITextOption, action: Action<number>) => {\n            return update(state, {y: {$set: action.payload}})\n        },\n        [ActionTypes.setText]: (state: ITextOption, action: Action<string>) => {\n            return update(state, {text: {$set: action.payload}})\n        },\n    },\n    {color: \"\", rotate: 0, size: 12, x: 0, y: 0, text: \"\"} as ITextOption\n);\n\nexport const setFormReducer = combineReducers({\n    remove: setRemoveReducer,\n    insert: setInsertReducer,\n    textOption: setTextOptionReducer\n})\n\n\n","import {ActionTypes} from \"./actions\";\nimport {Action, handleActions} from \"redux-actions\";\nimport {combineReducers} from \"redux\";\nimport {View} from \"../../../state/models\";\n\n\nexport const setViewReducer = handleActions<any, any>(\n    {\n        [ActionTypes.setView]: (state: View, action: Action<View>) => {\n            return action.payload as View\n        },\n    },\n    \"zoom\" as View\n);\n\nexport const setDisplayReducer = combineReducers({\n    view: setViewReducer,\n})\n\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {setPdfReducer} from \"../pdf/redux/pdf/reducers\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {setFormReducer} from \"../pdf/redux/form/reducers\";\nimport {setDisplayReducer} from \"../pdf/redux/display/reducers\";\n\nconst rootReducer = combineReducers({\n    pdf: setPdfReducer,\n    form: setFormReducer,\n    display: setDisplayReducer\n})\n\nexport const store = createStore(rootReducer, composeWithDevTools(\n    applyMiddleware()\n))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {pdfjs} from 'react-pdf';\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 83;"],"sourceRoot":""}